/**
 * VCG DAM RESTFUL API
 * DAM综合接口，提供对后端微服务包装后的接口
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var querystring = require("querystring");
var url = require("url");
var isomorphicFetch = require("isomorphic-fetch");
var assign = require("core-js/library/fn/object/assign");
var BASE_PATH = "http:///api";
var BaseAPI = (function () {
    function BaseAPI(fetch, basePath) {
        if (fetch === void 0) { fetch = isomorphicFetch; }
        if (basePath === void 0) { basePath = BASE_PATH; }
        this.basePath = basePath;
        this.fetch = fetch;
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
/**
 * DownloadApi - fetch parameter creator
 */
exports.DownloadApiFetchParamCreactor = {
    /**
     * 通过DAM作为代理的方式下载文件 | 一般情况下客户端直接访问下载地址下载文件，对于外包项目(李鹏)的特殊需求，无法在下载资源地址中 | 添加query参数，所以用post方式，把阿里云的参数放在body中传递
     * @param file 资源地址，对应/assets/downloadurl返回的 proxy.pathname
     */
    downloadProxyFileGet: function (params) {
        // verify required parameter "file" is set
        if (params["file"] == null) {
            throw new Error("Missing required parameter file when calling downloadProxyFileGet");
        }
        var baseUrl = "/download/proxy/{file}"
            .replace("{" + "file" + "}", "" + params.file);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 验证当前用户是否有权限下载资源
     * @param ids 待验证的资源列表
     */
    downloadVerifyPost: function (params) {
        var baseUrl = "/download/verify";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["ids"]) {
            fetchOptions.body = JSON.stringify(params["ids"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * DownloadApi - functional programming interface
 */
exports.DownloadApiFp = {
    /**
     * 通过DAM作为代理的方式下载文件 | 一般情况下客户端直接访问下载地址下载文件，对于外包项目(李鹏)的特殊需求，无法在下载资源地址中 | 添加query参数，所以用post方式，把阿里云的参数放在body中传递
     * @param file 资源地址，对应/assets/downloadurl返回的 proxy.pathname
     */
    downloadProxyFileGet: function (params) {
        var fetchArgs = exports.DownloadApiFetchParamCreactor.downloadProxyFileGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 验证当前用户是否有权限下载资源
     * @param ids 待验证的资源列表
     */
    downloadVerifyPost: function (params) {
        var fetchArgs = exports.DownloadApiFetchParamCreactor.downloadVerifyPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * DownloadApi - object-oriented interface
 */
var DownloadApi = (function (_super) {
    __extends(DownloadApi, _super);
    function DownloadApi() {
        _super.apply(this, arguments);
    }
    /**
     * 通过DAM作为代理的方式下载文件 | 一般情况下客户端直接访问下载地址下载文件，对于外包项目(李鹏)的特殊需求，无法在下载资源地址中 | 添加query参数，所以用post方式，把阿里云的参数放在body中传递
     * @param file 资源地址，对应/assets/downloadurl返回的 proxy.pathname
     */
    DownloadApi.prototype.downloadProxyFileGet = function (params) {
        return exports.DownloadApiFp.downloadProxyFileGet(params)(this.fetch, this.basePath);
    };
    /**
     * 验证当前用户是否有权限下载资源
     * @param ids 待验证的资源列表
     */
    DownloadApi.prototype.downloadVerifyPost = function (params) {
        return exports.DownloadApiFp.downloadVerifyPost(params)(this.fetch, this.basePath);
    };
    return DownloadApi;
}(BaseAPI));
exports.DownloadApi = DownloadApi;
;
/**
 * DownloadApi - factory interface
 */
exports.DownloadApiFactory = function (fetch, basePath) {
    return {
        /**
         * 通过DAM作为代理的方式下载文件 | 一般情况下客户端直接访问下载地址下载文件，对于外包项目(李鹏)的特殊需求，无法在下载资源地址中 | 添加query参数，所以用post方式，把阿里云的参数放在body中传递
         * @param file 资源地址，对应/assets/downloadurl返回的 proxy.pathname
         */
        downloadProxyFileGet: function (params) {
            return exports.DownloadApiFp.downloadProxyFileGet(params)(fetch, basePath);
        },
        /**
         * 验证当前用户是否有权限下载资源
         * @param ids 待验证的资源列表
         */
        downloadVerifyPost: function (params) {
            return exports.DownloadApiFp.downloadVerifyPost(params)(fetch, basePath);
        },
    };
};
/**
 * OAuthTokenApi - fetch parameter creator
 */
exports.OAuthTokenApiFetchParamCreactor = {
    /**
     * Access token
     * 根据client id,client secret,username,password以及grant type获取鉴权用户的access token和refres token等详情&lt;br/&gt; 采用OAuth2 Passport模式鉴权(参见Oauth2规范, 要求使用basic Auth方式传递client_id， client-sercret)
     * @param username VCG DAM 账号名称
     * @param password VCG DAM 账号密码
     * @param grantType 类型一定为password
     */
    oauth2AccessTokenPost: function (params) {
        // verify required parameter "username" is set
        if (params["username"] == null) {
            throw new Error("Missing required parameter username when calling oauth2AccessTokenPost");
        }
        // verify required parameter "password" is set
        if (params["password"] == null) {
            throw new Error("Missing required parameter password when calling oauth2AccessTokenPost");
        }
        // verify required parameter "grantType" is set
        if (params["grantType"] == null) {
            throw new Error("Missing required parameter grantType when calling oauth2AccessTokenPost");
        }
        var baseUrl = "/oauth2/access_token";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "username": params.username,
            "password": params.password,
            "grant_type": params.grantType,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * Refresh token
     * 根据鉴权用户ID和密钥访问refresh_token进行过期token的刷新操作,重新生成token,并恢复token的失效时间.&lt;br/&gt; 采用OAuth2 refresh_token 模式鉴权。(参见Oauth2规范, 要求使用basic Auth方式传递client_id， client-sercret)
     * @param grantType 鉴权请求类型等于refresh_token.
     * @param refreshToken refresh token.
     */
    oauth2RefreshTokenPost: function (params) {
        // verify required parameter "grantType" is set
        if (params["grantType"] == null) {
            throw new Error("Missing required parameter grantType when calling oauth2RefreshTokenPost");
        }
        // verify required parameter "refreshToken" is set
        if (params["refreshToken"] == null) {
            throw new Error("Missing required parameter refreshToken when calling oauth2RefreshTokenPost");
        }
        var baseUrl = "/oauth2/refresh_token";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "grant_type": params.grantType,
            "refresh_token": params.refreshToken,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * OAuthTokenApi - functional programming interface
 */
exports.OAuthTokenApiFp = {
    /**
     * Access token
     * 根据client id,client secret,username,password以及grant type获取鉴权用户的access token和refres token等详情&lt;br/&gt; 采用OAuth2 Passport模式鉴权(参见Oauth2规范, 要求使用basic Auth方式传递client_id， client-sercret)
     * @param username VCG DAM 账号名称
     * @param password VCG DAM 账号密码
     * @param grantType 类型一定为password
     */
    oauth2AccessTokenPost: function (params) {
        var fetchArgs = exports.OAuthTokenApiFetchParamCreactor.oauth2AccessTokenPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * Refresh token
     * 根据鉴权用户ID和密钥访问refresh_token进行过期token的刷新操作,重新生成token,并恢复token的失效时间.&lt;br/&gt; 采用OAuth2 refresh_token 模式鉴权。(参见Oauth2规范, 要求使用basic Auth方式传递client_id， client-sercret)
     * @param grantType 鉴权请求类型等于refresh_token.
     * @param refreshToken refresh token.
     */
    oauth2RefreshTokenPost: function (params) {
        var fetchArgs = exports.OAuthTokenApiFetchParamCreactor.oauth2RefreshTokenPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * OAuthTokenApi - object-oriented interface
 */
var OAuthTokenApi = (function (_super) {
    __extends(OAuthTokenApi, _super);
    function OAuthTokenApi() {
        _super.apply(this, arguments);
    }
    /**
     * Access token
     * 根据client id,client secret,username,password以及grant type获取鉴权用户的access token和refres token等详情&lt;br/&gt; 采用OAuth2 Passport模式鉴权(参见Oauth2规范, 要求使用basic Auth方式传递client_id， client-sercret)
     * @param username VCG DAM 账号名称
     * @param password VCG DAM 账号密码
     * @param grantType 类型一定为password
     */
    OAuthTokenApi.prototype.oauth2AccessTokenPost = function (params) {
        return exports.OAuthTokenApiFp.oauth2AccessTokenPost(params)(this.fetch, this.basePath);
    };
    /**
     * Refresh token
     * 根据鉴权用户ID和密钥访问refresh_token进行过期token的刷新操作,重新生成token,并恢复token的失效时间.&lt;br/&gt; 采用OAuth2 refresh_token 模式鉴权。(参见Oauth2规范, 要求使用basic Auth方式传递client_id， client-sercret)
     * @param grantType 鉴权请求类型等于refresh_token.
     * @param refreshToken refresh token.
     */
    OAuthTokenApi.prototype.oauth2RefreshTokenPost = function (params) {
        return exports.OAuthTokenApiFp.oauth2RefreshTokenPost(params)(this.fetch, this.basePath);
    };
    return OAuthTokenApi;
}(BaseAPI));
exports.OAuthTokenApi = OAuthTokenApi;
;
/**
 * OAuthTokenApi - factory interface
 */
exports.OAuthTokenApiFactory = function (fetch, basePath) {
    return {
        /**
         * Access token
         * 根据client id,client secret,username,password以及grant type获取鉴权用户的access token和refres token等详情&lt;br/&gt; 采用OAuth2 Passport模式鉴权(参见Oauth2规范, 要求使用basic Auth方式传递client_id， client-sercret)
         * @param username VCG DAM 账号名称
         * @param password VCG DAM 账号密码
         * @param grantType 类型一定为password
         */
        oauth2AccessTokenPost: function (params) {
            return exports.OAuthTokenApiFp.oauth2AccessTokenPost(params)(fetch, basePath);
        },
        /**
         * Refresh token
         * 根据鉴权用户ID和密钥访问refresh_token进行过期token的刷新操作,重新生成token,并恢复token的失效时间.&lt;br/&gt; 采用OAuth2 refresh_token 模式鉴权。(参见Oauth2规范, 要求使用basic Auth方式传递client_id， client-sercret)
         * @param grantType 鉴权请求类型等于refresh_token.
         * @param refreshToken refresh token.
         */
        oauth2RefreshTokenPost: function (params) {
            return exports.OAuthTokenApiFp.oauth2RefreshTokenPost(params)(fetch, basePath);
        },
    };
};
/**
 * OauthClientApi - fetch parameter creator
 */
exports.OauthClientApiFetchParamCreactor = {
    /**
     */
    oauthclientsGet: function () {
        var baseUrl = "/oauthclients";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param id
     */
    oauthclientsIdDelete: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling oauthclientsIdDelete");
        }
        var baseUrl = "/oauthclients/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "DELETE" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param oauth
     */
    oauthclientsPost: function (params) {
        // verify required parameter "oauth" is set
        if (params["oauth"] == null) {
            throw new Error("Missing required parameter oauth when calling oauthclientsPost");
        }
        var baseUrl = "/oauthclients";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["oauth"]) {
            fetchOptions.body = JSON.stringify(params["oauth"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * OauthClientApi - functional programming interface
 */
exports.OauthClientApiFp = {
    /**
     */
    oauthclientsGet: function () {
        var fetchArgs = exports.OauthClientApiFetchParamCreactor.oauthclientsGet();
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param id
     */
    oauthclientsIdDelete: function (params) {
        var fetchArgs = exports.OauthClientApiFetchParamCreactor.oauthclientsIdDelete(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param oauth
     */
    oauthclientsPost: function (params) {
        var fetchArgs = exports.OauthClientApiFetchParamCreactor.oauthclientsPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * OauthClientApi - object-oriented interface
 */
var OauthClientApi = (function (_super) {
    __extends(OauthClientApi, _super);
    function OauthClientApi() {
        _super.apply(this, arguments);
    }
    /**
     */
    OauthClientApi.prototype.oauthclientsGet = function () {
        return exports.OauthClientApiFp.oauthclientsGet()(this.fetch, this.basePath);
    };
    /**
     * @param id
     */
    OauthClientApi.prototype.oauthclientsIdDelete = function (params) {
        return exports.OauthClientApiFp.oauthclientsIdDelete(params)(this.fetch, this.basePath);
    };
    /**
     * @param oauth
     */
    OauthClientApi.prototype.oauthclientsPost = function (params) {
        return exports.OauthClientApiFp.oauthclientsPost(params)(this.fetch, this.basePath);
    };
    return OauthClientApi;
}(BaseAPI));
exports.OauthClientApi = OauthClientApi;
;
/**
 * OauthClientApi - factory interface
 */
exports.OauthClientApiFactory = function (fetch, basePath) {
    return {
        /**
         */
        oauthclientsGet: function () {
            return exports.OauthClientApiFp.oauthclientsGet()(fetch, basePath);
        },
        /**
         * @param id
         */
        oauthclientsIdDelete: function (params) {
            return exports.OauthClientApiFp.oauthclientsIdDelete(params)(fetch, basePath);
        },
        /**
         * @param oauth
         */
        oauthclientsPost: function (params) {
            return exports.OauthClientApiFp.oauthclientsPost(params)(fetch, basePath);
        },
    };
};
/**
 * SearchApi - fetch parameter creator
 */
exports.SearchApiFetchParamCreactor = {
    /**
     * 通过关键字搜索资源
     * @param q 关键字列表，通过英文逗号分隔
     */
    searchGet: function (params) {
        var baseUrl = "/search";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "q": params.q,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SearchApi - functional programming interface
 */
exports.SearchApiFp = {
    /**
     * 通过关键字搜索资源
     * @param q 关键字列表，通过英文逗号分隔
     */
    searchGet: function (params) {
        var fetchArgs = exports.SearchApiFetchParamCreactor.searchGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * SearchApi - object-oriented interface
 */
var SearchApi = (function (_super) {
    __extends(SearchApi, _super);
    function SearchApi() {
        _super.apply(this, arguments);
    }
    /**
     * 通过关键字搜索资源
     * @param q 关键字列表，通过英文逗号分隔
     */
    SearchApi.prototype.searchGet = function (params) {
        return exports.SearchApiFp.searchGet(params)(this.fetch, this.basePath);
    };
    return SearchApi;
}(BaseAPI));
exports.SearchApi = SearchApi;
;
/**
 * SearchApi - factory interface
 */
exports.SearchApiFactory = function (fetch, basePath) {
    return {
        /**
         * 通过关键字搜索资源
         * @param q 关键字列表，通过英文逗号分隔
         */
        searchGet: function (params) {
            return exports.SearchApiFp.searchGet(params)(fetch, basePath);
        },
    };
};
/**
 * UserApi - fetch parameter creator
 */
exports.UserApiFetchParamCreactor = {
    /**
     * 获取验证码
     */
    captchaGet: function () {
        var baseUrl = "/captcha";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 清除浏览器cookie，取消免密码登陆
     */
    forgetMePost: function () {
        var baseUrl = "/forget_me";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 用户登陆
     * @param user 用户名和密码
     */
    loginPost: function (params) {
        // verify required parameter "user" is set
        if (params["user"] == null) {
            throw new Error("Missing required parameter user when calling loginPost");
        }
        var baseUrl = "/login";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["user"]) {
            fetchOptions.body = JSON.stringify(params["user"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 用户登出
     */
    logoutPost: function () {
        var baseUrl = "/logout";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 查看当前登录用户的个人信息
     */
    profileGet: function () {
        var baseUrl = "/profile";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param user 创建群组用户
     */
    usersPost: function (params) {
        // verify required parameter "user" is set
        if (params["user"] == null) {
            throw new Error("Missing required parameter user when calling usersPost");
        }
        var baseUrl = "/users";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["user"]) {
            fetchOptions.body = JSON.stringify(params["user"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * UserApi - functional programming interface
 */
exports.UserApiFp = {
    /**
     * 获取验证码
     */
    captchaGet: function () {
        var fetchArgs = exports.UserApiFetchParamCreactor.captchaGet();
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 清除浏览器cookie，取消免密码登陆
     */
    forgetMePost: function () {
        var fetchArgs = exports.UserApiFetchParamCreactor.forgetMePost();
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 用户登陆
     * @param user 用户名和密码
     */
    loginPost: function (params) {
        var fetchArgs = exports.UserApiFetchParamCreactor.loginPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 用户登出
     */
    logoutPost: function () {
        var fetchArgs = exports.UserApiFetchParamCreactor.logoutPost();
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 查看当前登录用户的个人信息
     */
    profileGet: function () {
        var fetchArgs = exports.UserApiFetchParamCreactor.profileGet();
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param user 创建群组用户
     */
    usersPost: function (params) {
        var fetchArgs = exports.UserApiFetchParamCreactor.usersPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * UserApi - object-oriented interface
 */
var UserApi = (function (_super) {
    __extends(UserApi, _super);
    function UserApi() {
        _super.apply(this, arguments);
    }
    /**
     * 获取验证码
     */
    UserApi.prototype.captchaGet = function () {
        return exports.UserApiFp.captchaGet()(this.fetch, this.basePath);
    };
    /**
     * 清除浏览器cookie，取消免密码登陆
     */
    UserApi.prototype.forgetMePost = function () {
        return exports.UserApiFp.forgetMePost()(this.fetch, this.basePath);
    };
    /**
     * 用户登陆
     * @param user 用户名和密码
     */
    UserApi.prototype.loginPost = function (params) {
        return exports.UserApiFp.loginPost(params)(this.fetch, this.basePath);
    };
    /**
     * 用户登出
     */
    UserApi.prototype.logoutPost = function () {
        return exports.UserApiFp.logoutPost()(this.fetch, this.basePath);
    };
    /**
     * 查看当前登录用户的个人信息
     */
    UserApi.prototype.profileGet = function () {
        return exports.UserApiFp.profileGet()(this.fetch, this.basePath);
    };
    /**
     * @param user 创建群组用户
     */
    UserApi.prototype.usersPost = function (params) {
        return exports.UserApiFp.usersPost(params)(this.fetch, this.basePath);
    };
    return UserApi;
}(BaseAPI));
exports.UserApi = UserApi;
;
/**
 * UserApi - factory interface
 */
exports.UserApiFactory = function (fetch, basePath) {
    return {
        /**
         * 获取验证码
         */
        captchaGet: function () {
            return exports.UserApiFp.captchaGet()(fetch, basePath);
        },
        /**
         * 清除浏览器cookie，取消免密码登陆
         */
        forgetMePost: function () {
            return exports.UserApiFp.forgetMePost()(fetch, basePath);
        },
        /**
         * 用户登陆
         * @param user 用户名和密码
         */
        loginPost: function (params) {
            return exports.UserApiFp.loginPost(params)(fetch, basePath);
        },
        /**
         * 用户登出
         */
        logoutPost: function () {
            return exports.UserApiFp.logoutPost()(fetch, basePath);
        },
        /**
         * 查看当前登录用户的个人信息
         */
        profileGet: function () {
            return exports.UserApiFp.profileGet()(fetch, basePath);
        },
        /**
         * @param user 创建群组用户
         */
        usersPost: function (params) {
            return exports.UserApiFp.usersPost(params)(fetch, basePath);
        },
    };
};
