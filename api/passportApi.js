/**
 * dam passport service 1.0相关接口
 * dam passport service 1.0相关接口
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var url = require("url");
var isomorphicFetch = require("isomorphic-fetch");
var assign = require("core-js/library/fn/object/assign");
var BASE_PATH = "http://localhost:8081/";
var BaseAPI = (function () {
    function BaseAPI(fetch, basePath) {
        if (fetch === void 0) { fetch = isomorphicFetch; }
        if (basePath === void 0) { basePath = BASE_PATH; }
        this.basePath = basePath;
        this.fetch = fetch;
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
/**
 * DefaultApi - fetch parameter creator
 */
exports.DefaultApiFetchParamCreactor = {
    /**
     * 获取某个群组对目录的控制表
     * 返回群组的角色配置，以及对应的若干目录。用来渲染群组的目录权限树。如果没有设置任何角色，返回内容为空
     * @param workgroupId workgroupId
     */
    workgroupFolderRoleGetWorkgroupFoldersRoleGet: function (params) {
        // verify required parameter "workgroupId" is set
        if (params["workgroupId"] == null) {
            throw new Error("Missing required parameter workgroupId when calling workgroupFolderRoleGetWorkgroupFoldersRoleGet");
        }
        var baseUrl = "/workgroupFolderRole/getWorkgroupFoldersRole";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "workgroupId": params.workgroupId,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 为某个群组设置对某些目录的控制角色或取消已有角色
     * 设置某个群组对某些目录的控制角色.  1， 删除旧的设置  2，重新设置当前目录为指定角色和目录。当取消已有角色时，不用传递 roleId参数
     * @param reqModel reqModel
     */
    workgroupFolderRoleSetWorkgroupFoldersRolePost: function (params) {
        // verify required parameter "reqModel" is set
        if (params["reqModel"] == null) {
            throw new Error("Missing required parameter reqModel when calling workgroupFolderRoleSetWorkgroupFoldersRolePost");
        }
        var baseUrl = "/workgroupFolderRole/setWorkgroupFoldersRole";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["reqModel"]) {
            fetchOptions.body = JSON.stringify(params["reqModel"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * DefaultApi - functional programming interface
 */
exports.DefaultApiFp = {
    /**
     * 获取某个群组对目录的控制表
     * 返回群组的角色配置，以及对应的若干目录。用来渲染群组的目录权限树。如果没有设置任何角色，返回内容为空
     * @param workgroupId workgroupId
     */
    workgroupFolderRoleGetWorkgroupFoldersRoleGet: function (params) {
        var fetchArgs = exports.DefaultApiFetchParamCreactor.workgroupFolderRoleGetWorkgroupFoldersRoleGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 为某个群组设置对某些目录的控制角色或取消已有角色
     * 设置某个群组对某些目录的控制角色.  1， 删除旧的设置  2，重新设置当前目录为指定角色和目录。当取消已有角色时，不用传递 roleId参数
     * @param reqModel reqModel
     */
    workgroupFolderRoleSetWorkgroupFoldersRolePost: function (params) {
        var fetchArgs = exports.DefaultApiFetchParamCreactor.workgroupFolderRoleSetWorkgroupFoldersRolePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * DefaultApi - object-oriented interface
 */
var DefaultApi = (function (_super) {
    __extends(DefaultApi, _super);
    function DefaultApi() {
        _super.apply(this, arguments);
    }
    /**
     * 获取某个群组对目录的控制表
     * 返回群组的角色配置，以及对应的若干目录。用来渲染群组的目录权限树。如果没有设置任何角色，返回内容为空
     * @param workgroupId workgroupId
     */
    DefaultApi.prototype.workgroupFolderRoleGetWorkgroupFoldersRoleGet = function (params) {
        return exports.DefaultApiFp.workgroupFolderRoleGetWorkgroupFoldersRoleGet(params)(this.fetch, this.basePath);
    };
    /**
     * 为某个群组设置对某些目录的控制角色或取消已有角色
     * 设置某个群组对某些目录的控制角色.  1， 删除旧的设置  2，重新设置当前目录为指定角色和目录。当取消已有角色时，不用传递 roleId参数
     * @param reqModel reqModel
     */
    DefaultApi.prototype.workgroupFolderRoleSetWorkgroupFoldersRolePost = function (params) {
        return exports.DefaultApiFp.workgroupFolderRoleSetWorkgroupFoldersRolePost(params)(this.fetch, this.basePath);
    };
    return DefaultApi;
}(BaseAPI));
exports.DefaultApi = DefaultApi;
;
/**
 * DefaultApi - factory interface
 */
exports.DefaultApiFactory = function (fetch, basePath) {
    return {
        /**
         * 获取某个群组对目录的控制表
         * 返回群组的角色配置，以及对应的若干目录。用来渲染群组的目录权限树。如果没有设置任何角色，返回内容为空
         * @param workgroupId workgroupId
         */
        workgroupFolderRoleGetWorkgroupFoldersRoleGet: function (params) {
            return exports.DefaultApiFp.workgroupFolderRoleGetWorkgroupFoldersRoleGet(params)(fetch, basePath);
        },
        /**
         * 为某个群组设置对某些目录的控制角色或取消已有角色
         * 设置某个群组对某些目录的控制角色.  1， 删除旧的设置  2，重新设置当前目录为指定角色和目录。当取消已有角色时，不用传递 roleId参数
         * @param reqModel reqModel
         */
        workgroupFolderRoleSetWorkgroupFoldersRolePost: function (params) {
            return exports.DefaultApiFp.workgroupFolderRoleSetWorkgroupFoldersRolePost(params)(fetch, basePath);
        },
    };
};
/**
 * HealthApi - fetch parameter creator
 */
exports.HealthApiFetchParamCreactor = {
    /**
     * health
     */
    healthGet: function () {
        var baseUrl = "/health";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * HealthApi - functional programming interface
 */
exports.HealthApiFp = {
    /**
     * health
     */
    healthGet: function () {
        var fetchArgs = exports.HealthApiFetchParamCreactor.healthGet();
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * HealthApi - object-oriented interface
 */
var HealthApi = (function (_super) {
    __extends(HealthApi, _super);
    function HealthApi() {
        _super.apply(this, arguments);
    }
    /**
     * health
     */
    HealthApi.prototype.healthGet = function () {
        return exports.HealthApiFp.healthGet()(this.fetch, this.basePath);
    };
    return HealthApi;
}(BaseAPI));
exports.HealthApi = HealthApi;
;
/**
 * HealthApi - factory interface
 */
exports.HealthApiFactory = function (fetch, basePath) {
    return {
        /**
         * health
         */
        healthGet: function () {
            return exports.HealthApiFp.healthGet()(fetch, basePath);
        },
    };
};
/**
 * MessagecontrollerApi - fetch parameter creator
 */
exports.MessagecontrollerApiFetchParamCreactor = {
    /**
     * check
     * @param name name
     * @param code code
     */
    messageCheckGet: function (params) {
        // verify required parameter "name" is set
        if (params["name"] == null) {
            throw new Error("Missing required parameter name when calling messageCheckGet");
        }
        // verify required parameter "code" is set
        if (params["code"] == null) {
            throw new Error("Missing required parameter code when calling messageCheckGet");
        }
        var baseUrl = "/message/check";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "name": params.name,
            "code": params.code,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 发送群组邀请码短信
     * 将指定ID的群组邀请码发送到指定的用户手机号上
     * @param userId 用户ID
     * @param workgroupId 群组ID
     */
    messageSendInvitationCodeSmsPost: function (params) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling messageSendInvitationCodeSmsPost");
        }
        // verify required parameter "workgroupId" is set
        if (params["workgroupId"] == null) {
            throw new Error("Missing required parameter workgroupId when calling messageSendInvitationCodeSmsPost");
        }
        var baseUrl = "/message/sendInvitationCodeSms";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "userId": params.userId,
            "workgroupId": params.workgroupId,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * sendMail
     * @param email email
     * @param content content
     * @param subject subject
     */
    messageSendMailGet: function (params) {
        // verify required parameter "email" is set
        if (params["email"] == null) {
            throw new Error("Missing required parameter email when calling messageSendMailGet");
        }
        var baseUrl = "/message/sendMail";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "email": params.email,
            "content": params.content,
            "subject": params.subject,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 发送自定义邮件
     * 发送自定义邮件
     * @param email email
     * @param fromType fromType
     * @param content content
     * @param subject subject
     */
    messageSendNoticeMailPost: function (params) {
        // verify required parameter "email" is set
        if (params["email"] == null) {
            throw new Error("Missing required parameter email when calling messageSendNoticeMailPost");
        }
        // verify required parameter "fromType" is set
        if (params["fromType"] == null) {
            throw new Error("Missing required parameter fromType when calling messageSendNoticeMailPost");
        }
        var baseUrl = "/message/sendNoticeMail";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "email": params.email,
            "content": params.content,
            "subject": params.subject,
            "fromType": params.fromType,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 发送自定义短信
     * 发送自定义短信, 开发过程中如果没有设置card信息，短信发送接口会报错
     * @param mobile mobile
     * @param smsType smsType 1资格审核通过 2资格审核不通过 3合同审核通过 4 稿费发放
     * @param fee 当smsType为4的稿费
     * @param card 当smsType为4的已发送到您后面的信息(尾号是88888888888888888的卡号上/支付宝账号上)
     */
    messageSendNoticeSmsPost: function (params) {
        // verify required parameter "mobile" is set
        if (params["mobile"] == null) {
            throw new Error("Missing required parameter mobile when calling messageSendNoticeSmsPost");
        }
        var baseUrl = "/message/sendNoticeSms";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "mobile": params.mobile,
            "smsType": params.smsType,
            "fee": params.fee,
            "card": params.card,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 为系统中存在的手机号发送短信
     * 系统会先验证手机号是否存在，再决定是否发送
     * @param mobile mobile
     * @param content content
     * @param countryCode countryCode
     */
    messageSendsmsForExistMobileGet: function (params) {
        // verify required parameter "mobile" is set
        if (params["mobile"] == null) {
            throw new Error("Missing required parameter mobile when calling messageSendsmsForExistMobileGet");
        }
        var baseUrl = "/message/sendsmsForExistMobile";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "mobile": params.mobile,
            "content": params.content,
            "countryCode": params.countryCode,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 为任意手机号发送短信
     * 没有检查手机号是否在系统中存在，直接发送
     * @param mobile mobile
     * @param content content
     * @param countryCode countryCode
     */
    messageSendsmsGet: function (params) {
        // verify required parameter "mobile" is set
        if (params["mobile"] == null) {
            throw new Error("Missing required parameter mobile when calling messageSendsmsGet");
        }
        var baseUrl = "/message/sendsms";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "mobile": params.mobile,
            "content": params.content,
            "countryCode": params.countryCode,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * MessagecontrollerApi - functional programming interface
 */
exports.MessagecontrollerApiFp = {
    /**
     * check
     * @param name name
     * @param code code
     */
    messageCheckGet: function (params) {
        var fetchArgs = exports.MessagecontrollerApiFetchParamCreactor.messageCheckGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 发送群组邀请码短信
     * 将指定ID的群组邀请码发送到指定的用户手机号上
     * @param userId 用户ID
     * @param workgroupId 群组ID
     */
    messageSendInvitationCodeSmsPost: function (params) {
        var fetchArgs = exports.MessagecontrollerApiFetchParamCreactor.messageSendInvitationCodeSmsPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * sendMail
     * @param email email
     * @param content content
     * @param subject subject
     */
    messageSendMailGet: function (params) {
        var fetchArgs = exports.MessagecontrollerApiFetchParamCreactor.messageSendMailGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 发送自定义邮件
     * 发送自定义邮件
     * @param email email
     * @param fromType fromType
     * @param content content
     * @param subject subject
     */
    messageSendNoticeMailPost: function (params) {
        var fetchArgs = exports.MessagecontrollerApiFetchParamCreactor.messageSendNoticeMailPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 发送自定义短信
     * 发送自定义短信, 开发过程中如果没有设置card信息，短信发送接口会报错
     * @param mobile mobile
     * @param smsType smsType 1资格审核通过 2资格审核不通过 3合同审核通过 4 稿费发放
     * @param fee 当smsType为4的稿费
     * @param card 当smsType为4的已发送到您后面的信息(尾号是88888888888888888的卡号上/支付宝账号上)
     */
    messageSendNoticeSmsPost: function (params) {
        var fetchArgs = exports.MessagecontrollerApiFetchParamCreactor.messageSendNoticeSmsPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 为系统中存在的手机号发送短信
     * 系统会先验证手机号是否存在，再决定是否发送
     * @param mobile mobile
     * @param content content
     * @param countryCode countryCode
     */
    messageSendsmsForExistMobileGet: function (params) {
        var fetchArgs = exports.MessagecontrollerApiFetchParamCreactor.messageSendsmsForExistMobileGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 为任意手机号发送短信
     * 没有检查手机号是否在系统中存在，直接发送
     * @param mobile mobile
     * @param content content
     * @param countryCode countryCode
     */
    messageSendsmsGet: function (params) {
        var fetchArgs = exports.MessagecontrollerApiFetchParamCreactor.messageSendsmsGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * MessagecontrollerApi - object-oriented interface
 */
var MessagecontrollerApi = (function (_super) {
    __extends(MessagecontrollerApi, _super);
    function MessagecontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     * check
     * @param name name
     * @param code code
     */
    MessagecontrollerApi.prototype.messageCheckGet = function (params) {
        return exports.MessagecontrollerApiFp.messageCheckGet(params)(this.fetch, this.basePath);
    };
    /**
     * 发送群组邀请码短信
     * 将指定ID的群组邀请码发送到指定的用户手机号上
     * @param userId 用户ID
     * @param workgroupId 群组ID
     */
    MessagecontrollerApi.prototype.messageSendInvitationCodeSmsPost = function (params) {
        return exports.MessagecontrollerApiFp.messageSendInvitationCodeSmsPost(params)(this.fetch, this.basePath);
    };
    /**
     * sendMail
     * @param email email
     * @param content content
     * @param subject subject
     */
    MessagecontrollerApi.prototype.messageSendMailGet = function (params) {
        return exports.MessagecontrollerApiFp.messageSendMailGet(params)(this.fetch, this.basePath);
    };
    /**
     * 发送自定义邮件
     * 发送自定义邮件
     * @param email email
     * @param fromType fromType
     * @param content content
     * @param subject subject
     */
    MessagecontrollerApi.prototype.messageSendNoticeMailPost = function (params) {
        return exports.MessagecontrollerApiFp.messageSendNoticeMailPost(params)(this.fetch, this.basePath);
    };
    /**
     * 发送自定义短信
     * 发送自定义短信, 开发过程中如果没有设置card信息，短信发送接口会报错
     * @param mobile mobile
     * @param smsType smsType 1资格审核通过 2资格审核不通过 3合同审核通过 4 稿费发放
     * @param fee 当smsType为4的稿费
     * @param card 当smsType为4的已发送到您后面的信息(尾号是88888888888888888的卡号上/支付宝账号上)
     */
    MessagecontrollerApi.prototype.messageSendNoticeSmsPost = function (params) {
        return exports.MessagecontrollerApiFp.messageSendNoticeSmsPost(params)(this.fetch, this.basePath);
    };
    /**
     * 为系统中存在的手机号发送短信
     * 系统会先验证手机号是否存在，再决定是否发送
     * @param mobile mobile
     * @param content content
     * @param countryCode countryCode
     */
    MessagecontrollerApi.prototype.messageSendsmsForExistMobileGet = function (params) {
        return exports.MessagecontrollerApiFp.messageSendsmsForExistMobileGet(params)(this.fetch, this.basePath);
    };
    /**
     * 为任意手机号发送短信
     * 没有检查手机号是否在系统中存在，直接发送
     * @param mobile mobile
     * @param content content
     * @param countryCode countryCode
     */
    MessagecontrollerApi.prototype.messageSendsmsGet = function (params) {
        return exports.MessagecontrollerApiFp.messageSendsmsGet(params)(this.fetch, this.basePath);
    };
    return MessagecontrollerApi;
}(BaseAPI));
exports.MessagecontrollerApi = MessagecontrollerApi;
;
/**
 * MessagecontrollerApi - factory interface
 */
exports.MessagecontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         * check
         * @param name name
         * @param code code
         */
        messageCheckGet: function (params) {
            return exports.MessagecontrollerApiFp.messageCheckGet(params)(fetch, basePath);
        },
        /**
         * 发送群组邀请码短信
         * 将指定ID的群组邀请码发送到指定的用户手机号上
         * @param userId 用户ID
         * @param workgroupId 群组ID
         */
        messageSendInvitationCodeSmsPost: function (params) {
            return exports.MessagecontrollerApiFp.messageSendInvitationCodeSmsPost(params)(fetch, basePath);
        },
        /**
         * sendMail
         * @param email email
         * @param content content
         * @param subject subject
         */
        messageSendMailGet: function (params) {
            return exports.MessagecontrollerApiFp.messageSendMailGet(params)(fetch, basePath);
        },
        /**
         * 发送自定义邮件
         * 发送自定义邮件
         * @param email email
         * @param fromType fromType
         * @param content content
         * @param subject subject
         */
        messageSendNoticeMailPost: function (params) {
            return exports.MessagecontrollerApiFp.messageSendNoticeMailPost(params)(fetch, basePath);
        },
        /**
         * 发送自定义短信
         * 发送自定义短信, 开发过程中如果没有设置card信息，短信发送接口会报错
         * @param mobile mobile
         * @param smsType smsType 1资格审核通过 2资格审核不通过 3合同审核通过 4 稿费发放
         * @param fee 当smsType为4的稿费
         * @param card 当smsType为4的已发送到您后面的信息(尾号是88888888888888888的卡号上/支付宝账号上)
         */
        messageSendNoticeSmsPost: function (params) {
            return exports.MessagecontrollerApiFp.messageSendNoticeSmsPost(params)(fetch, basePath);
        },
        /**
         * 为系统中存在的手机号发送短信
         * 系统会先验证手机号是否存在，再决定是否发送
         * @param mobile mobile
         * @param content content
         * @param countryCode countryCode
         */
        messageSendsmsForExistMobileGet: function (params) {
            return exports.MessagecontrollerApiFp.messageSendsmsForExistMobileGet(params)(fetch, basePath);
        },
        /**
         * 为任意手机号发送短信
         * 没有检查手机号是否在系统中存在，直接发送
         * @param mobile mobile
         * @param content content
         * @param countryCode countryCode
         */
        messageSendsmsGet: function (params) {
            return exports.MessagecontrollerApiFp.messageSendsmsGet(params)(fetch, basePath);
        },
    };
};
/**
 * PermissioncontrollerApi - fetch parameter creator
 */
exports.PermissioncontrollerApiFetchParamCreactor = {
    /**
     * 获取权限项列表
     * 获取所有权限，也可以通过条件获取权限项列表，目前只支持type条件， type类型只有两种&#39;SYSTEM_FUNCTION&#39;, &#39;FOLDER_FUNCTION&#39;
     * @param type type
     */
    permissionListGet: function (params) {
        var baseUrl = "/permission/list";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "type": params.type,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * pageList
     * @param permission permission
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    permissionPageListGet: function (params) {
        var baseUrl = "/permission/pageList";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["permission"]) {
            fetchOptions.body = JSON.stringify(params["permission"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * PermissioncontrollerApi - functional programming interface
 */
exports.PermissioncontrollerApiFp = {
    /**
     * 获取权限项列表
     * 获取所有权限，也可以通过条件获取权限项列表，目前只支持type条件， type类型只有两种&#39;SYSTEM_FUNCTION&#39;, &#39;FOLDER_FUNCTION&#39;
     * @param type type
     */
    permissionListGet: function (params) {
        var fetchArgs = exports.PermissioncontrollerApiFetchParamCreactor.permissionListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * pageList
     * @param permission permission
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    permissionPageListGet: function (params) {
        var fetchArgs = exports.PermissioncontrollerApiFetchParamCreactor.permissionPageListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * PermissioncontrollerApi - object-oriented interface
 */
var PermissioncontrollerApi = (function (_super) {
    __extends(PermissioncontrollerApi, _super);
    function PermissioncontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     * 获取权限项列表
     * 获取所有权限，也可以通过条件获取权限项列表，目前只支持type条件， type类型只有两种&#39;SYSTEM_FUNCTION&#39;, &#39;FOLDER_FUNCTION&#39;
     * @param type type
     */
    PermissioncontrollerApi.prototype.permissionListGet = function (params) {
        return exports.PermissioncontrollerApiFp.permissionListGet(params)(this.fetch, this.basePath);
    };
    /**
     * pageList
     * @param permission permission
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    PermissioncontrollerApi.prototype.permissionPageListGet = function (params) {
        return exports.PermissioncontrollerApiFp.permissionPageListGet(params)(this.fetch, this.basePath);
    };
    return PermissioncontrollerApi;
}(BaseAPI));
exports.PermissioncontrollerApi = PermissioncontrollerApi;
;
/**
 * PermissioncontrollerApi - factory interface
 */
exports.PermissioncontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         * 获取权限项列表
         * 获取所有权限，也可以通过条件获取权限项列表，目前只支持type条件， type类型只有两种&#39;SYSTEM_FUNCTION&#39;, &#39;FOLDER_FUNCTION&#39;
         * @param type type
         */
        permissionListGet: function (params) {
            return exports.PermissioncontrollerApiFp.permissionListGet(params)(fetch, basePath);
        },
        /**
         * pageList
         * @param permission permission
         * @param pageNum pageNum
         * @param pageSize pageSize
         */
        permissionPageListGet: function (params) {
            return exports.PermissioncontrollerApiFp.permissionPageListGet(params)(fetch, basePath);
        },
    };
};
/**
 * ResevtcontrollerApi - fetch parameter creator
 */
exports.ResevtcontrollerApiFetchParamCreactor = {
    /**
     * handleFolderAddEvt
     * @param resFolder resFolder
     */
    resevtFolderaddPost: function (params) {
        // verify required parameter "resFolder" is set
        if (params["resFolder"] == null) {
            throw new Error("Missing required parameter resFolder when calling resevtFolderaddPost");
        }
        var baseUrl = "/resevt/folderadd";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resFolder"]) {
            fetchOptions.body = JSON.stringify(params["resFolder"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * handleFolderDeleteEvt
     * @param resFolder resFolder
     */
    resevtFolderdeletePost: function (params) {
        // verify required parameter "resFolder" is set
        if (params["resFolder"] == null) {
            throw new Error("Missing required parameter resFolder when calling resevtFolderdeletePost");
        }
        var baseUrl = "/resevt/folderdelete";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resFolder"]) {
            fetchOptions.body = JSON.stringify(params["resFolder"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * ResevtcontrollerApi - functional programming interface
 */
exports.ResevtcontrollerApiFp = {
    /**
     * handleFolderAddEvt
     * @param resFolder resFolder
     */
    resevtFolderaddPost: function (params) {
        var fetchArgs = exports.ResevtcontrollerApiFetchParamCreactor.resevtFolderaddPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * handleFolderDeleteEvt
     * @param resFolder resFolder
     */
    resevtFolderdeletePost: function (params) {
        var fetchArgs = exports.ResevtcontrollerApiFetchParamCreactor.resevtFolderdeletePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * ResevtcontrollerApi - object-oriented interface
 */
var ResevtcontrollerApi = (function (_super) {
    __extends(ResevtcontrollerApi, _super);
    function ResevtcontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     * handleFolderAddEvt
     * @param resFolder resFolder
     */
    ResevtcontrollerApi.prototype.resevtFolderaddPost = function (params) {
        return exports.ResevtcontrollerApiFp.resevtFolderaddPost(params)(this.fetch, this.basePath);
    };
    /**
     * handleFolderDeleteEvt
     * @param resFolder resFolder
     */
    ResevtcontrollerApi.prototype.resevtFolderdeletePost = function (params) {
        return exports.ResevtcontrollerApiFp.resevtFolderdeletePost(params)(this.fetch, this.basePath);
    };
    return ResevtcontrollerApi;
}(BaseAPI));
exports.ResevtcontrollerApi = ResevtcontrollerApi;
;
/**
 * ResevtcontrollerApi - factory interface
 */
exports.ResevtcontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         * handleFolderAddEvt
         * @param resFolder resFolder
         */
        resevtFolderaddPost: function (params) {
            return exports.ResevtcontrollerApiFp.resevtFolderaddPost(params)(fetch, basePath);
        },
        /**
         * handleFolderDeleteEvt
         * @param resFolder resFolder
         */
        resevtFolderdeletePost: function (params) {
            return exports.ResevtcontrollerApiFp.resevtFolderdeletePost(params)(fetch, basePath);
        },
    };
};
/**
 * RolecontrollerApi - fetch parameter creator
 */
exports.RolecontrollerApiFetchParamCreactor = {
    /**
     * list
     */
    roleListGet: function () {
        var baseUrl = "/role/list";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * pageList
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    rolePageListGet: function (params) {
        var baseUrl = "/role/pageList";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * RolecontrollerApi - functional programming interface
 */
exports.RolecontrollerApiFp = {
    /**
     * list
     */
    roleListGet: function () {
        var fetchArgs = exports.RolecontrollerApiFetchParamCreactor.roleListGet();
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * pageList
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    rolePageListGet: function (params) {
        var fetchArgs = exports.RolecontrollerApiFetchParamCreactor.rolePageListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * RolecontrollerApi - object-oriented interface
 */
var RolecontrollerApi = (function (_super) {
    __extends(RolecontrollerApi, _super);
    function RolecontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     * list
     */
    RolecontrollerApi.prototype.roleListGet = function () {
        return exports.RolecontrollerApiFp.roleListGet()(this.fetch, this.basePath);
    };
    /**
     * pageList
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    RolecontrollerApi.prototype.rolePageListGet = function (params) {
        return exports.RolecontrollerApiFp.rolePageListGet(params)(this.fetch, this.basePath);
    };
    return RolecontrollerApi;
}(BaseAPI));
exports.RolecontrollerApi = RolecontrollerApi;
;
/**
 * RolecontrollerApi - factory interface
 */
exports.RolecontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         * list
         */
        roleListGet: function () {
            return exports.RolecontrollerApiFp.roleListGet()(fetch, basePath);
        },
        /**
         * pageList
         * @param pageNum pageNum
         * @param pageSize pageSize
         */
        rolePageListGet: function (params) {
            return exports.RolecontrollerApiFp.rolePageListGet(params)(fetch, basePath);
        },
    };
};
/**
 * RolepermissioncontrollerApi - fetch parameter creator
 */
exports.RolepermissioncontrollerApiFetchParamCreactor = {
    /**
     * list
     * @param rolePermission rolePermission
     */
    rolePermissionListGet: function (params) {
        var baseUrl = "/rolePermission/list";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["rolePermission"]) {
            fetchOptions.body = JSON.stringify(params["rolePermission"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * pageList
     * @param rolePermission rolePermission
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    rolePermissionPageListGet: function (params) {
        var baseUrl = "/rolePermission/pageList";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["rolePermission"]) {
            fetchOptions.body = JSON.stringify(params["rolePermission"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * RolepermissioncontrollerApi - functional programming interface
 */
exports.RolepermissioncontrollerApiFp = {
    /**
     * list
     * @param rolePermission rolePermission
     */
    rolePermissionListGet: function (params) {
        var fetchArgs = exports.RolepermissioncontrollerApiFetchParamCreactor.rolePermissionListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * pageList
     * @param rolePermission rolePermission
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    rolePermissionPageListGet: function (params) {
        var fetchArgs = exports.RolepermissioncontrollerApiFetchParamCreactor.rolePermissionPageListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * RolepermissioncontrollerApi - object-oriented interface
 */
var RolepermissioncontrollerApi = (function (_super) {
    __extends(RolepermissioncontrollerApi, _super);
    function RolepermissioncontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     * list
     * @param rolePermission rolePermission
     */
    RolepermissioncontrollerApi.prototype.rolePermissionListGet = function (params) {
        return exports.RolepermissioncontrollerApiFp.rolePermissionListGet(params)(this.fetch, this.basePath);
    };
    /**
     * pageList
     * @param rolePermission rolePermission
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    RolepermissioncontrollerApi.prototype.rolePermissionPageListGet = function (params) {
        return exports.RolepermissioncontrollerApiFp.rolePermissionPageListGet(params)(this.fetch, this.basePath);
    };
    return RolepermissioncontrollerApi;
}(BaseAPI));
exports.RolepermissioncontrollerApi = RolepermissioncontrollerApi;
;
/**
 * RolepermissioncontrollerApi - factory interface
 */
exports.RolepermissioncontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         * list
         * @param rolePermission rolePermission
         */
        rolePermissionListGet: function (params) {
            return exports.RolepermissioncontrollerApiFp.rolePermissionListGet(params)(fetch, basePath);
        },
        /**
         * pageList
         * @param rolePermission rolePermission
         * @param pageNum pageNum
         * @param pageSize pageSize
         */
        rolePermissionPageListGet: function (params) {
            return exports.RolepermissioncontrollerApiFp.rolePermissionPageListGet(params)(fetch, basePath);
        },
    };
};
/**
 * UsercontrollerApi - fetch parameter creator
 */
exports.UsercontrollerApiFetchParamCreactor = {
    /**
     * 校验用户是否有某种权限
     * 校验用户是否有某种权限
     * @param userId 用户id
     * @param code 目标权限项目
     */
    userAuthGet: function (params) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userAuthGet");
        }
        // verify required parameter "code" is set
        if (params["code"] == null) {
            throw new Error("Missing required parameter code when calling userAuthGet");
        }
        var baseUrl = "/user/auth";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "userId": params.userId,
            "code": params.code,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 内部创建用户
     * 系统管理员在群组或用户列表中新建用户，用户名，真实姓名，手机号不能为空，表单隐式把所属群组号也传递进来
     * @param user user
     */
    userCreatePost: function (params) {
        // verify required parameter "user" is set
        if (params["user"] == null) {
            throw new Error("Missing required parameter user when calling userCreatePost");
        }
        var baseUrl = "/user/create";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["user"]) {
            fetchOptions.body = JSON.stringify(params["user"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 未登录用户重置密码接口，供找回密码功能使用
     * 未登录用户重置密码接口，需要手机号，手机验证码，新密码
     * @param user 根据手机号修改密码
     */
    userFindPwdPost: function (params) {
        // verify required parameter "user" is set
        if (params["user"] == null) {
            throw new Error("Missing required parameter user when calling userFindPwdPost");
        }
        var baseUrl = "/user/findPwd";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["user"]) {
            fetchOptions.body = JSON.stringify(params["user"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 校验用户对某个目录是否有某种权限
     * 校验用户对某个目录是否有某种权限
     * @param userId userId
     * @param folderId folderId
     * @param code code
     */
    userFolderauthGet: function (params) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userFolderauthGet");
        }
        // verify required parameter "folderId" is set
        if (params["folderId"] == null) {
            throw new Error("Missing required parameter folderId when calling userFolderauthGet");
        }
        // verify required parameter "code" is set
        if (params["code"] == null) {
            throw new Error("Missing required parameter code when calling userFolderauthGet");
        }
        var baseUrl = "/user/folderauth";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "userId": params.userId,
            "folderId": params.folderId,
            "code": params.code,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 根据TGT获取登录用户信息
     * 根据TGT获取登录用户信息
     * @param TGT 客户端存储的TGT
     */
    userGetUserByTGTGet: function (params) {
        var baseUrl = "/user/getUserByTGT";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "TGT": params.TGT,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 【接口废弃】获取用户的管理的目录列表
     * 罗列当前用户有权限的目录列表
     * @param userId userId
     */
    userGetUserManageFoldersGet: function (params) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userGetUserManageFoldersGet");
        }
        var baseUrl = "/user/getUserManageFolders";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "userId": params.userId,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 删除用户
     * 删除用户
     * @param id 用户ID
     */
    userIdDelete: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling userIdDelete");
        }
        var baseUrl = "/user/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "DELETE" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 查询用户信息
     * 根据用户ID获取用户信息
     * @param id 用户ID
     */
    userIdGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling userIdGet");
        }
        var baseUrl = `/user/view?id=${params["id"]}`;
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 用户加入群组
     * 将多个用户批量加入到某个群组中
     * @param userIds 用户id列表
     * @param workgroupId  群组ID
     */
    userJoinWorkgroupPost: function (params) {
        // verify required parameter "userIds" is set
        if (params["userIds"] == null) {
            throw new Error("Missing required parameter userIds when calling userJoinWorkgroupPost");
        }
        // verify required parameter "workgroupId" is set
        if (params["workgroupId"] == null) {
            throw new Error("Missing required parameter workgroupId when calling userJoinWorkgroupPost");
        }
        var baseUrl = "/user/join_workgroup";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "user_ids": params.userIds,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["workgroupId"]) {
            fetchOptions.body = JSON.stringify(params["workgroupId"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 登录接口
     * 用户登录接口，登录成功返回TGT信息
     * @param user 可以是用户名或手机号或邮箱，密码
     */
    userLoginPost: function (params) {
        // verify required parameter "user" is set
        if (params["user"] == null) {
            throw new Error("Missing required parameter user when calling userLoginPost");
        }
        var baseUrl = "/user/login";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["user"]) {
            fetchOptions.body = JSON.stringify(params["user"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 登出接口
     * 用户登出接口
     * @param TGT 客户端存储的TGT
     */
    userLogoutGet: function (params) {
        var baseUrl = "/user/logout";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "TGT": params.TGT,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 用户列表分页查询
     * 包括所有用户
     * @param pageNum 查询第N页用户列表
     * @param pageSize 每页显示用户数
     */
    userPageListGet: function (params) {
        var baseUrl = "/user/pageList";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 用户注册
     * 手机号，密码，邀请码不能为空，会默认把手机号填充到用户名
     * @param user user
     */
    userRegisterPost: function (params) {
        // verify required parameter "user" is set
        if (params["user"] == null) {
            throw new Error("Missing required parameter user when calling userRegisterPost");
        }
        var baseUrl = "/user/register";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["user"]) {
            fetchOptions.body = JSON.stringify(params["user"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 已登录用户修改接口
     * 重置密码接口，无需任何验证
     * @param user 根据用户名或手机号或邮箱,修改密码
     */
    userResetPwdPost: function (params) {
        // verify required parameter "user" is set
        if (params["user"] == null) {
            throw new Error("Missing required parameter user when calling userResetPwdPost");
        }
        var baseUrl = "/user/resetPwd";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["user"]) {
            fetchOptions.body = JSON.stringify(params["user"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 搜索用户
     * 仅提供根据关键字userName匹配用户user_name， mobile， email，根据workgroupId查询某群组内的用户
     * @param user 仅提供userName, workgroupId参数即可，两者都是可选的
     * @param pageNum 查询第N页用户列表
     * @param pageSize 每页显示用户数
     */
    userSearchPost: function (params) {
        var baseUrl = "/user/search";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["user"]) {
            fetchOptions.body = JSON.stringify(params["user"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 分页查询用户简单信息
     * 用户简单信息包括：user_id,nick_name,real_name,user_name,mobile,email,address,company,gender,reg_time,status,weixin,qq
     * @param pageNum 查询第N页用户列表
     * @param pageSize 每页显示用户数
     * @param userIds userIds
     */
    userSimpleInfoPageListGet: function (params) {
        var baseUrl = "/user/simpleInfoPageList";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
            "userIds": params.userIds,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 未分组用户列表查询
     * 所有未被分配进任何组的用户
     * @param pageNum 查询第N页用户列表
     * @param pageSize 每页显示用户数
     */
    userUngroupedUsersPageListGet: function (params) {
        var baseUrl = "/user/ungroupedUsersPageList";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 更新用户信息
     * 更新用户信息，数据中要有userId
     * @param user user
     */
    userUpdatePut: function (params) {
        // verify required parameter "user" is set
        if (params["user"] == null) {
            throw new Error("Missing required parameter user when calling userUpdatePut");
        }
        var baseUrl = "/user/update";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "PUT" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["user"]) {
            fetchOptions.body = JSON.stringify(params["user"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 获取指定用户指定目录的 目录访问权限列表
     * 目前一个用户属于一个群组，但一个群组可以有多个用户角色，任何一个角色含有编审权限，则获取全部目录；否则根据群组目录权限获取目录
     * @param userId 用户id
     * @param folderId 目录 id，不传时获取所有目录
     */
    userUserFolderPermissionListGet: function (params) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userUserFolderPermissionListGet");
        }
        var baseUrl = "/user/userFolderPermissionList";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "userId": params.userId,
            "folderId": params.folderId,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 仅仅获取系统权限列表,不包括目录权限
     * 目前一个用户属于一个群组，但一个群组可以有多个角色，仅仅获取系统权限列表,不包括目录权限
     * @param userId 用户id
     */
    userUserPermissionListGet: function (params) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userUserPermissionListGet");
        }
        var baseUrl = "/user/userPermissionList";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "userId": params.userId,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * UsercontrollerApi - functional programming interface
 */
exports.UsercontrollerApiFp = {
    /**
     * 校验用户是否有某种权限
     * 校验用户是否有某种权限
     * @param userId 用户id
     * @param code 目标权限项目
     */
    userAuthGet: function (params) {
        var fetchArgs = exports.UsercontrollerApiFetchParamCreactor.userAuthGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 内部创建用户
     * 系统管理员在群组或用户列表中新建用户，用户名，真实姓名，手机号不能为空，表单隐式把所属群组号也传递进来
     * @param user user
     */
    userCreatePost: function (params) {
        var fetchArgs = exports.UsercontrollerApiFetchParamCreactor.userCreatePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 未登录用户重置密码接口，供找回密码功能使用
     * 未登录用户重置密码接口，需要手机号，手机验证码，新密码
     * @param user 根据手机号修改密码
     */
    userFindPwdPost: function (params) {
        var fetchArgs = exports.UsercontrollerApiFetchParamCreactor.userFindPwdPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 校验用户对某个目录是否有某种权限
     * 校验用户对某个目录是否有某种权限
     * @param userId userId
     * @param folderId folderId
     * @param code code
     */
    userFolderauthGet: function (params) {
        var fetchArgs = exports.UsercontrollerApiFetchParamCreactor.userFolderauthGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 根据TGT获取登录用户信息
     * 根据TGT获取登录用户信息
     * @param TGT 客户端存储的TGT
     */
    userGetUserByTGTGet: function (params) {
        var fetchArgs = exports.UsercontrollerApiFetchParamCreactor.userGetUserByTGTGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 【接口废弃】获取用户的管理的目录列表
     * 罗列当前用户有权限的目录列表
     * @param userId userId
     */
    userGetUserManageFoldersGet: function (params) {
        var fetchArgs = exports.UsercontrollerApiFetchParamCreactor.userGetUserManageFoldersGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 删除用户
     * 删除用户
     * @param id 用户ID
     */
    userIdDelete: function (params) {
        var fetchArgs = exports.UsercontrollerApiFetchParamCreactor.userIdDelete(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 查询用户信息
     * 根据用户ID获取用户信息
     * @param id 用户ID
     */
    userIdGet: function (params) {
        var fetchArgs = exports.UsercontrollerApiFetchParamCreactor.userIdGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 用户加入群组
     * 将多个用户批量加入到某个群组中
     * @param userIds 用户id列表
     * @param workgroupId  群组ID
     */
    userJoinWorkgroupPost: function (params) {
        var fetchArgs = exports.UsercontrollerApiFetchParamCreactor.userJoinWorkgroupPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 登录接口
     * 用户登录接口，登录成功返回TGT信息
     * @param user 可以是用户名或手机号或邮箱，密码
     */
    userLoginPost: function (params) {
        var fetchArgs = exports.UsercontrollerApiFetchParamCreactor.userLoginPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 登出接口
     * 用户登出接口
     * @param TGT 客户端存储的TGT
     */
    userLogoutGet: function (params) {
        var fetchArgs = exports.UsercontrollerApiFetchParamCreactor.userLogoutGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 用户列表分页查询
     * 包括所有用户
     * @param pageNum 查询第N页用户列表
     * @param pageSize 每页显示用户数
     */
    userPageListGet: function (params) {
        var fetchArgs = exports.UsercontrollerApiFetchParamCreactor.userPageListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 用户注册
     * 手机号，密码，邀请码不能为空，会默认把手机号填充到用户名
     * @param user user
     */
    userRegisterPost: function (params) {
        var fetchArgs = exports.UsercontrollerApiFetchParamCreactor.userRegisterPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 已登录用户修改接口
     * 重置密码接口，无需任何验证
     * @param user 根据用户名或手机号或邮箱,修改密码
     */
    userResetPwdPost: function (params) {
        var fetchArgs = exports.UsercontrollerApiFetchParamCreactor.userResetPwdPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 搜索用户
     * 仅提供根据关键字userName匹配用户user_name， mobile， email，根据workgroupId查询某群组内的用户
     * @param user 仅提供userName, workgroupId参数即可，两者都是可选的
     * @param pageNum 查询第N页用户列表
     * @param pageSize 每页显示用户数
     */
    userSearchPost: function (params) {
        var fetchArgs = exports.UsercontrollerApiFetchParamCreactor.userSearchPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 分页查询用户简单信息
     * 用户简单信息包括：user_id,nick_name,real_name,user_name,mobile,email,address,company,gender,reg_time,status,weixin,qq
     * @param pageNum 查询第N页用户列表
     * @param pageSize 每页显示用户数
     * @param userIds userIds
     */
    userSimpleInfoPageListGet: function (params) {
        var fetchArgs = exports.UsercontrollerApiFetchParamCreactor.userSimpleInfoPageListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 未分组用户列表查询
     * 所有未被分配进任何组的用户
     * @param pageNum 查询第N页用户列表
     * @param pageSize 每页显示用户数
     */
    userUngroupedUsersPageListGet: function (params) {
        var fetchArgs = exports.UsercontrollerApiFetchParamCreactor.userUngroupedUsersPageListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 更新用户信息
     * 更新用户信息，数据中要有userId
     * @param user user
     */
    userUpdatePut: function (params) {
        var fetchArgs = exports.UsercontrollerApiFetchParamCreactor.userUpdatePut(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 获取指定用户指定目录的 目录访问权限列表
     * 目前一个用户属于一个群组，但一个群组可以有多个用户角色，任何一个角色含有编审权限，则获取全部目录；否则根据群组目录权限获取目录
     * @param userId 用户id
     * @param folderId 目录 id，不传时获取所有目录
     */
    userUserFolderPermissionListGet: function (params) {
        var fetchArgs = exports.UsercontrollerApiFetchParamCreactor.userUserFolderPermissionListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 仅仅获取系统权限列表,不包括目录权限
     * 目前一个用户属于一个群组，但一个群组可以有多个角色，仅仅获取系统权限列表,不包括目录权限
     * @param userId 用户id
     */
    userUserPermissionListGet: function (params) {
        var fetchArgs = exports.UsercontrollerApiFetchParamCreactor.userUserPermissionListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * UsercontrollerApi - object-oriented interface
 */
var UsercontrollerApi = (function (_super) {
    __extends(UsercontrollerApi, _super);
    function UsercontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     * 校验用户是否有某种权限
     * 校验用户是否有某种权限
     * @param userId 用户id
     * @param code 目标权限项目
     */
    UsercontrollerApi.prototype.userAuthGet = function (params) {
        return exports.UsercontrollerApiFp.userAuthGet(params)(this.fetch, this.basePath);
    };
    /**
     * 内部创建用户
     * 系统管理员在群组或用户列表中新建用户，用户名，真实姓名，手机号不能为空，表单隐式把所属群组号也传递进来
     * @param user user
     */
    UsercontrollerApi.prototype.userCreatePost = function (params) {
        return exports.UsercontrollerApiFp.userCreatePost(params)(this.fetch, this.basePath);
    };
    /**
     * 未登录用户重置密码接口，供找回密码功能使用
     * 未登录用户重置密码接口，需要手机号，手机验证码，新密码
     * @param user 根据手机号修改密码
     */
    UsercontrollerApi.prototype.userFindPwdPost = function (params) {
        return exports.UsercontrollerApiFp.userFindPwdPost(params)(this.fetch, this.basePath);
    };
    /**
     * 校验用户对某个目录是否有某种权限
     * 校验用户对某个目录是否有某种权限
     * @param userId userId
     * @param folderId folderId
     * @param code code
     */
    UsercontrollerApi.prototype.userFolderauthGet = function (params) {
        return exports.UsercontrollerApiFp.userFolderauthGet(params)(this.fetch, this.basePath);
    };
    /**
     * 根据TGT获取登录用户信息
     * 根据TGT获取登录用户信息
     * @param TGT 客户端存储的TGT
     */
    UsercontrollerApi.prototype.userGetUserByTGTGet = function (params) {
        return exports.UsercontrollerApiFp.userGetUserByTGTGet(params)(this.fetch, this.basePath);
    };
    /**
     * 【接口废弃】获取用户的管理的目录列表
     * 罗列当前用户有权限的目录列表
     * @param userId userId
     */
    UsercontrollerApi.prototype.userGetUserManageFoldersGet = function (params) {
        return exports.UsercontrollerApiFp.userGetUserManageFoldersGet(params)(this.fetch, this.basePath);
    };
    /**
     * 删除用户
     * 删除用户
     * @param id 用户ID
     */
    UsercontrollerApi.prototype.userIdDelete = function (params) {
        return exports.UsercontrollerApiFp.userIdDelete(params)(this.fetch, this.basePath);
    };
    /**
     * 查询用户信息
     * 根据用户ID获取用户信息
     * @param id 用户ID
     */
    UsercontrollerApi.prototype.userIdGet = function (params) {
        return exports.UsercontrollerApiFp.userIdGet(params)(this.fetch, this.basePath);
    };
    /**
     * 用户加入群组
     * 将多个用户批量加入到某个群组中
     * @param userIds 用户id列表
     * @param workgroupId  群组ID
     */
    UsercontrollerApi.prototype.userJoinWorkgroupPost = function (params) {
        return exports.UsercontrollerApiFp.userJoinWorkgroupPost(params)(this.fetch, this.basePath);
    };
    /**
     * 登录接口
     * 用户登录接口，登录成功返回TGT信息
     * @param user 可以是用户名或手机号或邮箱，密码
     */
    UsercontrollerApi.prototype.userLoginPost = function (params) {
        return exports.UsercontrollerApiFp.userLoginPost(params)(this.fetch, this.basePath);
    };
    /**
     * 登出接口
     * 用户登出接口
     * @param TGT 客户端存储的TGT
     */
    UsercontrollerApi.prototype.userLogoutGet = function (params) {
        return exports.UsercontrollerApiFp.userLogoutGet(params)(this.fetch, this.basePath);
    };
    /**
     * 用户列表分页查询
     * 包括所有用户
     * @param pageNum 查询第N页用户列表
     * @param pageSize 每页显示用户数
     */
    UsercontrollerApi.prototype.userPageListGet = function (params) {
        return exports.UsercontrollerApiFp.userPageListGet(params)(this.fetch, this.basePath);
    };
    /**
     * 用户注册
     * 手机号，密码，邀请码不能为空，会默认把手机号填充到用户名
     * @param user user
     */
    UsercontrollerApi.prototype.userRegisterPost = function (params) {
        return exports.UsercontrollerApiFp.userRegisterPost(params)(this.fetch, this.basePath);
    };
    /**
     * 已登录用户修改接口
     * 重置密码接口，无需任何验证
     * @param user 根据用户名或手机号或邮箱,修改密码
     */
    UsercontrollerApi.prototype.userResetPwdPost = function (params) {
        return exports.UsercontrollerApiFp.userResetPwdPost(params)(this.fetch, this.basePath);
    };
    /**
     * 搜索用户
     * 仅提供根据关键字userName匹配用户user_name， mobile， email，根据workgroupId查询某群组内的用户
     * @param user 仅提供userName, workgroupId参数即可，两者都是可选的
     * @param pageNum 查询第N页用户列表
     * @param pageSize 每页显示用户数
     */
    UsercontrollerApi.prototype.userSearchPost = function (params) {
        return exports.UsercontrollerApiFp.userSearchPost(params)(this.fetch, this.basePath);
    };
    /**
     * 分页查询用户简单信息
     * 用户简单信息包括：user_id,nick_name,real_name,user_name,mobile,email,address,company,gender,reg_time,status,weixin,qq
     * @param pageNum 查询第N页用户列表
     * @param pageSize 每页显示用户数
     * @param userIds userIds
     */
    UsercontrollerApi.prototype.userSimpleInfoPageListGet = function (params) {
        return exports.UsercontrollerApiFp.userSimpleInfoPageListGet(params)(this.fetch, this.basePath);
    };
    /**
     * 未分组用户列表查询
     * 所有未被分配进任何组的用户
     * @param pageNum 查询第N页用户列表
     * @param pageSize 每页显示用户数
     */
    UsercontrollerApi.prototype.userUngroupedUsersPageListGet = function (params) {
        return exports.UsercontrollerApiFp.userUngroupedUsersPageListGet(params)(this.fetch, this.basePath);
    };
    /**
     * 更新用户信息
     * 更新用户信息，数据中要有userId
     * @param user user
     */
    UsercontrollerApi.prototype.userUpdatePut = function (params) {
        return exports.UsercontrollerApiFp.userUpdatePut(params)(this.fetch, this.basePath);
    };
    /**
     * 获取指定用户指定目录的 目录访问权限列表
     * 目前一个用户属于一个群组，但一个群组可以有多个用户角色，任何一个角色含有编审权限，则获取全部目录；否则根据群组目录权限获取目录
     * @param userId 用户id
     * @param folderId 目录 id，不传时获取所有目录
     */
    UsercontrollerApi.prototype.userUserFolderPermissionListGet = function (params) {
        return exports.UsercontrollerApiFp.userUserFolderPermissionListGet(params)(this.fetch, this.basePath);
    };
    /**
     * 仅仅获取系统权限列表,不包括目录权限
     * 目前一个用户属于一个群组，但一个群组可以有多个角色，仅仅获取系统权限列表,不包括目录权限
     * @param userId 用户id
     */
    UsercontrollerApi.prototype.userUserPermissionListGet = function (params) {
        return exports.UsercontrollerApiFp.userUserPermissionListGet(params)(this.fetch, this.basePath);
    };
    return UsercontrollerApi;
}(BaseAPI));
exports.UsercontrollerApi = UsercontrollerApi;
;
/**
 * UsercontrollerApi - factory interface
 */
exports.UsercontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         * 校验用户是否有某种权限
         * 校验用户是否有某种权限
         * @param userId 用户id
         * @param code 目标权限项目
         */
        userAuthGet: function (params) {
            return exports.UsercontrollerApiFp.userAuthGet(params)(fetch, basePath);
        },
        /**
         * 内部创建用户
         * 系统管理员在群组或用户列表中新建用户，用户名，真实姓名，手机号不能为空，表单隐式把所属群组号也传递进来
         * @param user user
         */
        userCreatePost: function (params) {
            return exports.UsercontrollerApiFp.userCreatePost(params)(fetch, basePath);
        },
        /**
         * 未登录用户重置密码接口，供找回密码功能使用
         * 未登录用户重置密码接口，需要手机号，手机验证码，新密码
         * @param user 根据手机号修改密码
         */
        userFindPwdPost: function (params) {
            return exports.UsercontrollerApiFp.userFindPwdPost(params)(fetch, basePath);
        },
        /**
         * 校验用户对某个目录是否有某种权限
         * 校验用户对某个目录是否有某种权限
         * @param userId userId
         * @param folderId folderId
         * @param code code
         */
        userFolderauthGet: function (params) {
            return exports.UsercontrollerApiFp.userFolderauthGet(params)(fetch, basePath);
        },
        /**
         * 根据TGT获取登录用户信息
         * 根据TGT获取登录用户信息
         * @param TGT 客户端存储的TGT
         */
        userGetUserByTGTGet: function (params) {
            return exports.UsercontrollerApiFp.userGetUserByTGTGet(params)(fetch, basePath);
        },
        /**
         * 【接口废弃】获取用户的管理的目录列表
         * 罗列当前用户有权限的目录列表
         * @param userId userId
         */
        userGetUserManageFoldersGet: function (params) {
            return exports.UsercontrollerApiFp.userGetUserManageFoldersGet(params)(fetch, basePath);
        },
        /**
         * 删除用户
         * 删除用户
         * @param id 用户ID
         */
        userIdDelete: function (params) {
            return exports.UsercontrollerApiFp.userIdDelete(params)(fetch, basePath);
        },
        /**
         * 查询用户信息
         * 根据用户ID获取用户信息
         * @param id 用户ID
         */
        userIdGet: function (params) {
            return exports.UsercontrollerApiFp.userIdGet(params)(fetch, basePath);
        },
        /**
         * 用户加入群组
         * 将多个用户批量加入到某个群组中
         * @param userIds 用户id列表
         * @param workgroupId  群组ID
         */
        userJoinWorkgroupPost: function (params) {
            return exports.UsercontrollerApiFp.userJoinWorkgroupPost(params)(fetch, basePath);
        },
        /**
         * 登录接口
         * 用户登录接口，登录成功返回TGT信息
         * @param user 可以是用户名或手机号或邮箱，密码
         */
        userLoginPost: function (params) {
            return exports.UsercontrollerApiFp.userLoginPost(params)(fetch, basePath);
        },
        /**
         * 登出接口
         * 用户登出接口
         * @param TGT 客户端存储的TGT
         */
        userLogoutGet: function (params) {
            return exports.UsercontrollerApiFp.userLogoutGet(params)(fetch, basePath);
        },
        /**
         * 用户列表分页查询
         * 包括所有用户
         * @param pageNum 查询第N页用户列表
         * @param pageSize 每页显示用户数
         */
        userPageListGet: function (params) {
            return exports.UsercontrollerApiFp.userPageListGet(params)(fetch, basePath);
        },
        /**
         * 用户注册
         * 手机号，密码，邀请码不能为空，会默认把手机号填充到用户名
         * @param user user
         */
        userRegisterPost: function (params) {
            return exports.UsercontrollerApiFp.userRegisterPost(params)(fetch, basePath);
        },
        /**
         * 已登录用户修改接口
         * 重置密码接口，无需任何验证
         * @param user 根据用户名或手机号或邮箱,修改密码
         */
        userResetPwdPost: function (params) {
            return exports.UsercontrollerApiFp.userResetPwdPost(params)(fetch, basePath);
        },
        /**
         * 搜索用户
         * 仅提供根据关键字userName匹配用户user_name， mobile， email，根据workgroupId查询某群组内的用户
         * @param user 仅提供userName, workgroupId参数即可，两者都是可选的
         * @param pageNum 查询第N页用户列表
         * @param pageSize 每页显示用户数
         */
        userSearchPost: function (params) {
            return exports.UsercontrollerApiFp.userSearchPost(params)(fetch, basePath);
        },
        /**
         * 分页查询用户简单信息
         * 用户简单信息包括：user_id,nick_name,real_name,user_name,mobile,email,address,company,gender,reg_time,status,weixin,qq
         * @param pageNum 查询第N页用户列表
         * @param pageSize 每页显示用户数
         * @param userIds userIds
         */
        userSimpleInfoPageListGet: function (params) {
            return exports.UsercontrollerApiFp.userSimpleInfoPageListGet(params)(fetch, basePath);
        },
        /**
         * 未分组用户列表查询
         * 所有未被分配进任何组的用户
         * @param pageNum 查询第N页用户列表
         * @param pageSize 每页显示用户数
         */
        userUngroupedUsersPageListGet: function (params) {
            return exports.UsercontrollerApiFp.userUngroupedUsersPageListGet(params)(fetch, basePath);
        },
        /**
         * 更新用户信息
         * 更新用户信息，数据中要有userId
         * @param user user
         */
        userUpdatePut: function (params) {
            return exports.UsercontrollerApiFp.userUpdatePut(params)(fetch, basePath);
        },
        /**
         * 获取指定用户指定目录的 目录访问权限列表
         * 目前一个用户属于一个群组，但一个群组可以有多个用户角色，任何一个角色含有编审权限，则获取全部目录；否则根据群组目录权限获取目录
         * @param userId 用户id
         * @param folderId 目录 id，不传时获取所有目录
         */
        userUserFolderPermissionListGet: function (params) {
            return exports.UsercontrollerApiFp.userUserFolderPermissionListGet(params)(fetch, basePath);
        },
        /**
         * 仅仅获取系统权限列表,不包括目录权限
         * 目前一个用户属于一个群组，但一个群组可以有多个角色，仅仅获取系统权限列表,不包括目录权限
         * @param userId 用户id
         */
        userUserPermissionListGet: function (params) {
            return exports.UsercontrollerApiFp.userUserPermissionListGet(params)(fetch, basePath);
        },
    };
};
/**
 * WorkgroupcontrollerApi - fetch parameter creator
 */
exports.WorkgroupcontrollerApiFetchParamCreactor = {
    /**
     * 添加群组
     * 添加群组
     * @param workgroup workgroup
     */
    workgroupsCreatePost: function (params) {
        // verify required parameter "workgroup" is set
        if (params["workgroup"] == null) {
            throw new Error("Missing required parameter workgroup when calling workgroupsCreatePost");
        }
        var baseUrl = "/workgroups/create";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["workgroup"]) {
            fetchOptions.body = JSON.stringify(params["workgroup"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 获取群组列表
     * 根据tag，获取相关群组；没有tag则获取所有群组
     * @param tag 群组tag关键词
     */
    workgroupsGet: function (params) {
        var baseUrl = "/workgroups";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "tag": params.tag,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 删除群组
     * 删除目录，包括子节点的所有群组。同时解散当期群组下的所有用户
     * @param id id
     */
    workgroupsIdDelete: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling workgroupsIdDelete");
        }
        var baseUrl = "/workgroups/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "DELETE" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 查看详细
     * 获取讨论组详细信息，不包括子组信息
     * @param id id
     */
    workgroupsIdGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling workgroupsIdGet");
        }
        var baseUrl = "/workgroups/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 更新群组
     * 更新群组的名称和角色设置
     * @param id 群组ID
     * @param workgroup workgroup
     */
    workgroupsIdPut: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling workgroupsIdPut");
        }
        // verify required parameter "workgroup" is set
        if (params["workgroup"] == null) {
            throw new Error("Missing required parameter workgroup when calling workgroupsIdPut");
        }
        var baseUrl = "/workgroups/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "PUT" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["workgroup"]) {
            fetchOptions.body = JSON.stringify(params["workgroup"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * WorkgroupcontrollerApi - functional programming interface
 */
exports.WorkgroupcontrollerApiFp = {
    /**
     * 添加群组
     * 添加群组
     * @param workgroup workgroup
     */
    workgroupsCreatePost: function (params) {
        var fetchArgs = exports.WorkgroupcontrollerApiFetchParamCreactor.workgroupsCreatePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 获取群组列表
     * 根据tag，获取相关群组；没有tag则获取所有群组
     * @param tag 群组tag关键词
     */
    workgroupsGet: function (params) {
        var fetchArgs = exports.WorkgroupcontrollerApiFetchParamCreactor.workgroupsGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 删除群组
     * 删除目录，包括子节点的所有群组。同时解散当期群组下的所有用户
     * @param id id
     */
    workgroupsIdDelete: function (params) {
        var fetchArgs = exports.WorkgroupcontrollerApiFetchParamCreactor.workgroupsIdDelete(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 查看详细
     * 获取讨论组详细信息，不包括子组信息
     * @param id id
     */
    workgroupsIdGet: function (params) {
        var fetchArgs = exports.WorkgroupcontrollerApiFetchParamCreactor.workgroupsIdGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 更新群组
     * 更新群组的名称和角色设置
     * @param id 群组ID
     * @param workgroup workgroup
     */
    workgroupsIdPut: function (params) {
        var fetchArgs = exports.WorkgroupcontrollerApiFetchParamCreactor.workgroupsIdPut(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * WorkgroupcontrollerApi - object-oriented interface
 */
var WorkgroupcontrollerApi = (function (_super) {
    __extends(WorkgroupcontrollerApi, _super);
    function WorkgroupcontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     * 添加群组
     * 添加群组
     * @param workgroup workgroup
     */
    WorkgroupcontrollerApi.prototype.workgroupsCreatePost = function (params) {
        return exports.WorkgroupcontrollerApiFp.workgroupsCreatePost(params)(this.fetch, this.basePath);
    };
    /**
     * 获取群组列表
     * 根据tag，获取相关群组；没有tag则获取所有群组
     * @param tag 群组tag关键词
     */
    WorkgroupcontrollerApi.prototype.workgroupsGet = function (params) {
        return exports.WorkgroupcontrollerApiFp.workgroupsGet(params)(this.fetch, this.basePath);
    };
    /**
     * 删除群组
     * 删除目录，包括子节点的所有群组。同时解散当期群组下的所有用户
     * @param id id
     */
    WorkgroupcontrollerApi.prototype.workgroupsIdDelete = function (params) {
        return exports.WorkgroupcontrollerApiFp.workgroupsIdDelete(params)(this.fetch, this.basePath);
    };
    /**
     * 查看详细
     * 获取讨论组详细信息，不包括子组信息
     * @param id id
     */
    WorkgroupcontrollerApi.prototype.workgroupsIdGet = function (params) {
        return exports.WorkgroupcontrollerApiFp.workgroupsIdGet(params)(this.fetch, this.basePath);
    };
    /**
     * 更新群组
     * 更新群组的名称和角色设置
     * @param id 群组ID
     * @param workgroup workgroup
     */
    WorkgroupcontrollerApi.prototype.workgroupsIdPut = function (params) {
        return exports.WorkgroupcontrollerApiFp.workgroupsIdPut(params)(this.fetch, this.basePath);
    };
    return WorkgroupcontrollerApi;
}(BaseAPI));
exports.WorkgroupcontrollerApi = WorkgroupcontrollerApi;
;
/**
 * WorkgroupcontrollerApi - factory interface
 */
exports.WorkgroupcontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         * 添加群组
         * 添加群组
         * @param workgroup workgroup
         */
        workgroupsCreatePost: function (params) {
            return exports.WorkgroupcontrollerApiFp.workgroupsCreatePost(params)(fetch, basePath);
        },
        /**
         * 获取群组列表
         * 根据tag，获取相关群组；没有tag则获取所有群组
         * @param tag 群组tag关键词
         */
        workgroupsGet: function (params) {
            return exports.WorkgroupcontrollerApiFp.workgroupsGet(params)(fetch, basePath);
        },
        /**
         * 删除群组
         * 删除目录，包括子节点的所有群组。同时解散当期群组下的所有用户
         * @param id id
         */
        workgroupsIdDelete: function (params) {
            return exports.WorkgroupcontrollerApiFp.workgroupsIdDelete(params)(fetch, basePath);
        },
        /**
         * 查看详细
         * 获取讨论组详细信息，不包括子组信息
         * @param id id
         */
        workgroupsIdGet: function (params) {
            return exports.WorkgroupcontrollerApiFp.workgroupsIdGet(params)(fetch, basePath);
        },
        /**
         * 更新群组
         * 更新群组的名称和角色设置
         * @param id 群组ID
         * @param workgroup workgroup
         */
        workgroupsIdPut: function (params) {
            return exports.WorkgroupcontrollerApiFp.workgroupsIdPut(params)(fetch, basePath);
        },
    };
};
/**
 * WorkgroupfolderpermissioncontrollerApi - fetch parameter creator
 */
exports.WorkgroupfolderpermissioncontrollerApiFetchParamCreactor = {
    /**
     * 删除目录上的权限
     * 根据目录id删除设置的权限
     * @param folderIds 目录ID
     */
    workgroupFolderPermissionDeleteByFolderIdsPost: function (params) {
        var baseUrl = "/workgroupFolderPermission/deleteByFolderIds";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "folderIds": params.folderIds,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /getByFolderId
     * 根据目录id 获取所有相关群组的权限项设置
     * @param folderId folderId
     */
    workgroupFolderPermissionGetByFolderIdGet: function (params) {
        // verify required parameter "folderId" is set
        if (params["folderId"] == null) {
            throw new Error("Missing required parameter folderId when calling workgroupFolderPermissionGetByFolderIdGet");
        }
        var baseUrl = "/workgroupFolderPermission/getByFolderId";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "folderId": params.folderId,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 跟新指定目录权限
     * 更新特定目录的群组权限项
     * @param folderId 当前被创建授权的目录ID
     * @param map {   workgroupId : permissionid[ ],   workgroupId : permissionid[ ],  }
     */
    workgroupFolderPermissionSetByFolderIdPost: function (params) {
        var baseUrl = "/workgroupFolderPermission/setByFolderId";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "folderId": params.folderId,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["map"]) {
            fetchOptions.body = JSON.stringify(params["map"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * WorkgroupfolderpermissioncontrollerApi - functional programming interface
 */
exports.WorkgroupfolderpermissioncontrollerApiFp = {
    /**
     * 删除目录上的权限
     * 根据目录id删除设置的权限
     * @param folderIds 目录ID
     */
    workgroupFolderPermissionDeleteByFolderIdsPost: function (params) {
        var fetchArgs = exports.WorkgroupfolderpermissioncontrollerApiFetchParamCreactor.workgroupFolderPermissionDeleteByFolderIdsPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /getByFolderId
     * 根据目录id 获取所有相关群组的权限项设置
     * @param folderId folderId
     */
    workgroupFolderPermissionGetByFolderIdGet: function (params) {
        var fetchArgs = exports.WorkgroupfolderpermissioncontrollerApiFetchParamCreactor.workgroupFolderPermissionGetByFolderIdGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 跟新指定目录权限
     * 更新特定目录的群组权限项
     * @param folderId 当前被创建授权的目录ID
     * @param map {   workgroupId : permissionid[ ],   workgroupId : permissionid[ ],  }
     */
    workgroupFolderPermissionSetByFolderIdPost: function (params) {
        var fetchArgs = exports.WorkgroupfolderpermissioncontrollerApiFetchParamCreactor.workgroupFolderPermissionSetByFolderIdPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * WorkgroupfolderpermissioncontrollerApi - object-oriented interface
 */
var WorkgroupfolderpermissioncontrollerApi = (function (_super) {
    __extends(WorkgroupfolderpermissioncontrollerApi, _super);
    function WorkgroupfolderpermissioncontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     * 删除目录上的权限
     * 根据目录id删除设置的权限
     * @param folderIds 目录ID
     */
    WorkgroupfolderpermissioncontrollerApi.prototype.workgroupFolderPermissionDeleteByFolderIdsPost = function (params) {
        return exports.WorkgroupfolderpermissioncontrollerApiFp.workgroupFolderPermissionDeleteByFolderIdsPost(params)(this.fetch, this.basePath);
    };
    /**
     * /getByFolderId
     * 根据目录id 获取所有相关群组的权限项设置
     * @param folderId folderId
     */
    WorkgroupfolderpermissioncontrollerApi.prototype.workgroupFolderPermissionGetByFolderIdGet = function (params) {
        return exports.WorkgroupfolderpermissioncontrollerApiFp.workgroupFolderPermissionGetByFolderIdGet(params)(this.fetch, this.basePath);
    };
    /**
     * 跟新指定目录权限
     * 更新特定目录的群组权限项
     * @param folderId 当前被创建授权的目录ID
     * @param map {   workgroupId : permissionid[ ],   workgroupId : permissionid[ ],  }
     */
    WorkgroupfolderpermissioncontrollerApi.prototype.workgroupFolderPermissionSetByFolderIdPost = function (params) {
        return exports.WorkgroupfolderpermissioncontrollerApiFp.workgroupFolderPermissionSetByFolderIdPost(params)(this.fetch, this.basePath);
    };
    return WorkgroupfolderpermissioncontrollerApi;
}(BaseAPI));
exports.WorkgroupfolderpermissioncontrollerApi = WorkgroupfolderpermissioncontrollerApi;
;
/**
 * WorkgroupfolderpermissioncontrollerApi - factory interface
 */
exports.WorkgroupfolderpermissioncontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         * 删除目录上的权限
         * 根据目录id删除设置的权限
         * @param folderIds 目录ID
         */
        workgroupFolderPermissionDeleteByFolderIdsPost: function (params) {
            return exports.WorkgroupfolderpermissioncontrollerApiFp.workgroupFolderPermissionDeleteByFolderIdsPost(params)(fetch, basePath);
        },
        /**
         * /getByFolderId
         * 根据目录id 获取所有相关群组的权限项设置
         * @param folderId folderId
         */
        workgroupFolderPermissionGetByFolderIdGet: function (params) {
            return exports.WorkgroupfolderpermissioncontrollerApiFp.workgroupFolderPermissionGetByFolderIdGet(params)(fetch, basePath);
        },
        /**
         * 跟新指定目录权限
         * 更新特定目录的群组权限项
         * @param folderId 当前被创建授权的目录ID
         * @param map {   workgroupId : permissionid[ ],   workgroupId : permissionid[ ],  }
         */
        workgroupFolderPermissionSetByFolderIdPost: function (params) {
            return exports.WorkgroupfolderpermissioncontrollerApiFp.workgroupFolderPermissionSetByFolderIdPost(params)(fetch, basePath);
        },
    };
};
