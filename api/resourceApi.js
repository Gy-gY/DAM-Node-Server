/**
 * dam resource service 1.0相关接口
 * dam resource service 1.0相关接口
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var querystring = require("querystring");
var url = require("url");
var isomorphicFetch = require("isomorphic-fetch");
var assign = require("core-js/library/fn/object/assign");
var BASE_PATH = "http://localhost:6010/";
var BaseAPI = (function () {
    function BaseAPI(fetch, basePath) {
        if (fetch === void 0) { fetch = isomorphicFetch; }
        if (basePath === void 0) { basePath = BASE_PATH; }
        this.basePath = basePath;
        this.fetch = fetch;
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
/**
 * AssestApi - fetch parameter creator
 */
exports.AssestApiFetchParamCreactor = {
    /**
     * /batchDel
     * 批量删除资源
     * @param folderId folderId
     * @param ids ids
     */
    assetsBatchDelFolderIdDelete: function (params) {
        // verify required parameter "folderId" is set
        if (params["folderId"] == null) {
            throw new Error("Missing required parameter folderId when calling assetsBatchDelFolderIdDelete");
        }
        var baseUrl = "/assets/batchDel/{folderId}"
            .replace("{" + "folderId" + "}", "" + params.folderId);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "ids": params.ids,
        });
        var fetchOptions = { method: "DELETE" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 根据id获取指定多个资源详细信息
     * 批量获取资源信息，包含基本信息，详细信息
     * @param ids ids
     */
    assetsBatchGet: function (params) {
        // verify required parameter "ids" is set
        if (params["ids"] == null) {
            throw new Error("Missing required parameter ids when calling assetsBatchGet");
        }
        var baseUrl = "/assets/batch";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "ids": params.ids,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /{id}
     * 修改多个资源
     * @param asset asset
     * @param ids ids
     */
    assetsBatchUpdatePost: function (params) {
        // verify required parameter "asset" is set
        if (params["asset"] == null) {
            throw new Error("Missing required parameter asset when calling assetsBatchUpdatePost");
        }
        var baseUrl = "/assets/batchUpdate";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "ids": params.ids,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["asset"]) {
            fetchOptions.body = JSON.stringify(params["asset"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /download
     * 获取资源的批量下载地址，支持图片和视频的混合批量下载，同时记录下载历史
     * @param ids ids
     * @param userId userId
     */
    assetsDownloadPost: function (params) {
        // verify required parameter "ids" is set
        if (params["ids"] == null) {
            throw new Error("Missing required parameter ids when calling assetsDownloadPost");
        }
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling assetsDownloadPost");
        }
        var baseUrl = "/assets/download";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "userId": params.userId,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["ids"]) {
            fetchOptions.body = JSON.stringify(params["ids"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /getFolders
     * 获取多个资产所在目录列表
     * @param ids ids
     */
    assetsGetFoldersGet: function (params) {
        // verify required parameter "ids" is set
        if (params["ids"] == null) {
            throw new Error("Missing required parameter ids when calling assetsGetFoldersGet");
        }
        var baseUrl = "/assets/getFolders";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "ids": params.ids,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /{id}
     * 删除单个资源
     * @param id id
     */
    assetsIdDelete: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling assetsIdDelete");
        }
        var baseUrl = "/assets/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "DELETE" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 获取单个资源详细信息
     * 获取资源信息，包含基本信息，详细信息
     * @param id id
     */
    assetsIdGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling assetsIdGet");
        }
        var baseUrl = "/assets/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /{id}/keywords
     * 获取单张图片关键字信息
     * @param id id
     */
    assetsIdKeywordsGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling assetsIdKeywordsGet");
        }
        var baseUrl = "/assets/{id}/keywords"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /{id}/keywords
     * 修改单张图片关键字信息
     * @param id id
     * @param keywords keywords
     */
    assetsIdKeywordsPut: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling assetsIdKeywordsPut");
        }
        // verify required parameter "keywords" is set
        if (params["keywords"] == null) {
            throw new Error("Missing required parameter keywords when calling assetsIdKeywordsPut");
        }
        var baseUrl = "/assets/{id}/keywords"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "PUT" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["keywords"]) {
            fetchOptions.body = JSON.stringify(params["keywords"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /{id}/online
     * 修改单张图片在线状态
     * @param id id
     * @param onlineState onlineState
     */
    assetsIdOnlinePut: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling assetsIdOnlinePut");
        }
        // verify required parameter "onlineState" is set
        if (params["onlineState"] == null) {
            throw new Error("Missing required parameter onlineState when calling assetsIdOnlinePut");
        }
        var baseUrl = "/assets/{id}/online"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "PUT" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["onlineState"]) {
            fetchOptions.body = JSON.stringify(params["onlineState"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 内容上传资源列表接口
     * 内容上传资源列表接口，仅获取未入库状态的资源
     * @param folderId 目标目录id
     * @param userId 当前用户
     * @param pageNum 查询第N页收藏列表
     * @param pageSize 每页显示搜藏数
     * @param assetType 资源类型
     */
    assetsLoadAssetsFolderIdGet: function (params) {
        // verify required parameter "folderId" is set
        if (params["folderId"] == null) {
            throw new Error("Missing required parameter folderId when calling assetsLoadAssetsFolderIdGet");
        }
        var baseUrl = "/assets/loadAssets/{folderId}"
            .replace("{" + "folderId" + "}", "" + params.folderId);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "userId": params.userId,
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
            "assetType": params.assetType,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * create
     * 创建资源
     * @param asset asset
     */
    assetsPost: function (params) {
        // verify required parameter "asset" is set
        if (params["asset"] == null) {
            throw new Error("Missing required parameter asset when calling assetsPost");
        }
        var baseUrl = "/assets";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["asset"]) {
            fetchOptions.body = JSON.stringify(params["asset"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /review
     * 批量修改图片编审状态
     * @param reviewState reviewState
     */
    assetsReviewPut: function (params) {
        // verify required parameter "reviewState" is set
        if (params["reviewState"] == null) {
            throw new Error("Missing required parameter reviewState when calling assetsReviewPut");
        }
        var baseUrl = "/assets/review";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "PUT" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["reviewState"]) {
            fetchOptions.body = JSON.stringify(params["reviewState"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /search
     * 搜索
     * @param keyword keyword
     * @param onlineState onlineState
     * @param reviewState reviewState
     * @param uploadState uploadState
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    assetsSearchGet: function (params) {
        // verify required parameter "keyword" is set
        if (params["keyword"] == null) {
            throw new Error("Missing required parameter keyword when calling assetsSearchGet");
        }
        var baseUrl = "/assets/search";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "keyword": params.keyword,
            "onlineState": params.onlineState,
            "reviewState": params.reviewState,
            "uploadState": params.uploadState,
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /{id}
     * 修改单个资源
     * @param id id
     * @param asset asset
     */
    assetsUpdateIdPost: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling assetsUpdateIdPost");
        }
        // verify required parameter "asset" is set
        if (params["asset"] == null) {
            throw new Error("Missing required parameter asset when calling assetsUpdateIdPost");
        }
        var baseUrl = "/assets/update/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["asset"]) {
            fetchOptions.body = JSON.stringify(params["asset"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * AssestApi - functional programming interface
 */
exports.AssestApiFp = {
    /**
     * /batchDel
     * 批量删除资源
     * @param folderId folderId
     * @param ids ids
     */
    assetsBatchDelFolderIdDelete: function (params) {
        var fetchArgs = exports.AssestApiFetchParamCreactor.assetsBatchDelFolderIdDelete(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 根据id获取指定多个资源详细信息
     * 批量获取资源信息，包含基本信息，详细信息
     * @param ids ids
     */
    assetsBatchGet: function (params) {
        var fetchArgs = exports.AssestApiFetchParamCreactor.assetsBatchGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /{id}
     * 修改多个资源
     * @param asset asset
     * @param ids ids
     */
    assetsBatchUpdatePost: function (params) {
        var fetchArgs = exports.AssestApiFetchParamCreactor.assetsBatchUpdatePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /download
     * 获取资源的批量下载地址，支持图片和视频的混合批量下载，同时记录下载历史
     * @param ids ids
     * @param userId userId
     */
    assetsDownloadPost: function (params) {
        var fetchArgs = exports.AssestApiFetchParamCreactor.assetsDownloadPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /getFolders
     * 获取多个资产所在目录列表
     * @param ids ids
     */
    assetsGetFoldersGet: function (params) {
        var fetchArgs = exports.AssestApiFetchParamCreactor.assetsGetFoldersGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /{id}
     * 删除单个资源
     * @param id id
     */
    assetsIdDelete: function (params) {
        var fetchArgs = exports.AssestApiFetchParamCreactor.assetsIdDelete(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 获取单个资源详细信息
     * 获取资源信息，包含基本信息，详细信息
     * @param id id
     */
    assetsIdGet: function (params) {
        var fetchArgs = exports.AssestApiFetchParamCreactor.assetsIdGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /{id}/keywords
     * 获取单张图片关键字信息
     * @param id id
     */
    assetsIdKeywordsGet: function (params) {
        var fetchArgs = exports.AssestApiFetchParamCreactor.assetsIdKeywordsGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /{id}/keywords
     * 修改单张图片关键字信息
     * @param id id
     * @param keywords keywords
     */
    assetsIdKeywordsPut: function (params) {
        var fetchArgs = exports.AssestApiFetchParamCreactor.assetsIdKeywordsPut(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /{id}/online
     * 修改单张图片在线状态
     * @param id id
     * @param onlineState onlineState
     */
    assetsIdOnlinePut: function (params) {
        var fetchArgs = exports.AssestApiFetchParamCreactor.assetsIdOnlinePut(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 内容上传资源列表接口
     * 内容上传资源列表接口，仅获取未入库状态的资源
     * @param folderId 目标目录id
     * @param userId 当前用户
     * @param pageNum 查询第N页收藏列表
     * @param pageSize 每页显示搜藏数
     * @param assetType 资源类型
     */
    assetsLoadAssetsFolderIdGet: function (params) {
        var fetchArgs = exports.AssestApiFetchParamCreactor.assetsLoadAssetsFolderIdGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * create
     * 创建资源
     * @param asset asset
     */
    assetsPost: function (params) {
        var fetchArgs = exports.AssestApiFetchParamCreactor.assetsPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /review
     * 批量修改图片编审状态
     * @param reviewState reviewState
     */
    assetsReviewPut: function (params) {
        var fetchArgs = exports.AssestApiFetchParamCreactor.assetsReviewPut(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /search
     * 搜索
     * @param keyword keyword
     * @param onlineState onlineState
     * @param reviewState reviewState
     * @param uploadState uploadState
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    assetsSearchGet: function (params) {
        var fetchArgs = exports.AssestApiFetchParamCreactor.assetsSearchGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /{id}
     * 修改单个资源
     * @param id id
     * @param asset asset
     */
    assetsUpdateIdPost: function (params) {
        var fetchArgs = exports.AssestApiFetchParamCreactor.assetsUpdateIdPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * AssestApi - object-oriented interface
 */
var AssestApi = (function (_super) {
    __extends(AssestApi, _super);
    function AssestApi() {
        _super.apply(this, arguments);
    }
    /**
     * /batchDel
     * 批量删除资源
     * @param folderId folderId
     * @param ids ids
     */
    AssestApi.prototype.assetsBatchDelFolderIdDelete = function (params) {
        return exports.AssestApiFp.assetsBatchDelFolderIdDelete(params)(this.fetch, this.basePath);
    };
    /**
     * 根据id获取指定多个资源详细信息
     * 批量获取资源信息，包含基本信息，详细信息
     * @param ids ids
     */
    AssestApi.prototype.assetsBatchGet = function (params) {
        return exports.AssestApiFp.assetsBatchGet(params)(this.fetch, this.basePath);
    };
    /**
     * /{id}
     * 修改多个资源
     * @param asset asset
     * @param ids ids
     */
    AssestApi.prototype.assetsBatchUpdatePost = function (params) {
        return exports.AssestApiFp.assetsBatchUpdatePost(params)(this.fetch, this.basePath);
    };
    /**
     * /download
     * 获取资源的批量下载地址，支持图片和视频的混合批量下载，同时记录下载历史
     * @param ids ids
     * @param userId userId
     */
    AssestApi.prototype.assetsDownloadPost = function (params) {
        return exports.AssestApiFp.assetsDownloadPost(params)(this.fetch, this.basePath);
    };
    /**
     * /getFolders
     * 获取多个资产所在目录列表
     * @param ids ids
     */
    AssestApi.prototype.assetsGetFoldersGet = function (params) {
        return exports.AssestApiFp.assetsGetFoldersGet(params)(this.fetch, this.basePath);
    };
    /**
     * /{id}
     * 删除单个资源
     * @param id id
     */
    AssestApi.prototype.assetsIdDelete = function (params) {
        return exports.AssestApiFp.assetsIdDelete(params)(this.fetch, this.basePath);
    };
    /**
     * 获取单个资源详细信息
     * 获取资源信息，包含基本信息，详细信息
     * @param id id
     */
    AssestApi.prototype.assetsIdGet = function (params) {
        return exports.AssestApiFp.assetsIdGet(params)(this.fetch, this.basePath);
    };
    /**
     * /{id}/keywords
     * 获取单张图片关键字信息
     * @param id id
     */
    AssestApi.prototype.assetsIdKeywordsGet = function (params) {
        return exports.AssestApiFp.assetsIdKeywordsGet(params)(this.fetch, this.basePath);
    };
    /**
     * /{id}/keywords
     * 修改单张图片关键字信息
     * @param id id
     * @param keywords keywords
     */
    AssestApi.prototype.assetsIdKeywordsPut = function (params) {
        return exports.AssestApiFp.assetsIdKeywordsPut(params)(this.fetch, this.basePath);
    };
    /**
     * /{id}/online
     * 修改单张图片在线状态
     * @param id id
     * @param onlineState onlineState
     */
    AssestApi.prototype.assetsIdOnlinePut = function (params) {
        return exports.AssestApiFp.assetsIdOnlinePut(params)(this.fetch, this.basePath);
    };
    /**
     * 内容上传资源列表接口
     * 内容上传资源列表接口，仅获取未入库状态的资源
     * @param folderId 目标目录id
     * @param userId 当前用户
     * @param pageNum 查询第N页收藏列表
     * @param pageSize 每页显示搜藏数
     * @param assetType 资源类型
     */
    AssestApi.prototype.assetsLoadAssetsFolderIdGet = function (params) {
        return exports.AssestApiFp.assetsLoadAssetsFolderIdGet(params)(this.fetch, this.basePath);
    };
    /**
     * create
     * 创建资源
     * @param asset asset
     */
    AssestApi.prototype.assetsPost = function (params) {
        return exports.AssestApiFp.assetsPost(params)(this.fetch, this.basePath);
    };
    /**
     * /review
     * 批量修改图片编审状态
     * @param reviewState reviewState
     */
    AssestApi.prototype.assetsReviewPut = function (params) {
        return exports.AssestApiFp.assetsReviewPut(params)(this.fetch, this.basePath);
    };
    /**
     * /search
     * 搜索
     * @param keyword keyword
     * @param onlineState onlineState
     * @param reviewState reviewState
     * @param uploadState uploadState
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    AssestApi.prototype.assetsSearchGet = function (params) {
        return exports.AssestApiFp.assetsSearchGet(params)(this.fetch, this.basePath);
    };
    /**
     * /{id}
     * 修改单个资源
     * @param id id
     * @param asset asset
     */
    AssestApi.prototype.assetsUpdateIdPost = function (params) {
        return exports.AssestApiFp.assetsUpdateIdPost(params)(this.fetch, this.basePath);
    };
    return AssestApi;
}(BaseAPI));
exports.AssestApi = AssestApi;
;
/**
 * AssestApi - factory interface
 */
exports.AssestApiFactory = function (fetch, basePath) {
    return {
        /**
         * /batchDel
         * 批量删除资源
         * @param folderId folderId
         * @param ids ids
         */
        assetsBatchDelFolderIdDelete: function (params) {
            return exports.AssestApiFp.assetsBatchDelFolderIdDelete(params)(fetch, basePath);
        },
        /**
         * 根据id获取指定多个资源详细信息
         * 批量获取资源信息，包含基本信息，详细信息
         * @param ids ids
         */
        assetsBatchGet: function (params) {
            return exports.AssestApiFp.assetsBatchGet(params)(fetch, basePath);
        },
        /**
         * /{id}
         * 修改多个资源
         * @param asset asset
         * @param ids ids
         */
        assetsBatchUpdatePost: function (params) {
            return exports.AssestApiFp.assetsBatchUpdatePost(params)(fetch, basePath);
        },
        /**
         * /download
         * 获取资源的批量下载地址，支持图片和视频的混合批量下载，同时记录下载历史
         * @param ids ids
         * @param userId userId
         */
        assetsDownloadPost: function (params) {
            return exports.AssestApiFp.assetsDownloadPost(params)(fetch, basePath);
        },
        /**
         * /getFolders
         * 获取多个资产所在目录列表
         * @param ids ids
         */
        assetsGetFoldersGet: function (params) {
            return exports.AssestApiFp.assetsGetFoldersGet(params)(fetch, basePath);
        },
        /**
         * /{id}
         * 删除单个资源
         * @param id id
         */
        assetsIdDelete: function (params) {
            return exports.AssestApiFp.assetsIdDelete(params)(fetch, basePath);
        },
        /**
         * 获取单个资源详细信息
         * 获取资源信息，包含基本信息，详细信息
         * @param id id
         */
        assetsIdGet: function (params) {
            return exports.AssestApiFp.assetsIdGet(params)(fetch, basePath);
        },
        /**
         * /{id}/keywords
         * 获取单张图片关键字信息
         * @param id id
         */
        assetsIdKeywordsGet: function (params) {
            return exports.AssestApiFp.assetsIdKeywordsGet(params)(fetch, basePath);
        },
        /**
         * /{id}/keywords
         * 修改单张图片关键字信息
         * @param id id
         * @param keywords keywords
         */
        assetsIdKeywordsPut: function (params) {
            return exports.AssestApiFp.assetsIdKeywordsPut(params)(fetch, basePath);
        },
        /**
         * /{id}/online
         * 修改单张图片在线状态
         * @param id id
         * @param onlineState onlineState
         */
        assetsIdOnlinePut: function (params) {
            return exports.AssestApiFp.assetsIdOnlinePut(params)(fetch, basePath);
        },
        /**
         * 内容上传资源列表接口
         * 内容上传资源列表接口，仅获取未入库状态的资源
         * @param folderId 目标目录id
         * @param userId 当前用户
         * @param pageNum 查询第N页收藏列表
         * @param pageSize 每页显示搜藏数
         * @param assetType 资源类型
         */
        assetsLoadAssetsFolderIdGet: function (params) {
            return exports.AssestApiFp.assetsLoadAssetsFolderIdGet(params)(fetch, basePath);
        },
        /**
         * create
         * 创建资源
         * @param asset asset
         */
        assetsPost: function (params) {
            return exports.AssestApiFp.assetsPost(params)(fetch, basePath);
        },
        /**
         * /review
         * 批量修改图片编审状态
         * @param reviewState reviewState
         */
        assetsReviewPut: function (params) {
            return exports.AssestApiFp.assetsReviewPut(params)(fetch, basePath);
        },
        /**
         * /search
         * 搜索
         * @param keyword keyword
         * @param onlineState onlineState
         * @param reviewState reviewState
         * @param uploadState uploadState
         * @param pageNum pageNum
         * @param pageSize pageSize
         */
        assetsSearchGet: function (params) {
            return exports.AssestApiFp.assetsSearchGet(params)(fetch, basePath);
        },
        /**
         * /{id}
         * 修改单个资源
         * @param id id
         * @param asset asset
         */
        assetsUpdateIdPost: function (params) {
            return exports.AssestApiFp.assetsUpdateIdPost(params)(fetch, basePath);
        },
    };
};
/**
 * DEMOApi - fetch parameter creator
 */
exports.DEMOApiFetchParamCreactor = {
    /**
     * /userFolderPermissionList
     * 获取用户的目录权限设置列表
     * @param userId userId
     * @param folderId folderId
     */
    demoUserFolderPermissionListGet: function (params) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling demoUserFolderPermissionListGet");
        }
        var baseUrl = "/demo/userFolderPermissionList";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "userId": params.userId,
            "folderId": params.folderId,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /workgroupFolderRole
     * 获取某群组某目录的设置的角色
     * @param folderId folderId
     * @param workgropId workgropId
     */
    demoWorkgroupFolderRoleGet: function (params) {
        // verify required parameter "folderId" is set
        if (params["folderId"] == null) {
            throw new Error("Missing required parameter folderId when calling demoWorkgroupFolderRoleGet");
        }
        // verify required parameter "workgropId" is set
        if (params["workgropId"] == null) {
            throw new Error("Missing required parameter workgropId when calling demoWorkgroupFolderRoleGet");
        }
        var baseUrl = "/demo/workgroupFolderRole";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "folderId": params.folderId,
            "workgropId": params.workgropId,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * DEMOApi - functional programming interface
 */
exports.DEMOApiFp = {
    /**
     * /userFolderPermissionList
     * 获取用户的目录权限设置列表
     * @param userId userId
     * @param folderId folderId
     */
    demoUserFolderPermissionListGet: function (params) {
        var fetchArgs = exports.DEMOApiFetchParamCreactor.demoUserFolderPermissionListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /workgroupFolderRole
     * 获取某群组某目录的设置的角色
     * @param folderId folderId
     * @param workgropId workgropId
     */
    demoWorkgroupFolderRoleGet: function (params) {
        var fetchArgs = exports.DEMOApiFetchParamCreactor.demoWorkgroupFolderRoleGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * DEMOApi - object-oriented interface
 */
var DEMOApi = (function (_super) {
    __extends(DEMOApi, _super);
    function DEMOApi() {
        _super.apply(this, arguments);
    }
    /**
     * /userFolderPermissionList
     * 获取用户的目录权限设置列表
     * @param userId userId
     * @param folderId folderId
     */
    DEMOApi.prototype.demoUserFolderPermissionListGet = function (params) {
        return exports.DEMOApiFp.demoUserFolderPermissionListGet(params)(this.fetch, this.basePath);
    };
    /**
     * /workgroupFolderRole
     * 获取某群组某目录的设置的角色
     * @param folderId folderId
     * @param workgropId workgropId
     */
    DEMOApi.prototype.demoWorkgroupFolderRoleGet = function (params) {
        return exports.DEMOApiFp.demoWorkgroupFolderRoleGet(params)(this.fetch, this.basePath);
    };
    return DEMOApi;
}(BaseAPI));
exports.DEMOApi = DEMOApi;
;
/**
 * DEMOApi - factory interface
 */
exports.DEMOApiFactory = function (fetch, basePath) {
    return {
        /**
         * /userFolderPermissionList
         * 获取用户的目录权限设置列表
         * @param userId userId
         * @param folderId folderId
         */
        demoUserFolderPermissionListGet: function (params) {
            return exports.DEMOApiFp.demoUserFolderPermissionListGet(params)(fetch, basePath);
        },
        /**
         * /workgroupFolderRole
         * 获取某群组某目录的设置的角色
         * @param folderId folderId
         * @param workgropId workgropId
         */
        demoWorkgroupFolderRoleGet: function (params) {
            return exports.DEMOApiFp.demoWorkgroupFolderRoleGet(params)(fetch, basePath);
        },
    };
};
/**
 * DownloadcontrollerApi - fetch parameter creator
 */
exports.DownloadcontrollerApiFetchParamCreactor = {
    /**
     * 删除
     * 删除下载信息
     * @param userId userId
     * @param ids ids
     */
    downloadBatchDelete: function (params) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling downloadBatchDelete");
        }
        // verify required parameter "ids" is set
        if (params["ids"] == null) {
            throw new Error("Missing required parameter ids when calling downloadBatchDelete");
        }
        var baseUrl = "/download/batch";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "userId": params.userId,
        });
        var fetchOptions = { method: "DELETE" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["ids"]) {
            fetchOptions.body = JSON.stringify(params["ids"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 查看
     * 查看下载信息
     * @param id id
     */
    downloadIdGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling downloadIdGet");
        }
        var baseUrl = "/download/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * list
     * 列表信息
     * @param userId userId
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param assetType assetType
     * @param orderBy orderBy
     */
    downloadPageListGet: function (params) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling downloadPageListGet");
        }
        var baseUrl = "/download/pageList";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
            "userId": params.userId,
            "assetType": params.assetType,
            "orderBy": params.orderBy,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * DownloadcontrollerApi - functional programming interface
 */
exports.DownloadcontrollerApiFp = {
    /**
     * 删除
     * 删除下载信息
     * @param userId userId
     * @param ids ids
     */
    downloadBatchDelete: function (params) {
        var fetchArgs = exports.DownloadcontrollerApiFetchParamCreactor.downloadBatchDelete(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 查看
     * 查看下载信息
     * @param id id
     */
    downloadIdGet: function (params) {
        var fetchArgs = exports.DownloadcontrollerApiFetchParamCreactor.downloadIdGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * list
     * 列表信息
     * @param userId userId
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param assetType assetType
     * @param orderBy orderBy
     */
    downloadPageListGet: function (params) {
        var fetchArgs = exports.DownloadcontrollerApiFetchParamCreactor.downloadPageListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * DownloadcontrollerApi - object-oriented interface
 */
var DownloadcontrollerApi = (function (_super) {
    __extends(DownloadcontrollerApi, _super);
    function DownloadcontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     * 删除
     * 删除下载信息
     * @param userId userId
     * @param ids ids
     */
    DownloadcontrollerApi.prototype.downloadBatchDelete = function (params) {
        return exports.DownloadcontrollerApiFp.downloadBatchDelete(params)(this.fetch, this.basePath);
    };
    /**
     * 查看
     * 查看下载信息
     * @param id id
     */
    DownloadcontrollerApi.prototype.downloadIdGet = function (params) {
        return exports.DownloadcontrollerApiFp.downloadIdGet(params)(this.fetch, this.basePath);
    };
    /**
     * list
     * 列表信息
     * @param userId userId
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param assetType assetType
     * @param orderBy orderBy
     */
    DownloadcontrollerApi.prototype.downloadPageListGet = function (params) {
        return exports.DownloadcontrollerApiFp.downloadPageListGet(params)(this.fetch, this.basePath);
    };
    return DownloadcontrollerApi;
}(BaseAPI));
exports.DownloadcontrollerApi = DownloadcontrollerApi;
;
/**
 * DownloadcontrollerApi - factory interface
 */
exports.DownloadcontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         * 删除
         * 删除下载信息
         * @param userId userId
         * @param ids ids
         */
        downloadBatchDelete: function (params) {
            return exports.DownloadcontrollerApiFp.downloadBatchDelete(params)(fetch, basePath);
        },
        /**
         * 查看
         * 查看下载信息
         * @param id id
         */
        downloadIdGet: function (params) {
            return exports.DownloadcontrollerApiFp.downloadIdGet(params)(fetch, basePath);
        },
        /**
         * list
         * 列表信息
         * @param userId userId
         * @param pageNum pageNum
         * @param pageSize pageSize
         * @param assetType assetType
         * @param orderBy orderBy
         */
        downloadPageListGet: function (params) {
            return exports.DownloadcontrollerApiFp.downloadPageListGet(params)(fetch, basePath);
        },
    };
};
/**
 * FavoritecontrollerApi - fetch parameter creator
 */
exports.FavoritecontrollerApiFetchParamCreactor = {
    /**
     * 批量添加多个资源到用户收藏
     * 批量添加多个资源到用户收藏，自动过滤了资源的重复收藏
     * @param userId 当前用户ID
     * @param assetIds 资源ID数组
     */
    favoriteCreatePost: function (params) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling favoriteCreatePost");
        }
        // verify required parameter "assetIds" is set
        if (params["assetIds"] == null) {
            throw new Error("Missing required parameter assetIds when calling favoriteCreatePost");
        }
        var baseUrl = "/favorite/create";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "user_id": params.userId,
            "asset_ids": params.assetIds,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 删除用户的部分收藏记录
     * 删除用户的部分收藏记录
     * @param userId 当前用户ID
     * @param assetIds 被取消收藏的资源id
     */
    favoriteDeleteDelete: function (params) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling favoriteDeleteDelete");
        }
        // verify required parameter "assetIds" is set
        if (params["assetIds"] == null) {
            throw new Error("Missing required parameter assetIds when calling favoriteDeleteDelete");
        }
        var baseUrl = "/favorite/delete";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "user_id": params.userId,
            "asset_ids": params.assetIds,
        });
        var fetchOptions = { method: "DELETE" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 根据资源类型，分页查询收藏记录
     * 收藏资源分页查询，按收藏时间最新的在最前面，按收藏时间最新的在最前面，具体资源信息在调用资源对应查看接口
     * @param userId 用户ID
     * @param assetType 收藏资源文件类型,资源类型 1图片 2视频 3音频 4文件
     * @param pageNum 查询第N页收藏列表
     * @param pageSize 每页显示搜藏数
     */
    favoritePageListGet: function (params) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling favoritePageListGet");
        }
        var baseUrl = "/favorite/pageList";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "user_id": params.userId,
            "asset_type": params.assetType,
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * FavoritecontrollerApi - functional programming interface
 */
exports.FavoritecontrollerApiFp = {
    /**
     * 批量添加多个资源到用户收藏
     * 批量添加多个资源到用户收藏，自动过滤了资源的重复收藏
     * @param userId 当前用户ID
     * @param assetIds 资源ID数组
     */
    favoriteCreatePost: function (params) {
        var fetchArgs = exports.FavoritecontrollerApiFetchParamCreactor.favoriteCreatePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 删除用户的部分收藏记录
     * 删除用户的部分收藏记录
     * @param userId 当前用户ID
     * @param assetIds 被取消收藏的资源id
     */
    favoriteDeleteDelete: function (params) {
        var fetchArgs = exports.FavoritecontrollerApiFetchParamCreactor.favoriteDeleteDelete(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 根据资源类型，分页查询收藏记录
     * 收藏资源分页查询，按收藏时间最新的在最前面，按收藏时间最新的在最前面，具体资源信息在调用资源对应查看接口
     * @param userId 用户ID
     * @param assetType 收藏资源文件类型,资源类型 1图片 2视频 3音频 4文件
     * @param pageNum 查询第N页收藏列表
     * @param pageSize 每页显示搜藏数
     */
    favoritePageListGet: function (params) {
        var fetchArgs = exports.FavoritecontrollerApiFetchParamCreactor.favoritePageListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * FavoritecontrollerApi - object-oriented interface
 */
var FavoritecontrollerApi = (function (_super) {
    __extends(FavoritecontrollerApi, _super);
    function FavoritecontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     * 批量添加多个资源到用户收藏
     * 批量添加多个资源到用户收藏，自动过滤了资源的重复收藏
     * @param userId 当前用户ID
     * @param assetIds 资源ID数组
     */
    FavoritecontrollerApi.prototype.favoriteCreatePost = function (params) {
        return exports.FavoritecontrollerApiFp.favoriteCreatePost(params)(this.fetch, this.basePath);
    };
    /**
     * 删除用户的部分收藏记录
     * 删除用户的部分收藏记录
     * @param userId 当前用户ID
     * @param assetIds 被取消收藏的资源id
     */
    FavoritecontrollerApi.prototype.favoriteDeleteDelete = function (params) {
        return exports.FavoritecontrollerApiFp.favoriteDeleteDelete(params)(this.fetch, this.basePath);
    };
    /**
     * 根据资源类型，分页查询收藏记录
     * 收藏资源分页查询，按收藏时间最新的在最前面，按收藏时间最新的在最前面，具体资源信息在调用资源对应查看接口
     * @param userId 用户ID
     * @param assetType 收藏资源文件类型,资源类型 1图片 2视频 3音频 4文件
     * @param pageNum 查询第N页收藏列表
     * @param pageSize 每页显示搜藏数
     */
    FavoritecontrollerApi.prototype.favoritePageListGet = function (params) {
        return exports.FavoritecontrollerApiFp.favoritePageListGet(params)(this.fetch, this.basePath);
    };
    return FavoritecontrollerApi;
}(BaseAPI));
exports.FavoritecontrollerApi = FavoritecontrollerApi;
;
/**
 * FavoritecontrollerApi - factory interface
 */
exports.FavoritecontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         * 批量添加多个资源到用户收藏
         * 批量添加多个资源到用户收藏，自动过滤了资源的重复收藏
         * @param userId 当前用户ID
         * @param assetIds 资源ID数组
         */
        favoriteCreatePost: function (params) {
            return exports.FavoritecontrollerApiFp.favoriteCreatePost(params)(fetch, basePath);
        },
        /**
         * 删除用户的部分收藏记录
         * 删除用户的部分收藏记录
         * @param userId 当前用户ID
         * @param assetIds 被取消收藏的资源id
         */
        favoriteDeleteDelete: function (params) {
            return exports.FavoritecontrollerApiFp.favoriteDeleteDelete(params)(fetch, basePath);
        },
        /**
         * 根据资源类型，分页查询收藏记录
         * 收藏资源分页查询，按收藏时间最新的在最前面，按收藏时间最新的在最前面，具体资源信息在调用资源对应查看接口
         * @param userId 用户ID
         * @param assetType 收藏资源文件类型,资源类型 1图片 2视频 3音频 4文件
         * @param pageNum 查询第N页收藏列表
         * @param pageSize 每页显示搜藏数
         */
        favoritePageListGet: function (params) {
            return exports.FavoritecontrollerApiFp.favoritePageListGet(params)(fetch, basePath);
        },
    };
};
/**
 * FolderItemsApi - fetch parameter creator
 */
exports.FolderItemsApiFetchParamCreactor = {
    /**
     * /count
     * 对于已经提交的资产，获取各个目录下的资产的个数
     * @param folderId folderId
     * @param provider provider
     * @param assetType assetType
     * @param reviewState reviewState
     * @param onlineState onlineState
     */
    folderitemsCountGet: function (params) {
        var baseUrl = "/folderitems/count";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "folderId": params.folderId,
            "provider": params.provider,
            "assetType": params.assetType,
            "reviewState": params.reviewState,
            "onlineState": params.onlineState,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /{folderId}
     * 在目录下删除资源
     * @param folderId folderId
     * @param assetIDs assetIDs
     */
    folderitemsFolderIdDelete: function (params) {
        // verify required parameter "folderId" is set
        if (params["folderId"] == null) {
            throw new Error("Missing required parameter folderId when calling folderitemsFolderIdDelete");
        }
        // verify required parameter "assetIDs" is set
        if (params["assetIDs"] == null) {
            throw new Error("Missing required parameter assetIDs when calling folderitemsFolderIdDelete");
        }
        var baseUrl = "/folderitems/{folderId}"
            .replace("{" + "folderId" + "}", "" + params.folderId);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "DELETE" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["assetIDs"]) {
            fetchOptions.body = JSON.stringify(params["assetIDs"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /{folderId}
     * 获取目录下的资源
     * @param folderId folderId
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param folderId2 folderId2
     * @param provider provider
     * @param assetType assetType
     * @param uploadState uploadState
     * @param reviewState reviewState
     * @param onlineState onlineState
     * @param orderBy orderBy
     */
    folderitemsFolderIdGet: function (params) {
        // verify required parameter "folderId" is set
        if (params["folderId"] == null) {
            throw new Error("Missing required parameter folderId when calling folderitemsFolderIdGet");
        }
        var baseUrl = "/folderitems/{folderId}"
            .replace("{" + "folderId" + "}", "" + params.folderId);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
            "folderId2": params.folderId2,
            "provider": params.provider,
            "assetType": params.assetType,
            "uploadState": params.uploadState,
            "reviewState": params.reviewState,
            "onlineState": params.onlineState,
            "orderBy": params.orderBy,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /{folderId}
     * 在目录下添加资源
     * @param folderId folderId
     * @param assetId assetId
     */
    folderitemsFolderIdPost: function (params) {
        // verify required parameter "folderId" is set
        if (params["folderId"] == null) {
            throw new Error("Missing required parameter folderId when calling folderitemsFolderIdPost");
        }
        // verify required parameter "assetId" is set
        if (params["assetId"] == null) {
            throw new Error("Missing required parameter assetId when calling folderitemsFolderIdPost");
        }
        var baseUrl = "/folderitems/{folderId}"
            .replace("{" + "folderId" + "}", "" + params.folderId);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["assetId"]) {
            fetchOptions.body = JSON.stringify(params["assetId"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /unInstockAssetsCount
     * 对于未入库的资产，获取各个目录下的资产的个数
     * @param folderId folderId
     * @param userId userId
     * @param assetType assetType
     */
    folderitemsUnInstockAssetsCountGet: function (params) {
        var baseUrl = "/folderitems/unInstockAssetsCount";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "folderId": params.folderId,
            "userId": params.userId,
            "assetType": params.assetType,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 根据目录id获取目录的资源
     * 用户用图，内容审核功能资源列表接口
     * @param folderId folderId
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param folderId2 folderId2
     * @param provider provider
     * @param assetType 资源类型
     * @param uploadState 资源上传状态
     * @param reviewState 资源审核状态
     * @param onlineState 资源上线状态
     * @param orderBy 排序方式
     * @param level 查看目录下n级以内的资源，0：只包括根目录资源，1：包括根目录和一级子目录资源，2：包括根目录，一级子目录，二级子目录资源... ...
     */
    folderitemsV2FolderIdGet: function (params) {
        // verify required parameter "folderId" is set
        if (params["folderId"] == null) {
            throw new Error("Missing required parameter folderId when calling folderitemsV2FolderIdGet");
        }
        var baseUrl = "/folderitems/v2/{folderId}"
            .replace("{" + "folderId" + "}", "" + params.folderId);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
            "folderId2": params.folderId2,
            "provider": params.provider,
            "assetType": params.assetType,
            "uploadState": params.uploadState,
            "reviewState": params.reviewState,
            "onlineState": params.onlineState,
            "orderBy": params.orderBy,
            "level": params.level,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * FolderItemsApi - functional programming interface
 */
exports.FolderItemsApiFp = {
    /**
     * /count
     * 对于已经提交的资产，获取各个目录下的资产的个数
     * @param folderId folderId
     * @param provider provider
     * @param assetType assetType
     * @param reviewState reviewState
     * @param onlineState onlineState
     */
    folderitemsCountGet: function (params) {
        var fetchArgs = exports.FolderItemsApiFetchParamCreactor.folderitemsCountGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /{folderId}
     * 在目录下删除资源
     * @param folderId folderId
     * @param assetIDs assetIDs
     */
    folderitemsFolderIdDelete: function (params) {
        var fetchArgs = exports.FolderItemsApiFetchParamCreactor.folderitemsFolderIdDelete(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /{folderId}
     * 获取目录下的资源
     * @param folderId folderId
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param folderId2 folderId2
     * @param provider provider
     * @param assetType assetType
     * @param uploadState uploadState
     * @param reviewState reviewState
     * @param onlineState onlineState
     * @param orderBy orderBy
     */
    folderitemsFolderIdGet: function (params) {
        var fetchArgs = exports.FolderItemsApiFetchParamCreactor.folderitemsFolderIdGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /{folderId}
     * 在目录下添加资源
     * @param folderId folderId
     * @param assetId assetId
     */
    folderitemsFolderIdPost: function (params) {
        var fetchArgs = exports.FolderItemsApiFetchParamCreactor.folderitemsFolderIdPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /unInstockAssetsCount
     * 对于未入库的资产，获取各个目录下的资产的个数
     * @param folderId folderId
     * @param userId userId
     * @param assetType assetType
     */
    folderitemsUnInstockAssetsCountGet: function (params) {
        var fetchArgs = exports.FolderItemsApiFetchParamCreactor.folderitemsUnInstockAssetsCountGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 根据目录id获取目录的资源
     * 用户用图，内容审核功能资源列表接口
     * @param folderId folderId
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param folderId2 folderId2
     * @param provider provider
     * @param assetType 资源类型
     * @param uploadState 资源上传状态
     * @param reviewState 资源审核状态
     * @param onlineState 资源上线状态
     * @param orderBy 排序方式
     * @param level 查看目录下n级以内的资源，0：只包括根目录资源，1：包括根目录和一级子目录资源，2：包括根目录，一级子目录，二级子目录资源... ...
     */
    folderitemsV2FolderIdGet: function (params) {
        var fetchArgs = exports.FolderItemsApiFetchParamCreactor.folderitemsV2FolderIdGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * FolderItemsApi - object-oriented interface
 */
var FolderItemsApi = (function (_super) {
    __extends(FolderItemsApi, _super);
    function FolderItemsApi() {
        _super.apply(this, arguments);
    }
    /**
     * /count
     * 对于已经提交的资产，获取各个目录下的资产的个数
     * @param folderId folderId
     * @param provider provider
     * @param assetType assetType
     * @param reviewState reviewState
     * @param onlineState onlineState
     */
    FolderItemsApi.prototype.folderitemsCountGet = function (params) {
        return exports.FolderItemsApiFp.folderitemsCountGet(params)(this.fetch, this.basePath);
    };
    /**
     * /{folderId}
     * 在目录下删除资源
     * @param folderId folderId
     * @param assetIDs assetIDs
     */
    FolderItemsApi.prototype.folderitemsFolderIdDelete = function (params) {
        return exports.FolderItemsApiFp.folderitemsFolderIdDelete(params)(this.fetch, this.basePath);
    };
    /**
     * /{folderId}
     * 获取目录下的资源
     * @param folderId folderId
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param folderId2 folderId2
     * @param provider provider
     * @param assetType assetType
     * @param uploadState uploadState
     * @param reviewState reviewState
     * @param onlineState onlineState
     * @param orderBy orderBy
     */
    FolderItemsApi.prototype.folderitemsFolderIdGet = function (params) {
        return exports.FolderItemsApiFp.folderitemsFolderIdGet(params)(this.fetch, this.basePath);
    };
    /**
     * /{folderId}
     * 在目录下添加资源
     * @param folderId folderId
     * @param assetId assetId
     */
    FolderItemsApi.prototype.folderitemsFolderIdPost = function (params) {
        return exports.FolderItemsApiFp.folderitemsFolderIdPost(params)(this.fetch, this.basePath);
    };
    /**
     * /unInstockAssetsCount
     * 对于未入库的资产，获取各个目录下的资产的个数
     * @param folderId folderId
     * @param userId userId
     * @param assetType assetType
     */
    FolderItemsApi.prototype.folderitemsUnInstockAssetsCountGet = function (params) {
        return exports.FolderItemsApiFp.folderitemsUnInstockAssetsCountGet(params)(this.fetch, this.basePath);
    };
    /**
     * 根据目录id获取目录的资源
     * 用户用图，内容审核功能资源列表接口
     * @param folderId folderId
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param folderId2 folderId2
     * @param provider provider
     * @param assetType 资源类型
     * @param uploadState 资源上传状态
     * @param reviewState 资源审核状态
     * @param onlineState 资源上线状态
     * @param orderBy 排序方式
     * @param level 查看目录下n级以内的资源，0：只包括根目录资源，1：包括根目录和一级子目录资源，2：包括根目录，一级子目录，二级子目录资源... ...
     */
    FolderItemsApi.prototype.folderitemsV2FolderIdGet = function (params) {
        return exports.FolderItemsApiFp.folderitemsV2FolderIdGet(params)(this.fetch, this.basePath);
    };
    return FolderItemsApi;
}(BaseAPI));
exports.FolderItemsApi = FolderItemsApi;
;
/**
 * FolderItemsApi - factory interface
 */
exports.FolderItemsApiFactory = function (fetch, basePath) {
    return {
        /**
         * /count
         * 对于已经提交的资产，获取各个目录下的资产的个数
         * @param folderId folderId
         * @param provider provider
         * @param assetType assetType
         * @param reviewState reviewState
         * @param onlineState onlineState
         */
        folderitemsCountGet: function (params) {
            return exports.FolderItemsApiFp.folderitemsCountGet(params)(fetch, basePath);
        },
        /**
         * /{folderId}
         * 在目录下删除资源
         * @param folderId folderId
         * @param assetIDs assetIDs
         */
        folderitemsFolderIdDelete: function (params) {
            return exports.FolderItemsApiFp.folderitemsFolderIdDelete(params)(fetch, basePath);
        },
        /**
         * /{folderId}
         * 获取目录下的资源
         * @param folderId folderId
         * @param pageNum pageNum
         * @param pageSize pageSize
         * @param folderId2 folderId2
         * @param provider provider
         * @param assetType assetType
         * @param uploadState uploadState
         * @param reviewState reviewState
         * @param onlineState onlineState
         * @param orderBy orderBy
         */
        folderitemsFolderIdGet: function (params) {
            return exports.FolderItemsApiFp.folderitemsFolderIdGet(params)(fetch, basePath);
        },
        /**
         * /{folderId}
         * 在目录下添加资源
         * @param folderId folderId
         * @param assetId assetId
         */
        folderitemsFolderIdPost: function (params) {
            return exports.FolderItemsApiFp.folderitemsFolderIdPost(params)(fetch, basePath);
        },
        /**
         * /unInstockAssetsCount
         * 对于未入库的资产，获取各个目录下的资产的个数
         * @param folderId folderId
         * @param userId userId
         * @param assetType assetType
         */
        folderitemsUnInstockAssetsCountGet: function (params) {
            return exports.FolderItemsApiFp.folderitemsUnInstockAssetsCountGet(params)(fetch, basePath);
        },
        /**
         * 根据目录id获取目录的资源
         * 用户用图，内容审核功能资源列表接口
         * @param folderId folderId
         * @param pageNum pageNum
         * @param pageSize pageSize
         * @param folderId2 folderId2
         * @param provider provider
         * @param assetType 资源类型
         * @param uploadState 资源上传状态
         * @param reviewState 资源审核状态
         * @param onlineState 资源上线状态
         * @param orderBy 排序方式
         * @param level 查看目录下n级以内的资源，0：只包括根目录资源，1：包括根目录和一级子目录资源，2：包括根目录，一级子目录，二级子目录资源... ...
         */
        folderitemsV2FolderIdGet: function (params) {
            return exports.FolderItemsApiFp.folderitemsV2FolderIdGet(params)(fetch, basePath);
        },
    };
};
/**
 * FoldersApi - fetch parameter creator
 */
exports.FoldersApiFetchParamCreactor = {
    /**
     * 拷贝目录到另一个目录中
     * 将A目录拷贝到B目录中，A为根节点的整棵子树都拷贝到B目录下。不允许拷贝到自己的子目录下；拷贝后的目录层级不能超过系统的最大层级；目标目录下不能存在和源目录同名的目录。返回结构是生成子树的根目录
     * @param sourceFolderId 被拷贝目录ID
     * @param targetFolderId 目的目录ID
     */
    foldersCopyPost: function (params) {
        var baseUrl = "/folders/copy";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "sourceFolderId": params.sourceFolderId,
            "targetFolderId": params.targetFolderId,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 获取指定目录符合条件的资源数，以及各自更下级目录是否还有符合条件的资源
     * 目的在于查询条件变化时，要保持目录树展开状态不变，同时更新目录上的资源数
     * @param folderIds 被统计目录id
     * @param providerId 资源提供人id，在图片上传页面只显示自己的图片所需要
     * @param assetType 资源类型：图片，视频， 音频。。。
     * @param uploadStates 资源上传状态
     * @param reviewState 资源审核状态
     * @param onlineState 资源上线状态
     * @param permissionUserId 当前用户ID，如果有此参数则查询此人权限范围内的目录，否则是全部目录。用户用途页面和内容上传页面需要此参数，内容审核页面不需要
     */
    foldersCountPost: function (params) {
        var baseUrl = "/folders/count";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "folderIds": params.folderIds,
            "providerId": params.providerId,
            "assetType": params.assetType,
            "uploadStates": params.uploadStates,
            "reviewState": params.reviewState,
            "onlineState": params.onlineState,
            "permissionUserId": params.permissionUserId,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 目录列表
     * 获取目录列表，如果没有关键字则查询所有目录
     * @param name 目录关键字
     */
    foldersGet: function (params) {
        var baseUrl = "/folders";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "name": params.name,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /{id}
     * 删除子目录
     * @param id id
     */
    foldersIdDelete: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling foldersIdDelete");
        }
        var baseUrl = "/folders/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "DELETE" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /{id}
     * 获取目录信息
     * @param id id
     */
    foldersIdGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling foldersIdGet");
        }
        var baseUrl = "/folders/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /{id}
     * 创建子目录，同一父目录下不准出现同名目录
     * @param id id
     * @param resFolderWeb resFolderWeb
     */
    foldersIdPost: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling foldersIdPost");
        }
        // verify required parameter "resFolderWeb" is set
        if (params["resFolderWeb"] == null) {
            throw new Error("Missing required parameter resFolderWeb when calling foldersIdPost");
        }
        var baseUrl = "/folders/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resFolderWeb"]) {
            fetchOptions.body = JSON.stringify(params["resFolderWeb"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /{id}
     * 更新子目录名称
     * @param id id
     * @param resFolder resFolder
     */
    foldersIdPut: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling foldersIdPut");
        }
        // verify required parameter "resFolder" is set
        if (params["resFolder"] == null) {
            throw new Error("Missing required parameter resFolder when calling foldersIdPut");
        }
        var baseUrl = "/folders/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "PUT" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resFolder"]) {
            fetchOptions.body = JSON.stringify(params["resFolder"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 获取某目录的子目录列表及孙子目录列表
     * 子目录列表用来树形结构展示，孙子目录用来判断所属子目录是否还有下级，显示下拉图标
     * @param id 当前目录id
     */
    foldersIdSubFoldersPost: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling foldersIdSubFoldersPost");
        }
        var baseUrl = "/folders/{id}/sub_folders"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 判断目录是否存在
     * 判断多个目录是否存在
     * @param folderIds folderIds
     */
    foldersIsBatchExistGet: function (params) {
        var baseUrl = "/folders/isBatchExist";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "folderIds": params.folderIds,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 判断目录是否存在
     * 判断目录是否存在
     * @param folderId folderId
     */
    foldersIsExistGet: function (params) {
        var baseUrl = "/folders/isExist";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "folderId": params.folderId,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 合并多个目录到新目录中
     * 被合并的目录必须是在同一个父目录下，合并后的新目录是在此父目录下新创建的。返回父目录下的全部一级子目录
     * @param parentId 当前合并目录的父目录ID
     * @param sourceFolderIds 被合并的多个目录的ID
     * @param targetFolderName 合并之后的新目录名称
     */
    foldersMergePost: function (params) {
        var baseUrl = "/folders/merge";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "parentId": params.parentId,
            "sourceFolderIds": params.sourceFolderIds,
            "targetFolderName": params.targetFolderName,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 移动一个目录到另一个目录下
     * 将源目录移动到目的目录下。不允许移动到自己的子目录下；移动后的目录层级不能超过系统的最大层级；目标目录下下不能存在和源目录同名的目录
     * @param sourceFolderId 被移动目录ID
     * @param targetFolderId 目的目录ID
     */
    foldersMovePost: function (params) {
        var baseUrl = "/folders/move";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "sourceFolderId": params.sourceFolderId,
            "targetFolderId": params.targetFolderId,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * FoldersApi - functional programming interface
 */
exports.FoldersApiFp = {
    /**
     * 拷贝目录到另一个目录中
     * 将A目录拷贝到B目录中，A为根节点的整棵子树都拷贝到B目录下。不允许拷贝到自己的子目录下；拷贝后的目录层级不能超过系统的最大层级；目标目录下不能存在和源目录同名的目录。返回结构是生成子树的根目录
     * @param sourceFolderId 被拷贝目录ID
     * @param targetFolderId 目的目录ID
     */
    foldersCopyPost: function (params) {
        var fetchArgs = exports.FoldersApiFetchParamCreactor.foldersCopyPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 获取指定目录符合条件的资源数，以及各自更下级目录是否还有符合条件的资源
     * 目的在于查询条件变化时，要保持目录树展开状态不变，同时更新目录上的资源数
     * @param folderIds 被统计目录id
     * @param providerId 资源提供人id，在图片上传页面只显示自己的图片所需要
     * @param assetType 资源类型：图片，视频， 音频。。。
     * @param uploadStates 资源上传状态
     * @param reviewState 资源审核状态
     * @param onlineState 资源上线状态
     * @param permissionUserId 当前用户ID，如果有此参数则查询此人权限范围内的目录，否则是全部目录。用户用途页面和内容上传页面需要此参数，内容审核页面不需要
     */
    foldersCountPost: function (params) {
        var fetchArgs = exports.FoldersApiFetchParamCreactor.foldersCountPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 目录列表
     * 获取目录列表，如果没有关键字则查询所有目录
     * @param name 目录关键字
     */
    foldersGet: function (params) {
        var fetchArgs = exports.FoldersApiFetchParamCreactor.foldersGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /{id}
     * 删除子目录
     * @param id id
     */
    foldersIdDelete: function (params) {
        var fetchArgs = exports.FoldersApiFetchParamCreactor.foldersIdDelete(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /{id}
     * 获取目录信息
     * @param id id
     */
    foldersIdGet: function (params) {
        var fetchArgs = exports.FoldersApiFetchParamCreactor.foldersIdGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /{id}
     * 创建子目录，同一父目录下不准出现同名目录
     * @param id id
     * @param resFolderWeb resFolderWeb
     */
    foldersIdPost: function (params) {
        var fetchArgs = exports.FoldersApiFetchParamCreactor.foldersIdPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /{id}
     * 更新子目录名称
     * @param id id
     * @param resFolder resFolder
     */
    foldersIdPut: function (params) {
        var fetchArgs = exports.FoldersApiFetchParamCreactor.foldersIdPut(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 获取某目录的子目录列表及孙子目录列表
     * 子目录列表用来树形结构展示，孙子目录用来判断所属子目录是否还有下级，显示下拉图标
     * @param id 当前目录id
     */
    foldersIdSubFoldersPost: function (params) {
        var fetchArgs = exports.FoldersApiFetchParamCreactor.foldersIdSubFoldersPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 判断目录是否存在
     * 判断多个目录是否存在
     * @param folderIds folderIds
     */
    foldersIsBatchExistGet: function (params) {
        var fetchArgs = exports.FoldersApiFetchParamCreactor.foldersIsBatchExistGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 判断目录是否存在
     * 判断目录是否存在
     * @param folderId folderId
     */
    foldersIsExistGet: function (params) {
        var fetchArgs = exports.FoldersApiFetchParamCreactor.foldersIsExistGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 合并多个目录到新目录中
     * 被合并的目录必须是在同一个父目录下，合并后的新目录是在此父目录下新创建的。返回父目录下的全部一级子目录
     * @param parentId 当前合并目录的父目录ID
     * @param sourceFolderIds 被合并的多个目录的ID
     * @param targetFolderName 合并之后的新目录名称
     */
    foldersMergePost: function (params) {
        var fetchArgs = exports.FoldersApiFetchParamCreactor.foldersMergePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * 移动一个目录到另一个目录下
     * 将源目录移动到目的目录下。不允许移动到自己的子目录下；移动后的目录层级不能超过系统的最大层级；目标目录下下不能存在和源目录同名的目录
     * @param sourceFolderId 被移动目录ID
     * @param targetFolderId 目的目录ID
     */
    foldersMovePost: function (params) {
        var fetchArgs = exports.FoldersApiFetchParamCreactor.foldersMovePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * FoldersApi - object-oriented interface
 */
var FoldersApi = (function (_super) {
    __extends(FoldersApi, _super);
    function FoldersApi() {
        _super.apply(this, arguments);
    }
    /**
     * 拷贝目录到另一个目录中
     * 将A目录拷贝到B目录中，A为根节点的整棵子树都拷贝到B目录下。不允许拷贝到自己的子目录下；拷贝后的目录层级不能超过系统的最大层级；目标目录下不能存在和源目录同名的目录。返回结构是生成子树的根目录
     * @param sourceFolderId 被拷贝目录ID
     * @param targetFolderId 目的目录ID
     */
    FoldersApi.prototype.foldersCopyPost = function (params) {
        return exports.FoldersApiFp.foldersCopyPost(params)(this.fetch, this.basePath);
    };
    /**
     * 获取指定目录符合条件的资源数，以及各自更下级目录是否还有符合条件的资源
     * 目的在于查询条件变化时，要保持目录树展开状态不变，同时更新目录上的资源数
     * @param folderIds 被统计目录id
     * @param providerId 资源提供人id，在图片上传页面只显示自己的图片所需要
     * @param assetType 资源类型：图片，视频， 音频。。。
     * @param uploadStates 资源上传状态
     * @param reviewState 资源审核状态
     * @param onlineState 资源上线状态
     * @param permissionUserId 当前用户ID，如果有此参数则查询此人权限范围内的目录，否则是全部目录。用户用途页面和内容上传页面需要此参数，内容审核页面不需要
     */
    FoldersApi.prototype.foldersCountPost = function (params) {
        return exports.FoldersApiFp.foldersCountPost(params)(this.fetch, this.basePath);
    };
    /**
     * 目录列表
     * 获取目录列表，如果没有关键字则查询所有目录
     * @param name 目录关键字
     */
    FoldersApi.prototype.foldersGet = function (params) {
        return exports.FoldersApiFp.foldersGet(params)(this.fetch, this.basePath);
    };
    /**
     * /{id}
     * 删除子目录
     * @param id id
     */
    FoldersApi.prototype.foldersIdDelete = function (params) {
        return exports.FoldersApiFp.foldersIdDelete(params)(this.fetch, this.basePath);
    };
    /**
     * /{id}
     * 获取目录信息
     * @param id id
     */
    FoldersApi.prototype.foldersIdGet = function (params) {
        return exports.FoldersApiFp.foldersIdGet(params)(this.fetch, this.basePath);
    };
    /**
     * /{id}
     * 创建子目录，同一父目录下不准出现同名目录
     * @param id id
     * @param resFolderWeb resFolderWeb
     */
    FoldersApi.prototype.foldersIdPost = function (params) {
        return exports.FoldersApiFp.foldersIdPost(params)(this.fetch, this.basePath);
    };
    /**
     * /{id}
     * 更新子目录名称
     * @param id id
     * @param resFolder resFolder
     */
    FoldersApi.prototype.foldersIdPut = function (params) {
        return exports.FoldersApiFp.foldersIdPut(params)(this.fetch, this.basePath);
    };
    /**
     * 获取某目录的子目录列表及孙子目录列表
     * 子目录列表用来树形结构展示，孙子目录用来判断所属子目录是否还有下级，显示下拉图标
     * @param id 当前目录id
     */
    FoldersApi.prototype.foldersIdSubFoldersPost = function (params) {
        return exports.FoldersApiFp.foldersIdSubFoldersPost(params)(this.fetch, this.basePath);
    };
    /**
     * 判断目录是否存在
     * 判断多个目录是否存在
     * @param folderIds folderIds
     */
    FoldersApi.prototype.foldersIsBatchExistGet = function (params) {
        return exports.FoldersApiFp.foldersIsBatchExistGet(params)(this.fetch, this.basePath);
    };
    /**
     * 判断目录是否存在
     * 判断目录是否存在
     * @param folderId folderId
     */
    FoldersApi.prototype.foldersIsExistGet = function (params) {
        return exports.FoldersApiFp.foldersIsExistGet(params)(this.fetch, this.basePath);
    };
    /**
     * 合并多个目录到新目录中
     * 被合并的目录必须是在同一个父目录下，合并后的新目录是在此父目录下新创建的。返回父目录下的全部一级子目录
     * @param parentId 当前合并目录的父目录ID
     * @param sourceFolderIds 被合并的多个目录的ID
     * @param targetFolderName 合并之后的新目录名称
     */
    FoldersApi.prototype.foldersMergePost = function (params) {
        return exports.FoldersApiFp.foldersMergePost(params)(this.fetch, this.basePath);
    };
    /**
     * 移动一个目录到另一个目录下
     * 将源目录移动到目的目录下。不允许移动到自己的子目录下；移动后的目录层级不能超过系统的最大层级；目标目录下下不能存在和源目录同名的目录
     * @param sourceFolderId 被移动目录ID
     * @param targetFolderId 目的目录ID
     */
    FoldersApi.prototype.foldersMovePost = function (params) {
        return exports.FoldersApiFp.foldersMovePost(params)(this.fetch, this.basePath);
    };
    return FoldersApi;
}(BaseAPI));
exports.FoldersApi = FoldersApi;
;
/**
 * FoldersApi - factory interface
 */
exports.FoldersApiFactory = function (fetch, basePath) {
    return {
        /**
         * 拷贝目录到另一个目录中
         * 将A目录拷贝到B目录中，A为根节点的整棵子树都拷贝到B目录下。不允许拷贝到自己的子目录下；拷贝后的目录层级不能超过系统的最大层级；目标目录下不能存在和源目录同名的目录。返回结构是生成子树的根目录
         * @param sourceFolderId 被拷贝目录ID
         * @param targetFolderId 目的目录ID
         */
        foldersCopyPost: function (params) {
            return exports.FoldersApiFp.foldersCopyPost(params)(fetch, basePath);
        },
        /**
         * 获取指定目录符合条件的资源数，以及各自更下级目录是否还有符合条件的资源
         * 目的在于查询条件变化时，要保持目录树展开状态不变，同时更新目录上的资源数
         * @param folderIds 被统计目录id
         * @param providerId 资源提供人id，在图片上传页面只显示自己的图片所需要
         * @param assetType 资源类型：图片，视频， 音频。。。
         * @param uploadStates 资源上传状态
         * @param reviewState 资源审核状态
         * @param onlineState 资源上线状态
         * @param permissionUserId 当前用户ID，如果有此参数则查询此人权限范围内的目录，否则是全部目录。用户用途页面和内容上传页面需要此参数，内容审核页面不需要
         */
        foldersCountPost: function (params) {
            return exports.FoldersApiFp.foldersCountPost(params)(fetch, basePath);
        },
        /**
         * 目录列表
         * 获取目录列表，如果没有关键字则查询所有目录
         * @param name 目录关键字
         */
        foldersGet: function (params) {
            return exports.FoldersApiFp.foldersGet(params)(fetch, basePath);
        },
        /**
         * /{id}
         * 删除子目录
         * @param id id
         */
        foldersIdDelete: function (params) {
            return exports.FoldersApiFp.foldersIdDelete(params)(fetch, basePath);
        },
        /**
         * /{id}
         * 获取目录信息
         * @param id id
         */
        foldersIdGet: function (params) {
            return exports.FoldersApiFp.foldersIdGet(params)(fetch, basePath);
        },
        /**
         * /{id}
         * 创建子目录，同一父目录下不准出现同名目录
         * @param id id
         * @param resFolderWeb resFolderWeb
         */
        foldersIdPost: function (params) {
            return exports.FoldersApiFp.foldersIdPost(params)(fetch, basePath);
        },
        /**
         * /{id}
         * 更新子目录名称
         * @param id id
         * @param resFolder resFolder
         */
        foldersIdPut: function (params) {
            return exports.FoldersApiFp.foldersIdPut(params)(fetch, basePath);
        },
        /**
         * 获取某目录的子目录列表及孙子目录列表
         * 子目录列表用来树形结构展示，孙子目录用来判断所属子目录是否还有下级，显示下拉图标
         * @param id 当前目录id
         */
        foldersIdSubFoldersPost: function (params) {
            return exports.FoldersApiFp.foldersIdSubFoldersPost(params)(fetch, basePath);
        },
        /**
         * 判断目录是否存在
         * 判断多个目录是否存在
         * @param folderIds folderIds
         */
        foldersIsBatchExistGet: function (params) {
            return exports.FoldersApiFp.foldersIsBatchExistGet(params)(fetch, basePath);
        },
        /**
         * 判断目录是否存在
         * 判断目录是否存在
         * @param folderId folderId
         */
        foldersIsExistGet: function (params) {
            return exports.FoldersApiFp.foldersIsExistGet(params)(fetch, basePath);
        },
        /**
         * 合并多个目录到新目录中
         * 被合并的目录必须是在同一个父目录下，合并后的新目录是在此父目录下新创建的。返回父目录下的全部一级子目录
         * @param parentId 当前合并目录的父目录ID
         * @param sourceFolderIds 被合并的多个目录的ID
         * @param targetFolderName 合并之后的新目录名称
         */
        foldersMergePost: function (params) {
            return exports.FoldersApiFp.foldersMergePost(params)(fetch, basePath);
        },
        /**
         * 移动一个目录到另一个目录下
         * 将源目录移动到目的目录下。不允许移动到自己的子目录下；移动后的目录层级不能超过系统的最大层级；目标目录下下不能存在和源目录同名的目录
         * @param sourceFolderId 被移动目录ID
         * @param targetFolderId 目的目录ID
         */
        foldersMovePost: function (params) {
            return exports.FoldersApiFp.foldersMovePost(params)(fetch, basePath);
        },
    };
};
/**
 * HealthApi - fetch parameter creator
 */
exports.HealthApiFetchParamCreactor = {
    /**
     * health
     */
    healthGet: function () {
        var baseUrl = "/health";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * HealthApi - functional programming interface
 */
exports.HealthApiFp = {
    /**
     * health
     */
    healthGet: function () {
        var fetchArgs = exports.HealthApiFetchParamCreactor.healthGet();
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * HealthApi - object-oriented interface
 */
var HealthApi = (function (_super) {
    __extends(HealthApi, _super);
    function HealthApi() {
        _super.apply(this, arguments);
    }
    /**
     * health
     */
    HealthApi.prototype.healthGet = function () {
        return exports.HealthApiFp.healthGet()(this.fetch, this.basePath);
    };
    return HealthApi;
}(BaseAPI));
exports.HealthApi = HealthApi;
;
/**
 * HealthApi - factory interface
 */
exports.HealthApiFactory = function (fetch, basePath) {
    return {
        /**
         * health
         */
        healthGet: function () {
            return exports.HealthApiFp.healthGet()(fetch, basePath);
        },
    };
};
/**
 * ImageExtensionsApi - fetch parameter creator
 */
exports.ImageExtensionsApiFetchParamCreactor = {
    /**
     * /
     * 修改图片扩展信息
     * @param id id
     */
    imageIdExtensionDelete: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling imageIdExtensionDelete");
        }
        var baseUrl = "/image/{id}/extension/"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "DELETE" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /
     * 获取图片扩展信息
     * @param id id
     */
    imageIdExtensionGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling imageIdExtensionGet");
        }
        var baseUrl = "/image/{id}/extension/"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /
     * 添加图片扩展信息
     * @param id id
     * @param resImageExtend resImageExtend
     */
    imageIdExtensionPost: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling imageIdExtensionPost");
        }
        // verify required parameter "resImageExtend" is set
        if (params["resImageExtend"] == null) {
            throw new Error("Missing required parameter resImageExtend when calling imageIdExtensionPost");
        }
        var baseUrl = "/image/{id}/extension/"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageExtend"]) {
            fetchOptions.body = JSON.stringify(params["resImageExtend"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /
     * 修改图片扩展信息
     * @param id id
     * @param resImageExtend resImageExtend
     */
    imageIdExtensionPut: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling imageIdExtensionPut");
        }
        // verify required parameter "resImageExtend" is set
        if (params["resImageExtend"] == null) {
            throw new Error("Missing required parameter resImageExtend when calling imageIdExtensionPut");
        }
        var baseUrl = "/image/{id}/extension/"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "PUT" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageExtend"]) {
            fetchOptions.body = JSON.stringify(params["resImageExtend"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * ImageExtensionsApi - functional programming interface
 */
exports.ImageExtensionsApiFp = {
    /**
     * /
     * 修改图片扩展信息
     * @param id id
     */
    imageIdExtensionDelete: function (params) {
        var fetchArgs = exports.ImageExtensionsApiFetchParamCreactor.imageIdExtensionDelete(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /
     * 获取图片扩展信息
     * @param id id
     */
    imageIdExtensionGet: function (params) {
        var fetchArgs = exports.ImageExtensionsApiFetchParamCreactor.imageIdExtensionGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /
     * 添加图片扩展信息
     * @param id id
     * @param resImageExtend resImageExtend
     */
    imageIdExtensionPost: function (params) {
        var fetchArgs = exports.ImageExtensionsApiFetchParamCreactor.imageIdExtensionPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /
     * 修改图片扩展信息
     * @param id id
     * @param resImageExtend resImageExtend
     */
    imageIdExtensionPut: function (params) {
        var fetchArgs = exports.ImageExtensionsApiFetchParamCreactor.imageIdExtensionPut(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * ImageExtensionsApi - object-oriented interface
 */
var ImageExtensionsApi = (function (_super) {
    __extends(ImageExtensionsApi, _super);
    function ImageExtensionsApi() {
        _super.apply(this, arguments);
    }
    /**
     * /
     * 修改图片扩展信息
     * @param id id
     */
    ImageExtensionsApi.prototype.imageIdExtensionDelete = function (params) {
        return exports.ImageExtensionsApiFp.imageIdExtensionDelete(params)(this.fetch, this.basePath);
    };
    /**
     * /
     * 获取图片扩展信息
     * @param id id
     */
    ImageExtensionsApi.prototype.imageIdExtensionGet = function (params) {
        return exports.ImageExtensionsApiFp.imageIdExtensionGet(params)(this.fetch, this.basePath);
    };
    /**
     * /
     * 添加图片扩展信息
     * @param id id
     * @param resImageExtend resImageExtend
     */
    ImageExtensionsApi.prototype.imageIdExtensionPost = function (params) {
        return exports.ImageExtensionsApiFp.imageIdExtensionPost(params)(this.fetch, this.basePath);
    };
    /**
     * /
     * 修改图片扩展信息
     * @param id id
     * @param resImageExtend resImageExtend
     */
    ImageExtensionsApi.prototype.imageIdExtensionPut = function (params) {
        return exports.ImageExtensionsApiFp.imageIdExtensionPut(params)(this.fetch, this.basePath);
    };
    return ImageExtensionsApi;
}(BaseAPI));
exports.ImageExtensionsApi = ImageExtensionsApi;
;
/**
 * ImageExtensionsApi - factory interface
 */
exports.ImageExtensionsApiFactory = function (fetch, basePath) {
    return {
        /**
         * /
         * 修改图片扩展信息
         * @param id id
         */
        imageIdExtensionDelete: function (params) {
            return exports.ImageExtensionsApiFp.imageIdExtensionDelete(params)(fetch, basePath);
        },
        /**
         * /
         * 获取图片扩展信息
         * @param id id
         */
        imageIdExtensionGet: function (params) {
            return exports.ImageExtensionsApiFp.imageIdExtensionGet(params)(fetch, basePath);
        },
        /**
         * /
         * 添加图片扩展信息
         * @param id id
         * @param resImageExtend resImageExtend
         */
        imageIdExtensionPost: function (params) {
            return exports.ImageExtensionsApiFp.imageIdExtensionPost(params)(fetch, basePath);
        },
        /**
         * /
         * 修改图片扩展信息
         * @param id id
         * @param resImageExtend resImageExtend
         */
        imageIdExtensionPut: function (params) {
            return exports.ImageExtensionsApiFp.imageIdExtensionPut(params)(fetch, basePath);
        },
    };
};
/**
 * ImagesApi - fetch parameter creator
 */
exports.ImagesApiFetchParamCreactor = {
    /**
     * /batch
     * 批量获取图片信息
     * @param ids ids
     */
    imagesBatchPost: function (params) {
        // verify required parameter "ids" is set
        if (params["ids"] == null) {
            throw new Error("Missing required parameter ids when calling imagesBatchPost");
        }
        var baseUrl = "/images/batch";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["ids"]) {
            fetchOptions.body = JSON.stringify(params["ids"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /
     * 批量删除图片
     * @param ids ids
     */
    imagesDelete: function (params) {
        // verify required parameter "ids" is set
        if (params["ids"] == null) {
            throw new Error("Missing required parameter ids when calling imagesDelete");
        }
        var baseUrl = "/images/";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "DELETE" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["ids"]) {
            fetchOptions.body = JSON.stringify(params["ids"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /{id}
     * 删除单张图片
     * @param id id
     */
    imagesIdDelete: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling imagesIdDelete");
        }
        var baseUrl = "/images/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "DELETE" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /{id}/exif
     * 获取单张图片exif信息
     * @param id id
     */
    imagesIdExifGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling imagesIdExifGet");
        }
        var baseUrl = "/images/{id}/exif"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /{id}/folders
     * 获取单张图片所在目录列表
     * @param id id
     */
    imagesIdFoldersGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling imagesIdFoldersGet");
        }
        var baseUrl = "/images/{id}/folders"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /{id}
     * 获取图片信息
     * @param id id
     */
    imagesIdGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling imagesIdGet");
        }
        var baseUrl = "/images/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /{id}
     * 修改单张图片
     * @param id id
     * @param resImageWeb resImageWeb
     */
    imagesIdPut: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling imagesIdPut");
        }
        // verify required parameter "resImageWeb" is set
        if (params["resImageWeb"] == null) {
            throw new Error("Missing required parameter resImageWeb when calling imagesIdPut");
        }
        var baseUrl = "/images/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "PUT" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageWeb"]) {
            fetchOptions.body = JSON.stringify(params["resImageWeb"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /{id}/rotation
     * 旋转图片
     * @param id id
     * @param rotation rotation
     * @param keepOrigin keepOrigin
     */
    imagesIdRotationPut: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling imagesIdRotationPut");
        }
        // verify required parameter "rotation" is set
        if (params["rotation"] == null) {
            throw new Error("Missing required parameter rotation when calling imagesIdRotationPut");
        }
        var baseUrl = "/images/{id}/rotation"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "rotation": params.rotation,
            "keepOrigin": params.keepOrigin,
        });
        var fetchOptions = { method: "PUT" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /page
     * 分页获取仓库中所有的图片信息
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    imagesPageGet: function (params) {
        var baseUrl = "/images/page";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * create
     * 创建图片
     * @param resImageWeb resImageWeb
     */
    imagesPost: function (params) {
        // verify required parameter "resImageWeb" is set
        if (params["resImageWeb"] == null) {
            throw new Error("Missing required parameter resImageWeb when calling imagesPost");
        }
        var baseUrl = "/images";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageWeb"]) {
            fetchOptions.body = JSON.stringify(params["resImageWeb"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * ImagesApi - functional programming interface
 */
exports.ImagesApiFp = {
    /**
     * /batch
     * 批量获取图片信息
     * @param ids ids
     */
    imagesBatchPost: function (params) {
        var fetchArgs = exports.ImagesApiFetchParamCreactor.imagesBatchPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /
     * 批量删除图片
     * @param ids ids
     */
    imagesDelete: function (params) {
        var fetchArgs = exports.ImagesApiFetchParamCreactor.imagesDelete(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /{id}
     * 删除单张图片
     * @param id id
     */
    imagesIdDelete: function (params) {
        var fetchArgs = exports.ImagesApiFetchParamCreactor.imagesIdDelete(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /{id}/exif
     * 获取单张图片exif信息
     * @param id id
     */
    imagesIdExifGet: function (params) {
        var fetchArgs = exports.ImagesApiFetchParamCreactor.imagesIdExifGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /{id}/folders
     * 获取单张图片所在目录列表
     * @param id id
     */
    imagesIdFoldersGet: function (params) {
        var fetchArgs = exports.ImagesApiFetchParamCreactor.imagesIdFoldersGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /{id}
     * 获取图片信息
     * @param id id
     */
    imagesIdGet: function (params) {
        var fetchArgs = exports.ImagesApiFetchParamCreactor.imagesIdGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /{id}
     * 修改单张图片
     * @param id id
     * @param resImageWeb resImageWeb
     */
    imagesIdPut: function (params) {
        var fetchArgs = exports.ImagesApiFetchParamCreactor.imagesIdPut(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /{id}/rotation
     * 旋转图片
     * @param id id
     * @param rotation rotation
     * @param keepOrigin keepOrigin
     */
    imagesIdRotationPut: function (params) {
        var fetchArgs = exports.ImagesApiFetchParamCreactor.imagesIdRotationPut(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /page
     * 分页获取仓库中所有的图片信息
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    imagesPageGet: function (params) {
        var fetchArgs = exports.ImagesApiFetchParamCreactor.imagesPageGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * create
     * 创建图片
     * @param resImageWeb resImageWeb
     */
    imagesPost: function (params) {
        var fetchArgs = exports.ImagesApiFetchParamCreactor.imagesPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * ImagesApi - object-oriented interface
 */
var ImagesApi = (function (_super) {
    __extends(ImagesApi, _super);
    function ImagesApi() {
        _super.apply(this, arguments);
    }
    /**
     * /batch
     * 批量获取图片信息
     * @param ids ids
     */
    ImagesApi.prototype.imagesBatchPost = function (params) {
        return exports.ImagesApiFp.imagesBatchPost(params)(this.fetch, this.basePath);
    };
    /**
     * /
     * 批量删除图片
     * @param ids ids
     */
    ImagesApi.prototype.imagesDelete = function (params) {
        return exports.ImagesApiFp.imagesDelete(params)(this.fetch, this.basePath);
    };
    /**
     * /{id}
     * 删除单张图片
     * @param id id
     */
    ImagesApi.prototype.imagesIdDelete = function (params) {
        return exports.ImagesApiFp.imagesIdDelete(params)(this.fetch, this.basePath);
    };
    /**
     * /{id}/exif
     * 获取单张图片exif信息
     * @param id id
     */
    ImagesApi.prototype.imagesIdExifGet = function (params) {
        return exports.ImagesApiFp.imagesIdExifGet(params)(this.fetch, this.basePath);
    };
    /**
     * /{id}/folders
     * 获取单张图片所在目录列表
     * @param id id
     */
    ImagesApi.prototype.imagesIdFoldersGet = function (params) {
        return exports.ImagesApiFp.imagesIdFoldersGet(params)(this.fetch, this.basePath);
    };
    /**
     * /{id}
     * 获取图片信息
     * @param id id
     */
    ImagesApi.prototype.imagesIdGet = function (params) {
        return exports.ImagesApiFp.imagesIdGet(params)(this.fetch, this.basePath);
    };
    /**
     * /{id}
     * 修改单张图片
     * @param id id
     * @param resImageWeb resImageWeb
     */
    ImagesApi.prototype.imagesIdPut = function (params) {
        return exports.ImagesApiFp.imagesIdPut(params)(this.fetch, this.basePath);
    };
    /**
     * /{id}/rotation
     * 旋转图片
     * @param id id
     * @param rotation rotation
     * @param keepOrigin keepOrigin
     */
    ImagesApi.prototype.imagesIdRotationPut = function (params) {
        return exports.ImagesApiFp.imagesIdRotationPut(params)(this.fetch, this.basePath);
    };
    /**
     * /page
     * 分页获取仓库中所有的图片信息
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    ImagesApi.prototype.imagesPageGet = function (params) {
        return exports.ImagesApiFp.imagesPageGet(params)(this.fetch, this.basePath);
    };
    /**
     * create
     * 创建图片
     * @param resImageWeb resImageWeb
     */
    ImagesApi.prototype.imagesPost = function (params) {
        return exports.ImagesApiFp.imagesPost(params)(this.fetch, this.basePath);
    };
    return ImagesApi;
}(BaseAPI));
exports.ImagesApi = ImagesApi;
;
/**
 * ImagesApi - factory interface
 */
exports.ImagesApiFactory = function (fetch, basePath) {
    return {
        /**
         * /batch
         * 批量获取图片信息
         * @param ids ids
         */
        imagesBatchPost: function (params) {
            return exports.ImagesApiFp.imagesBatchPost(params)(fetch, basePath);
        },
        /**
         * /
         * 批量删除图片
         * @param ids ids
         */
        imagesDelete: function (params) {
            return exports.ImagesApiFp.imagesDelete(params)(fetch, basePath);
        },
        /**
         * /{id}
         * 删除单张图片
         * @param id id
         */
        imagesIdDelete: function (params) {
            return exports.ImagesApiFp.imagesIdDelete(params)(fetch, basePath);
        },
        /**
         * /{id}/exif
         * 获取单张图片exif信息
         * @param id id
         */
        imagesIdExifGet: function (params) {
            return exports.ImagesApiFp.imagesIdExifGet(params)(fetch, basePath);
        },
        /**
         * /{id}/folders
         * 获取单张图片所在目录列表
         * @param id id
         */
        imagesIdFoldersGet: function (params) {
            return exports.ImagesApiFp.imagesIdFoldersGet(params)(fetch, basePath);
        },
        /**
         * /{id}
         * 获取图片信息
         * @param id id
         */
        imagesIdGet: function (params) {
            return exports.ImagesApiFp.imagesIdGet(params)(fetch, basePath);
        },
        /**
         * /{id}
         * 修改单张图片
         * @param id id
         * @param resImageWeb resImageWeb
         */
        imagesIdPut: function (params) {
            return exports.ImagesApiFp.imagesIdPut(params)(fetch, basePath);
        },
        /**
         * /{id}/rotation
         * 旋转图片
         * @param id id
         * @param rotation rotation
         * @param keepOrigin keepOrigin
         */
        imagesIdRotationPut: function (params) {
            return exports.ImagesApiFp.imagesIdRotationPut(params)(fetch, basePath);
        },
        /**
         * /page
         * 分页获取仓库中所有的图片信息
         * @param pageNum pageNum
         * @param pageSize pageSize
         */
        imagesPageGet: function (params) {
            return exports.ImagesApiFp.imagesPageGet(params)(fetch, basePath);
        },
        /**
         * create
         * 创建图片
         * @param resImageWeb resImageWeb
         */
        imagesPost: function (params) {
            return exports.ImagesApiFp.imagesPost(params)(fetch, basePath);
        },
    };
};
/**
 * InApi - fetch parameter creator
 */
exports.InApiFetchParamCreactor = {
    /**
     * /
     * 入库
     * @param ids ids
     * @param autoPass autoPass
     */
    instocksPost: function (params) {
        // verify required parameter "ids" is set
        if (params["ids"] == null) {
            throw new Error("Missing required parameter ids when calling instocksPost");
        }
        var baseUrl = "/instocks/";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "autoPass": params.autoPass,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["ids"]) {
            fetchOptions.body = JSON.stringify(params["ids"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * InApi - functional programming interface
 */
exports.InApiFp = {
    /**
     * /
     * 入库
     * @param ids ids
     * @param autoPass autoPass
     */
    instocksPost: function (params) {
        var fetchArgs = exports.InApiFetchParamCreactor.instocksPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * InApi - object-oriented interface
 */
var InApi = (function (_super) {
    __extends(InApi, _super);
    function InApi() {
        _super.apply(this, arguments);
    }
    /**
     * /
     * 入库
     * @param ids ids
     * @param autoPass autoPass
     */
    InApi.prototype.instocksPost = function (params) {
        return exports.InApiFp.instocksPost(params)(this.fetch, this.basePath);
    };
    return InApi;
}(BaseAPI));
exports.InApi = InApi;
;
/**
 * InApi - factory interface
 */
exports.InApiFactory = function (fetch, basePath) {
    return {
        /**
         * /
         * 入库
         * @param ids ids
         * @param autoPass autoPass
         */
        instocksPost: function (params) {
            return exports.InApiFp.instocksPost(params)(fetch, basePath);
        },
    };
};
/**
 * ResaudiouploadcontrollerApi - fetch parameter creator
 */
exports.ResaudiouploadcontrollerApiFetchParamCreactor = {
    /**
     * create
     * @param resAudioUpload resAudioUpload
     */
    resAudioUploadCreatePost: function (params) {
        // verify required parameter "resAudioUpload" is set
        if (params["resAudioUpload"] == null) {
            throw new Error("Missing required parameter resAudioUpload when calling resAudioUploadCreatePost");
        }
        var baseUrl = "/resAudioUpload/create";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resAudioUpload"]) {
            fetchOptions.body = JSON.stringify(params["resAudioUpload"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * delete
     * @param ids ids
     */
    resAudioUploadDeletePost: function (params) {
        // verify required parameter "ids" is set
        if (params["ids"] == null) {
            throw new Error("Missing required parameter ids when calling resAudioUploadDeletePost");
        }
        var baseUrl = "/resAudioUpload/delete";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["ids"]) {
            fetchOptions.body = JSON.stringify(params["ids"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * list
     * @param resAudioUpload resAudioUpload
     */
    resAudioUploadListGet: function (params) {
        var baseUrl = "/resAudioUpload/list";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resAudioUpload"]) {
            fetchOptions.body = JSON.stringify(params["resAudioUpload"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * list
     * @param resAudioUpload resAudioUpload
     */
    resAudioUploadListPost: function (params) {
        var baseUrl = "/resAudioUpload/list";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resAudioUpload"]) {
            fetchOptions.body = JSON.stringify(params["resAudioUpload"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * pageList
     * @param resAudioUpload resAudioUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    resAudioUploadPageListGet: function (params) {
        var baseUrl = "/resAudioUpload/pageList";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resAudioUpload"]) {
            fetchOptions.body = JSON.stringify(params["resAudioUpload"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * pageList
     * @param resAudioUpload resAudioUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    resAudioUploadPageListPost: function (params) {
        var baseUrl = "/resAudioUpload/pageList";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resAudioUpload"]) {
            fetchOptions.body = JSON.stringify(params["resAudioUpload"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * update
     * @param resAudioUpload resAudioUpload
     */
    resAudioUploadUpdatePost: function (params) {
        // verify required parameter "resAudioUpload" is set
        if (params["resAudioUpload"] == null) {
            throw new Error("Missing required parameter resAudioUpload when calling resAudioUploadUpdatePost");
        }
        var baseUrl = "/resAudioUpload/update";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resAudioUpload"]) {
            fetchOptions.body = JSON.stringify(params["resAudioUpload"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * view
     * @param id id
     */
    resAudioUploadViewGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling resAudioUploadViewGet");
        }
        var baseUrl = "/resAudioUpload/view";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "id": params.id,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * ResaudiouploadcontrollerApi - functional programming interface
 */
exports.ResaudiouploadcontrollerApiFp = {
    /**
     * create
     * @param resAudioUpload resAudioUpload
     */
    resAudioUploadCreatePost: function (params) {
        var fetchArgs = exports.ResaudiouploadcontrollerApiFetchParamCreactor.resAudioUploadCreatePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * delete
     * @param ids ids
     */
    resAudioUploadDeletePost: function (params) {
        var fetchArgs = exports.ResaudiouploadcontrollerApiFetchParamCreactor.resAudioUploadDeletePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * list
     * @param resAudioUpload resAudioUpload
     */
    resAudioUploadListGet: function (params) {
        var fetchArgs = exports.ResaudiouploadcontrollerApiFetchParamCreactor.resAudioUploadListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * list
     * @param resAudioUpload resAudioUpload
     */
    resAudioUploadListPost: function (params) {
        var fetchArgs = exports.ResaudiouploadcontrollerApiFetchParamCreactor.resAudioUploadListPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * pageList
     * @param resAudioUpload resAudioUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    resAudioUploadPageListGet: function (params) {
        var fetchArgs = exports.ResaudiouploadcontrollerApiFetchParamCreactor.resAudioUploadPageListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * pageList
     * @param resAudioUpload resAudioUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    resAudioUploadPageListPost: function (params) {
        var fetchArgs = exports.ResaudiouploadcontrollerApiFetchParamCreactor.resAudioUploadPageListPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * update
     * @param resAudioUpload resAudioUpload
     */
    resAudioUploadUpdatePost: function (params) {
        var fetchArgs = exports.ResaudiouploadcontrollerApiFetchParamCreactor.resAudioUploadUpdatePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * view
     * @param id id
     */
    resAudioUploadViewGet: function (params) {
        var fetchArgs = exports.ResaudiouploadcontrollerApiFetchParamCreactor.resAudioUploadViewGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * ResaudiouploadcontrollerApi - object-oriented interface
 */
var ResaudiouploadcontrollerApi = (function (_super) {
    __extends(ResaudiouploadcontrollerApi, _super);
    function ResaudiouploadcontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     * create
     * @param resAudioUpload resAudioUpload
     */
    ResaudiouploadcontrollerApi.prototype.resAudioUploadCreatePost = function (params) {
        return exports.ResaudiouploadcontrollerApiFp.resAudioUploadCreatePost(params)(this.fetch, this.basePath);
    };
    /**
     * delete
     * @param ids ids
     */
    ResaudiouploadcontrollerApi.prototype.resAudioUploadDeletePost = function (params) {
        return exports.ResaudiouploadcontrollerApiFp.resAudioUploadDeletePost(params)(this.fetch, this.basePath);
    };
    /**
     * list
     * @param resAudioUpload resAudioUpload
     */
    ResaudiouploadcontrollerApi.prototype.resAudioUploadListGet = function (params) {
        return exports.ResaudiouploadcontrollerApiFp.resAudioUploadListGet(params)(this.fetch, this.basePath);
    };
    /**
     * list
     * @param resAudioUpload resAudioUpload
     */
    ResaudiouploadcontrollerApi.prototype.resAudioUploadListPost = function (params) {
        return exports.ResaudiouploadcontrollerApiFp.resAudioUploadListPost(params)(this.fetch, this.basePath);
    };
    /**
     * pageList
     * @param resAudioUpload resAudioUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    ResaudiouploadcontrollerApi.prototype.resAudioUploadPageListGet = function (params) {
        return exports.ResaudiouploadcontrollerApiFp.resAudioUploadPageListGet(params)(this.fetch, this.basePath);
    };
    /**
     * pageList
     * @param resAudioUpload resAudioUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    ResaudiouploadcontrollerApi.prototype.resAudioUploadPageListPost = function (params) {
        return exports.ResaudiouploadcontrollerApiFp.resAudioUploadPageListPost(params)(this.fetch, this.basePath);
    };
    /**
     * update
     * @param resAudioUpload resAudioUpload
     */
    ResaudiouploadcontrollerApi.prototype.resAudioUploadUpdatePost = function (params) {
        return exports.ResaudiouploadcontrollerApiFp.resAudioUploadUpdatePost(params)(this.fetch, this.basePath);
    };
    /**
     * view
     * @param id id
     */
    ResaudiouploadcontrollerApi.prototype.resAudioUploadViewGet = function (params) {
        return exports.ResaudiouploadcontrollerApiFp.resAudioUploadViewGet(params)(this.fetch, this.basePath);
    };
    return ResaudiouploadcontrollerApi;
}(BaseAPI));
exports.ResaudiouploadcontrollerApi = ResaudiouploadcontrollerApi;
;
/**
 * ResaudiouploadcontrollerApi - factory interface
 */
exports.ResaudiouploadcontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         * create
         * @param resAudioUpload resAudioUpload
         */
        resAudioUploadCreatePost: function (params) {
            return exports.ResaudiouploadcontrollerApiFp.resAudioUploadCreatePost(params)(fetch, basePath);
        },
        /**
         * delete
         * @param ids ids
         */
        resAudioUploadDeletePost: function (params) {
            return exports.ResaudiouploadcontrollerApiFp.resAudioUploadDeletePost(params)(fetch, basePath);
        },
        /**
         * list
         * @param resAudioUpload resAudioUpload
         */
        resAudioUploadListGet: function (params) {
            return exports.ResaudiouploadcontrollerApiFp.resAudioUploadListGet(params)(fetch, basePath);
        },
        /**
         * list
         * @param resAudioUpload resAudioUpload
         */
        resAudioUploadListPost: function (params) {
            return exports.ResaudiouploadcontrollerApiFp.resAudioUploadListPost(params)(fetch, basePath);
        },
        /**
         * pageList
         * @param resAudioUpload resAudioUpload
         * @param pageNum pageNum
         * @param pageSize pageSize
         */
        resAudioUploadPageListGet: function (params) {
            return exports.ResaudiouploadcontrollerApiFp.resAudioUploadPageListGet(params)(fetch, basePath);
        },
        /**
         * pageList
         * @param resAudioUpload resAudioUpload
         * @param pageNum pageNum
         * @param pageSize pageSize
         */
        resAudioUploadPageListPost: function (params) {
            return exports.ResaudiouploadcontrollerApiFp.resAudioUploadPageListPost(params)(fetch, basePath);
        },
        /**
         * update
         * @param resAudioUpload resAudioUpload
         */
        resAudioUploadUpdatePost: function (params) {
            return exports.ResaudiouploadcontrollerApiFp.resAudioUploadUpdatePost(params)(fetch, basePath);
        },
        /**
         * view
         * @param id id
         */
        resAudioUploadViewGet: function (params) {
            return exports.ResaudiouploadcontrollerApiFp.resAudioUploadViewGet(params)(fetch, basePath);
        },
    };
};
/**
 * ResimageuploadbatchcontrollerApi - fetch parameter creator
 */
exports.ResimageuploadbatchcontrollerApiFetchParamCreactor = {
    /**
     * create
     * @param resImageUploadBatch resImageUploadBatch
     */
    resImageUploadBatchCreatePost: function (params) {
        // verify required parameter "resImageUploadBatch" is set
        if (params["resImageUploadBatch"] == null) {
            throw new Error("Missing required parameter resImageUploadBatch when calling resImageUploadBatchCreatePost");
        }
        var baseUrl = "/resImageUploadBatch/create";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUploadBatch"]) {
            fetchOptions.body = JSON.stringify(params["resImageUploadBatch"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * delete
     * @param ids ids
     */
    resImageUploadBatchDeletePost: function (params) {
        // verify required parameter "ids" is set
        if (params["ids"] == null) {
            throw new Error("Missing required parameter ids when calling resImageUploadBatchDeletePost");
        }
        var baseUrl = "/resImageUploadBatch/delete";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["ids"]) {
            fetchOptions.body = JSON.stringify(params["ids"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * list
     * @param resImageUploadBatch resImageUploadBatch
     */
    resImageUploadBatchListGet: function (params) {
        var baseUrl = "/resImageUploadBatch/list";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUploadBatch"]) {
            fetchOptions.body = JSON.stringify(params["resImageUploadBatch"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * list
     * @param resImageUploadBatch resImageUploadBatch
     */
    resImageUploadBatchListPost: function (params) {
        var baseUrl = "/resImageUploadBatch/list";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUploadBatch"]) {
            fetchOptions.body = JSON.stringify(params["resImageUploadBatch"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * pageList
     * @param resImageUploadBatch resImageUploadBatch
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    resImageUploadBatchPageListGet: function (params) {
        var baseUrl = "/resImageUploadBatch/pageList";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUploadBatch"]) {
            fetchOptions.body = JSON.stringify(params["resImageUploadBatch"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * pageList
     * @param resImageUploadBatch resImageUploadBatch
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    resImageUploadBatchPageListPost: function (params) {
        var baseUrl = "/resImageUploadBatch/pageList";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUploadBatch"]) {
            fetchOptions.body = JSON.stringify(params["resImageUploadBatch"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * update
     * @param resImageUploadBatch resImageUploadBatch
     */
    resImageUploadBatchUpdatePost: function (params) {
        // verify required parameter "resImageUploadBatch" is set
        if (params["resImageUploadBatch"] == null) {
            throw new Error("Missing required parameter resImageUploadBatch when calling resImageUploadBatchUpdatePost");
        }
        var baseUrl = "/resImageUploadBatch/update";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUploadBatch"]) {
            fetchOptions.body = JSON.stringify(params["resImageUploadBatch"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * view
     * @param id id
     */
    resImageUploadBatchViewGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling resImageUploadBatchViewGet");
        }
        var baseUrl = "/resImageUploadBatch/view";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "id": params.id,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * ResimageuploadbatchcontrollerApi - functional programming interface
 */
exports.ResimageuploadbatchcontrollerApiFp = {
    /**
     * create
     * @param resImageUploadBatch resImageUploadBatch
     */
    resImageUploadBatchCreatePost: function (params) {
        var fetchArgs = exports.ResimageuploadbatchcontrollerApiFetchParamCreactor.resImageUploadBatchCreatePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * delete
     * @param ids ids
     */
    resImageUploadBatchDeletePost: function (params) {
        var fetchArgs = exports.ResimageuploadbatchcontrollerApiFetchParamCreactor.resImageUploadBatchDeletePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * list
     * @param resImageUploadBatch resImageUploadBatch
     */
    resImageUploadBatchListGet: function (params) {
        var fetchArgs = exports.ResimageuploadbatchcontrollerApiFetchParamCreactor.resImageUploadBatchListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * list
     * @param resImageUploadBatch resImageUploadBatch
     */
    resImageUploadBatchListPost: function (params) {
        var fetchArgs = exports.ResimageuploadbatchcontrollerApiFetchParamCreactor.resImageUploadBatchListPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * pageList
     * @param resImageUploadBatch resImageUploadBatch
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    resImageUploadBatchPageListGet: function (params) {
        var fetchArgs = exports.ResimageuploadbatchcontrollerApiFetchParamCreactor.resImageUploadBatchPageListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * pageList
     * @param resImageUploadBatch resImageUploadBatch
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    resImageUploadBatchPageListPost: function (params) {
        var fetchArgs = exports.ResimageuploadbatchcontrollerApiFetchParamCreactor.resImageUploadBatchPageListPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * update
     * @param resImageUploadBatch resImageUploadBatch
     */
    resImageUploadBatchUpdatePost: function (params) {
        var fetchArgs = exports.ResimageuploadbatchcontrollerApiFetchParamCreactor.resImageUploadBatchUpdatePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * view
     * @param id id
     */
    resImageUploadBatchViewGet: function (params) {
        var fetchArgs = exports.ResimageuploadbatchcontrollerApiFetchParamCreactor.resImageUploadBatchViewGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * ResimageuploadbatchcontrollerApi - object-oriented interface
 */
var ResimageuploadbatchcontrollerApi = (function (_super) {
    __extends(ResimageuploadbatchcontrollerApi, _super);
    function ResimageuploadbatchcontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     * create
     * @param resImageUploadBatch resImageUploadBatch
     */
    ResimageuploadbatchcontrollerApi.prototype.resImageUploadBatchCreatePost = function (params) {
        return exports.ResimageuploadbatchcontrollerApiFp.resImageUploadBatchCreatePost(params)(this.fetch, this.basePath);
    };
    /**
     * delete
     * @param ids ids
     */
    ResimageuploadbatchcontrollerApi.prototype.resImageUploadBatchDeletePost = function (params) {
        return exports.ResimageuploadbatchcontrollerApiFp.resImageUploadBatchDeletePost(params)(this.fetch, this.basePath);
    };
    /**
     * list
     * @param resImageUploadBatch resImageUploadBatch
     */
    ResimageuploadbatchcontrollerApi.prototype.resImageUploadBatchListGet = function (params) {
        return exports.ResimageuploadbatchcontrollerApiFp.resImageUploadBatchListGet(params)(this.fetch, this.basePath);
    };
    /**
     * list
     * @param resImageUploadBatch resImageUploadBatch
     */
    ResimageuploadbatchcontrollerApi.prototype.resImageUploadBatchListPost = function (params) {
        return exports.ResimageuploadbatchcontrollerApiFp.resImageUploadBatchListPost(params)(this.fetch, this.basePath);
    };
    /**
     * pageList
     * @param resImageUploadBatch resImageUploadBatch
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    ResimageuploadbatchcontrollerApi.prototype.resImageUploadBatchPageListGet = function (params) {
        return exports.ResimageuploadbatchcontrollerApiFp.resImageUploadBatchPageListGet(params)(this.fetch, this.basePath);
    };
    /**
     * pageList
     * @param resImageUploadBatch resImageUploadBatch
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    ResimageuploadbatchcontrollerApi.prototype.resImageUploadBatchPageListPost = function (params) {
        return exports.ResimageuploadbatchcontrollerApiFp.resImageUploadBatchPageListPost(params)(this.fetch, this.basePath);
    };
    /**
     * update
     * @param resImageUploadBatch resImageUploadBatch
     */
    ResimageuploadbatchcontrollerApi.prototype.resImageUploadBatchUpdatePost = function (params) {
        return exports.ResimageuploadbatchcontrollerApiFp.resImageUploadBatchUpdatePost(params)(this.fetch, this.basePath);
    };
    /**
     * view
     * @param id id
     */
    ResimageuploadbatchcontrollerApi.prototype.resImageUploadBatchViewGet = function (params) {
        return exports.ResimageuploadbatchcontrollerApiFp.resImageUploadBatchViewGet(params)(this.fetch, this.basePath);
    };
    return ResimageuploadbatchcontrollerApi;
}(BaseAPI));
exports.ResimageuploadbatchcontrollerApi = ResimageuploadbatchcontrollerApi;
;
/**
 * ResimageuploadbatchcontrollerApi - factory interface
 */
exports.ResimageuploadbatchcontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         * create
         * @param resImageUploadBatch resImageUploadBatch
         */
        resImageUploadBatchCreatePost: function (params) {
            return exports.ResimageuploadbatchcontrollerApiFp.resImageUploadBatchCreatePost(params)(fetch, basePath);
        },
        /**
         * delete
         * @param ids ids
         */
        resImageUploadBatchDeletePost: function (params) {
            return exports.ResimageuploadbatchcontrollerApiFp.resImageUploadBatchDeletePost(params)(fetch, basePath);
        },
        /**
         * list
         * @param resImageUploadBatch resImageUploadBatch
         */
        resImageUploadBatchListGet: function (params) {
            return exports.ResimageuploadbatchcontrollerApiFp.resImageUploadBatchListGet(params)(fetch, basePath);
        },
        /**
         * list
         * @param resImageUploadBatch resImageUploadBatch
         */
        resImageUploadBatchListPost: function (params) {
            return exports.ResimageuploadbatchcontrollerApiFp.resImageUploadBatchListPost(params)(fetch, basePath);
        },
        /**
         * pageList
         * @param resImageUploadBatch resImageUploadBatch
         * @param pageNum pageNum
         * @param pageSize pageSize
         */
        resImageUploadBatchPageListGet: function (params) {
            return exports.ResimageuploadbatchcontrollerApiFp.resImageUploadBatchPageListGet(params)(fetch, basePath);
        },
        /**
         * pageList
         * @param resImageUploadBatch resImageUploadBatch
         * @param pageNum pageNum
         * @param pageSize pageSize
         */
        resImageUploadBatchPageListPost: function (params) {
            return exports.ResimageuploadbatchcontrollerApiFp.resImageUploadBatchPageListPost(params)(fetch, basePath);
        },
        /**
         * update
         * @param resImageUploadBatch resImageUploadBatch
         */
        resImageUploadBatchUpdatePost: function (params) {
            return exports.ResimageuploadbatchcontrollerApiFp.resImageUploadBatchUpdatePost(params)(fetch, basePath);
        },
        /**
         * view
         * @param id id
         */
        resImageUploadBatchViewGet: function (params) {
            return exports.ResimageuploadbatchcontrollerApiFp.resImageUploadBatchViewGet(params)(fetch, basePath);
        },
    };
};
/**
 * ResimageuploadcontrollerApi - fetch parameter creator
 */
exports.ResimageuploadcontrollerApiFetchParamCreactor = {
    /**
     * delete
     * @param folderId folderId
     * @param ids ids
     */
    resImageUploadBatchDelByIdsFolderIdGet: function (params) {
        // verify required parameter "folderId" is set
        if (params["folderId"] == null) {
            throw new Error("Missing required parameter folderId when calling resImageUploadBatchDelByIdsFolderIdGet");
        }
        var baseUrl = "/resImageUpload/batchDelByIds/{folderId}"
            .replace("{" + "folderId" + "}", "" + params.folderId);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "ids": params.ids,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * batchUpdate
     * @param resImageUpload resImageUpload
     * @param userId userId
     * @param assetsId assetsId
     */
    resImageUploadBatchUpdatePost: function (params) {
        // verify required parameter "resImageUpload" is set
        if (params["resImageUpload"] == null) {
            throw new Error("Missing required parameter resImageUpload when calling resImageUploadBatchUpdatePost");
        }
        var baseUrl = "/resImageUpload/batchUpdate";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "userId": params.userId,
            "assetsId": params.assetsId,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUpload"]) {
            fetchOptions.body = JSON.stringify(params["resImageUpload"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * create
     * @param resImageUpload resImageUpload
     */
    resImageUploadCreatePost: function (params) {
        // verify required parameter "resImageUpload" is set
        if (params["resImageUpload"] == null) {
            throw new Error("Missing required parameter resImageUpload when calling resImageUploadCreatePost");
        }
        var baseUrl = "/resImageUpload/create";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUpload"]) {
            fetchOptions.body = JSON.stringify(params["resImageUpload"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * del
     * @param id id
     * @param folderId folderId
     */
    resImageUploadDelByIdFolderIdGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling resImageUploadDelByIdFolderIdGet");
        }
        // verify required parameter "folderId" is set
        if (params["folderId"] == null) {
            throw new Error("Missing required parameter folderId when calling resImageUploadDelByIdFolderIdGet");
        }
        var baseUrl = "/resImageUpload/delById/{folderId}"
            .replace("{" + "folderId" + "}", "" + params.folderId);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "id": params.id,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * folderUploads
     * 取得目录已有的上传图片列表,不区分是哪个用户上传的
     * @param id id
     * @param resImageUpload resImageUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    resImageUploadFolderUploadsIdGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling resImageUploadFolderUploadsIdGet");
        }
        var baseUrl = "/resImageUpload/folderUploads/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUpload"]) {
            fetchOptions.body = JSON.stringify(params["resImageUpload"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /{id}/exif
     * 获取单张图片exif信息
     * @param id id
     */
    resImageUploadIdExifGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling resImageUploadIdExifGet");
        }
        var baseUrl = "/resImageUpload/{id}/exif"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * list
     * @param resImageUpload resImageUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    resImageUploadListGet: function (params) {
        var baseUrl = "/resImageUpload/list";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUpload"]) {
            fetchOptions.body = JSON.stringify(params["resImageUpload"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * list
     * @param resImageUpload resImageUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    resImageUploadListPost: function (params) {
        var baseUrl = "/resImageUpload/list";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUpload"]) {
            fetchOptions.body = JSON.stringify(params["resImageUpload"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * myFolderUpload
     * 取得目录已有的且是当前用户上传图片列表
     * @param folderId folderId
     * @param resImageUpload resImageUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param userId userId
     */
    resImageUploadMyFolderUploadGet: function (params) {
        // verify required parameter "folderId" is set
        if (params["folderId"] == null) {
            throw new Error("Missing required parameter folderId when calling resImageUploadMyFolderUploadGet");
        }
        var baseUrl = "/resImageUpload/myFolderUpload";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
            "userId": params.userId,
            "folderId": params.folderId,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUpload"]) {
            fetchOptions.body = JSON.stringify(params["resImageUpload"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * list
     * @param resImageUpload resImageUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param userId userId
     */
    resImageUploadMyUploadGet: function (params) {
        var baseUrl = "/resImageUpload/myUpload";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
            "userId": params.userId,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUpload"]) {
            fetchOptions.body = JSON.stringify(params["resImageUpload"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * list
     * @param resImageUpload resImageUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param userId userId
     */
    resImageUploadMyUploadPost: function (params) {
        var baseUrl = "/resImageUpload/myUpload";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
            "userId": params.userId,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUpload"]) {
            fetchOptions.body = JSON.stringify(params["resImageUpload"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /rotate
     * 顺时针旋转图片,默认顺时针90°；执行完成后，原图，缩略图，1024图均旋转。
     * @param id id
     * @param angle angle
     */
    resImageUploadRotateIdGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling resImageUploadRotateIdGet");
        }
        var baseUrl = "/resImageUpload/rotate/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "angle": params.angle,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * testResize
     * @param id id
     * @param heigth heigth
     * @param width width
     */
    resImageUploadTestResizeIdGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling resImageUploadTestResizeIdGet");
        }
        var baseUrl = "/resImageUpload/testResize/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "heigth": params.heigth,
            "width": params.width,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * update
     * @param resImageUpload resImageUpload
     * @param userId userId
     */
    resImageUploadUpdateIdPost: function (params) {
        // verify required parameter "resImageUpload" is set
        if (params["resImageUpload"] == null) {
            throw new Error("Missing required parameter resImageUpload when calling resImageUploadUpdateIdPost");
        }
        var baseUrl = "/resImageUpload/update/{id}";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "userId": params.userId,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUpload"]) {
            fetchOptions.body = JSON.stringify(params["resImageUpload"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * view
     * @param id id
     */
    resImageUploadViewIdGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling resImageUploadViewIdGet");
        }
        var baseUrl = "/resImageUpload/view/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * ResimageuploadcontrollerApi - functional programming interface
 */
exports.ResimageuploadcontrollerApiFp = {
    /**
     * delete
     * @param folderId folderId
     * @param ids ids
     */
    resImageUploadBatchDelByIdsFolderIdGet: function (params) {
        var fetchArgs = exports.ResimageuploadcontrollerApiFetchParamCreactor.resImageUploadBatchDelByIdsFolderIdGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * batchUpdate
     * @param resImageUpload resImageUpload
     * @param userId userId
     * @param assetsId assetsId
     */
    resImageUploadBatchUpdatePost: function (params) {
        var fetchArgs = exports.ResimageuploadcontrollerApiFetchParamCreactor.resImageUploadBatchUpdatePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * create
     * @param resImageUpload resImageUpload
     */
    resImageUploadCreatePost: function (params) {
        var fetchArgs = exports.ResimageuploadcontrollerApiFetchParamCreactor.resImageUploadCreatePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * del
     * @param id id
     * @param folderId folderId
     */
    resImageUploadDelByIdFolderIdGet: function (params) {
        var fetchArgs = exports.ResimageuploadcontrollerApiFetchParamCreactor.resImageUploadDelByIdFolderIdGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * folderUploads
     * 取得目录已有的上传图片列表,不区分是哪个用户上传的
     * @param id id
     * @param resImageUpload resImageUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    resImageUploadFolderUploadsIdGet: function (params) {
        var fetchArgs = exports.ResimageuploadcontrollerApiFetchParamCreactor.resImageUploadFolderUploadsIdGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /{id}/exif
     * 获取单张图片exif信息
     * @param id id
     */
    resImageUploadIdExifGet: function (params) {
        var fetchArgs = exports.ResimageuploadcontrollerApiFetchParamCreactor.resImageUploadIdExifGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * list
     * @param resImageUpload resImageUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    resImageUploadListGet: function (params) {
        var fetchArgs = exports.ResimageuploadcontrollerApiFetchParamCreactor.resImageUploadListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * list
     * @param resImageUpload resImageUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    resImageUploadListPost: function (params) {
        var fetchArgs = exports.ResimageuploadcontrollerApiFetchParamCreactor.resImageUploadListPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * myFolderUpload
     * 取得目录已有的且是当前用户上传图片列表
     * @param folderId folderId
     * @param resImageUpload resImageUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param userId userId
     */
    resImageUploadMyFolderUploadGet: function (params) {
        var fetchArgs = exports.ResimageuploadcontrollerApiFetchParamCreactor.resImageUploadMyFolderUploadGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * list
     * @param resImageUpload resImageUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param userId userId
     */
    resImageUploadMyUploadGet: function (params) {
        var fetchArgs = exports.ResimageuploadcontrollerApiFetchParamCreactor.resImageUploadMyUploadGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * list
     * @param resImageUpload resImageUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param userId userId
     */
    resImageUploadMyUploadPost: function (params) {
        var fetchArgs = exports.ResimageuploadcontrollerApiFetchParamCreactor.resImageUploadMyUploadPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /rotate
     * 顺时针旋转图片,默认顺时针90°；执行完成后，原图，缩略图，1024图均旋转。
     * @param id id
     * @param angle angle
     */
    resImageUploadRotateIdGet: function (params) {
        var fetchArgs = exports.ResimageuploadcontrollerApiFetchParamCreactor.resImageUploadRotateIdGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * testResize
     * @param id id
     * @param heigth heigth
     * @param width width
     */
    resImageUploadTestResizeIdGet: function (params) {
        var fetchArgs = exports.ResimageuploadcontrollerApiFetchParamCreactor.resImageUploadTestResizeIdGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * update
     * @param resImageUpload resImageUpload
     * @param userId userId
     */
    resImageUploadUpdateIdPost: function (params) {
        var fetchArgs = exports.ResimageuploadcontrollerApiFetchParamCreactor.resImageUploadUpdateIdPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * view
     * @param id id
     */
    resImageUploadViewIdGet: function (params) {
        var fetchArgs = exports.ResimageuploadcontrollerApiFetchParamCreactor.resImageUploadViewIdGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * ResimageuploadcontrollerApi - object-oriented interface
 */
var ResimageuploadcontrollerApi = (function (_super) {
    __extends(ResimageuploadcontrollerApi, _super);
    function ResimageuploadcontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     * delete
     * @param folderId folderId
     * @param ids ids
     */
    ResimageuploadcontrollerApi.prototype.resImageUploadBatchDelByIdsFolderIdGet = function (params) {
        return exports.ResimageuploadcontrollerApiFp.resImageUploadBatchDelByIdsFolderIdGet(params)(this.fetch, this.basePath);
    };
    /**
     * batchUpdate
     * @param resImageUpload resImageUpload
     * @param userId userId
     * @param assetsId assetsId
     */
    ResimageuploadcontrollerApi.prototype.resImageUploadBatchUpdatePost = function (params) {
        return exports.ResimageuploadcontrollerApiFp.resImageUploadBatchUpdatePost(params)(this.fetch, this.basePath);
    };
    /**
     * create
     * @param resImageUpload resImageUpload
     */
    ResimageuploadcontrollerApi.prototype.resImageUploadCreatePost = function (params) {
        return exports.ResimageuploadcontrollerApiFp.resImageUploadCreatePost(params)(this.fetch, this.basePath);
    };
    /**
     * del
     * @param id id
     * @param folderId folderId
     */
    ResimageuploadcontrollerApi.prototype.resImageUploadDelByIdFolderIdGet = function (params) {
        return exports.ResimageuploadcontrollerApiFp.resImageUploadDelByIdFolderIdGet(params)(this.fetch, this.basePath);
    };
    /**
     * folderUploads
     * 取得目录已有的上传图片列表,不区分是哪个用户上传的
     * @param id id
     * @param resImageUpload resImageUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    ResimageuploadcontrollerApi.prototype.resImageUploadFolderUploadsIdGet = function (params) {
        return exports.ResimageuploadcontrollerApiFp.resImageUploadFolderUploadsIdGet(params)(this.fetch, this.basePath);
    };
    /**
     * /{id}/exif
     * 获取单张图片exif信息
     * @param id id
     */
    ResimageuploadcontrollerApi.prototype.resImageUploadIdExifGet = function (params) {
        return exports.ResimageuploadcontrollerApiFp.resImageUploadIdExifGet(params)(this.fetch, this.basePath);
    };
    /**
     * list
     * @param resImageUpload resImageUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    ResimageuploadcontrollerApi.prototype.resImageUploadListGet = function (params) {
        return exports.ResimageuploadcontrollerApiFp.resImageUploadListGet(params)(this.fetch, this.basePath);
    };
    /**
     * list
     * @param resImageUpload resImageUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    ResimageuploadcontrollerApi.prototype.resImageUploadListPost = function (params) {
        return exports.ResimageuploadcontrollerApiFp.resImageUploadListPost(params)(this.fetch, this.basePath);
    };
    /**
     * myFolderUpload
     * 取得目录已有的且是当前用户上传图片列表
     * @param folderId folderId
     * @param resImageUpload resImageUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param userId userId
     */
    ResimageuploadcontrollerApi.prototype.resImageUploadMyFolderUploadGet = function (params) {
        return exports.ResimageuploadcontrollerApiFp.resImageUploadMyFolderUploadGet(params)(this.fetch, this.basePath);
    };
    /**
     * list
     * @param resImageUpload resImageUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param userId userId
     */
    ResimageuploadcontrollerApi.prototype.resImageUploadMyUploadGet = function (params) {
        return exports.ResimageuploadcontrollerApiFp.resImageUploadMyUploadGet(params)(this.fetch, this.basePath);
    };
    /**
     * list
     * @param resImageUpload resImageUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param userId userId
     */
    ResimageuploadcontrollerApi.prototype.resImageUploadMyUploadPost = function (params) {
        return exports.ResimageuploadcontrollerApiFp.resImageUploadMyUploadPost(params)(this.fetch, this.basePath);
    };
    /**
     * /rotate
     * 顺时针旋转图片,默认顺时针90°；执行完成后，原图，缩略图，1024图均旋转。
     * @param id id
     * @param angle angle
     */
    ResimageuploadcontrollerApi.prototype.resImageUploadRotateIdGet = function (params) {
        return exports.ResimageuploadcontrollerApiFp.resImageUploadRotateIdGet(params)(this.fetch, this.basePath);
    };
    /**
     * testResize
     * @param id id
     * @param heigth heigth
     * @param width width
     */
    ResimageuploadcontrollerApi.prototype.resImageUploadTestResizeIdGet = function (params) {
        return exports.ResimageuploadcontrollerApiFp.resImageUploadTestResizeIdGet(params)(this.fetch, this.basePath);
    };
    /**
     * update
     * @param resImageUpload resImageUpload
     * @param userId userId
     */
    ResimageuploadcontrollerApi.prototype.resImageUploadUpdateIdPost = function (params) {
        return exports.ResimageuploadcontrollerApiFp.resImageUploadUpdateIdPost(params)(this.fetch, this.basePath);
    };
    /**
     * view
     * @param id id
     */
    ResimageuploadcontrollerApi.prototype.resImageUploadViewIdGet = function (params) {
        return exports.ResimageuploadcontrollerApiFp.resImageUploadViewIdGet(params)(this.fetch, this.basePath);
    };
    return ResimageuploadcontrollerApi;
}(BaseAPI));
exports.ResimageuploadcontrollerApi = ResimageuploadcontrollerApi;
;
/**
 * ResimageuploadcontrollerApi - factory interface
 */
exports.ResimageuploadcontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         * delete
         * @param folderId folderId
         * @param ids ids
         */
        resImageUploadBatchDelByIdsFolderIdGet: function (params) {
            return exports.ResimageuploadcontrollerApiFp.resImageUploadBatchDelByIdsFolderIdGet(params)(fetch, basePath);
        },
        /**
         * batchUpdate
         * @param resImageUpload resImageUpload
         * @param userId userId
         * @param assetsId assetsId
         */
        resImageUploadBatchUpdatePost: function (params) {
            return exports.ResimageuploadcontrollerApiFp.resImageUploadBatchUpdatePost(params)(fetch, basePath);
        },
        /**
         * create
         * @param resImageUpload resImageUpload
         */
        resImageUploadCreatePost: function (params) {
            return exports.ResimageuploadcontrollerApiFp.resImageUploadCreatePost(params)(fetch, basePath);
        },
        /**
         * del
         * @param id id
         * @param folderId folderId
         */
        resImageUploadDelByIdFolderIdGet: function (params) {
            return exports.ResimageuploadcontrollerApiFp.resImageUploadDelByIdFolderIdGet(params)(fetch, basePath);
        },
        /**
         * folderUploads
         * 取得目录已有的上传图片列表,不区分是哪个用户上传的
         * @param id id
         * @param resImageUpload resImageUpload
         * @param pageNum pageNum
         * @param pageSize pageSize
         */
        resImageUploadFolderUploadsIdGet: function (params) {
            return exports.ResimageuploadcontrollerApiFp.resImageUploadFolderUploadsIdGet(params)(fetch, basePath);
        },
        /**
         * /{id}/exif
         * 获取单张图片exif信息
         * @param id id
         */
        resImageUploadIdExifGet: function (params) {
            return exports.ResimageuploadcontrollerApiFp.resImageUploadIdExifGet(params)(fetch, basePath);
        },
        /**
         * list
         * @param resImageUpload resImageUpload
         * @param pageNum pageNum
         * @param pageSize pageSize
         */
        resImageUploadListGet: function (params) {
            return exports.ResimageuploadcontrollerApiFp.resImageUploadListGet(params)(fetch, basePath);
        },
        /**
         * list
         * @param resImageUpload resImageUpload
         * @param pageNum pageNum
         * @param pageSize pageSize
         */
        resImageUploadListPost: function (params) {
            return exports.ResimageuploadcontrollerApiFp.resImageUploadListPost(params)(fetch, basePath);
        },
        /**
         * myFolderUpload
         * 取得目录已有的且是当前用户上传图片列表
         * @param folderId folderId
         * @param resImageUpload resImageUpload
         * @param pageNum pageNum
         * @param pageSize pageSize
         * @param userId userId
         */
        resImageUploadMyFolderUploadGet: function (params) {
            return exports.ResimageuploadcontrollerApiFp.resImageUploadMyFolderUploadGet(params)(fetch, basePath);
        },
        /**
         * list
         * @param resImageUpload resImageUpload
         * @param pageNum pageNum
         * @param pageSize pageSize
         * @param userId userId
         */
        resImageUploadMyUploadGet: function (params) {
            return exports.ResimageuploadcontrollerApiFp.resImageUploadMyUploadGet(params)(fetch, basePath);
        },
        /**
         * list
         * @param resImageUpload resImageUpload
         * @param pageNum pageNum
         * @param pageSize pageSize
         * @param userId userId
         */
        resImageUploadMyUploadPost: function (params) {
            return exports.ResimageuploadcontrollerApiFp.resImageUploadMyUploadPost(params)(fetch, basePath);
        },
        /**
         * /rotate
         * 顺时针旋转图片,默认顺时针90°；执行完成后，原图，缩略图，1024图均旋转。
         * @param id id
         * @param angle angle
         */
        resImageUploadRotateIdGet: function (params) {
            return exports.ResimageuploadcontrollerApiFp.resImageUploadRotateIdGet(params)(fetch, basePath);
        },
        /**
         * testResize
         * @param id id
         * @param heigth heigth
         * @param width width
         */
        resImageUploadTestResizeIdGet: function (params) {
            return exports.ResimageuploadcontrollerApiFp.resImageUploadTestResizeIdGet(params)(fetch, basePath);
        },
        /**
         * update
         * @param resImageUpload resImageUpload
         * @param userId userId
         */
        resImageUploadUpdateIdPost: function (params) {
            return exports.ResimageuploadcontrollerApiFp.resImageUploadUpdateIdPost(params)(fetch, basePath);
        },
        /**
         * view
         * @param id id
         */
        resImageUploadViewIdGet: function (params) {
            return exports.ResimageuploadcontrollerApiFp.resImageUploadViewIdGet(params)(fetch, basePath);
        },
    };
};
/**
 * ResimageuploadmetacontrollerApi - fetch parameter creator
 */
exports.ResimageuploadmetacontrollerApiFetchParamCreactor = {
    /**
     * create
     * @param resImageUploadMeta resImageUploadMeta
     */
    resImageUploadMetaCreatePost: function (params) {
        // verify required parameter "resImageUploadMeta" is set
        if (params["resImageUploadMeta"] == null) {
            throw new Error("Missing required parameter resImageUploadMeta when calling resImageUploadMetaCreatePost");
        }
        var baseUrl = "/resImageUploadMeta/create";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUploadMeta"]) {
            fetchOptions.body = JSON.stringify(params["resImageUploadMeta"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * delete
     * @param ids ids
     */
    resImageUploadMetaDeletePost: function (params) {
        // verify required parameter "ids" is set
        if (params["ids"] == null) {
            throw new Error("Missing required parameter ids when calling resImageUploadMetaDeletePost");
        }
        var baseUrl = "/resImageUploadMeta/delete";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["ids"]) {
            fetchOptions.body = JSON.stringify(params["ids"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * list
     * @param resImageUploadMeta resImageUploadMeta
     */
    resImageUploadMetaListGet: function (params) {
        var baseUrl = "/resImageUploadMeta/list";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUploadMeta"]) {
            fetchOptions.body = JSON.stringify(params["resImageUploadMeta"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * list
     * @param resImageUploadMeta resImageUploadMeta
     */
    resImageUploadMetaListPost: function (params) {
        var baseUrl = "/resImageUploadMeta/list";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUploadMeta"]) {
            fetchOptions.body = JSON.stringify(params["resImageUploadMeta"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * pageList
     * @param resImageUploadMeta resImageUploadMeta
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    resImageUploadMetaPageListGet: function (params) {
        var baseUrl = "/resImageUploadMeta/pageList";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUploadMeta"]) {
            fetchOptions.body = JSON.stringify(params["resImageUploadMeta"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * pageList
     * @param resImageUploadMeta resImageUploadMeta
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    resImageUploadMetaPageListPost: function (params) {
        var baseUrl = "/resImageUploadMeta/pageList";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUploadMeta"]) {
            fetchOptions.body = JSON.stringify(params["resImageUploadMeta"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * update
     * @param resImageUploadMeta resImageUploadMeta
     */
    resImageUploadMetaUpdatePost: function (params) {
        // verify required parameter "resImageUploadMeta" is set
        if (params["resImageUploadMeta"] == null) {
            throw new Error("Missing required parameter resImageUploadMeta when calling resImageUploadMetaUpdatePost");
        }
        var baseUrl = "/resImageUploadMeta/update";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUploadMeta"]) {
            fetchOptions.body = JSON.stringify(params["resImageUploadMeta"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * view
     * @param id id
     */
    resImageUploadMetaViewGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling resImageUploadMetaViewGet");
        }
        var baseUrl = "/resImageUploadMeta/view";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "id": params.id,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * ResimageuploadmetacontrollerApi - functional programming interface
 */
exports.ResimageuploadmetacontrollerApiFp = {
    /**
     * create
     * @param resImageUploadMeta resImageUploadMeta
     */
    resImageUploadMetaCreatePost: function (params) {
        var fetchArgs = exports.ResimageuploadmetacontrollerApiFetchParamCreactor.resImageUploadMetaCreatePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * delete
     * @param ids ids
     */
    resImageUploadMetaDeletePost: function (params) {
        var fetchArgs = exports.ResimageuploadmetacontrollerApiFetchParamCreactor.resImageUploadMetaDeletePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * list
     * @param resImageUploadMeta resImageUploadMeta
     */
    resImageUploadMetaListGet: function (params) {
        var fetchArgs = exports.ResimageuploadmetacontrollerApiFetchParamCreactor.resImageUploadMetaListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * list
     * @param resImageUploadMeta resImageUploadMeta
     */
    resImageUploadMetaListPost: function (params) {
        var fetchArgs = exports.ResimageuploadmetacontrollerApiFetchParamCreactor.resImageUploadMetaListPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * pageList
     * @param resImageUploadMeta resImageUploadMeta
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    resImageUploadMetaPageListGet: function (params) {
        var fetchArgs = exports.ResimageuploadmetacontrollerApiFetchParamCreactor.resImageUploadMetaPageListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * pageList
     * @param resImageUploadMeta resImageUploadMeta
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    resImageUploadMetaPageListPost: function (params) {
        var fetchArgs = exports.ResimageuploadmetacontrollerApiFetchParamCreactor.resImageUploadMetaPageListPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * update
     * @param resImageUploadMeta resImageUploadMeta
     */
    resImageUploadMetaUpdatePost: function (params) {
        var fetchArgs = exports.ResimageuploadmetacontrollerApiFetchParamCreactor.resImageUploadMetaUpdatePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * view
     * @param id id
     */
    resImageUploadMetaViewGet: function (params) {
        var fetchArgs = exports.ResimageuploadmetacontrollerApiFetchParamCreactor.resImageUploadMetaViewGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * ResimageuploadmetacontrollerApi - object-oriented interface
 */
var ResimageuploadmetacontrollerApi = (function (_super) {
    __extends(ResimageuploadmetacontrollerApi, _super);
    function ResimageuploadmetacontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     * create
     * @param resImageUploadMeta resImageUploadMeta
     */
    ResimageuploadmetacontrollerApi.prototype.resImageUploadMetaCreatePost = function (params) {
        return exports.ResimageuploadmetacontrollerApiFp.resImageUploadMetaCreatePost(params)(this.fetch, this.basePath);
    };
    /**
     * delete
     * @param ids ids
     */
    ResimageuploadmetacontrollerApi.prototype.resImageUploadMetaDeletePost = function (params) {
        return exports.ResimageuploadmetacontrollerApiFp.resImageUploadMetaDeletePost(params)(this.fetch, this.basePath);
    };
    /**
     * list
     * @param resImageUploadMeta resImageUploadMeta
     */
    ResimageuploadmetacontrollerApi.prototype.resImageUploadMetaListGet = function (params) {
        return exports.ResimageuploadmetacontrollerApiFp.resImageUploadMetaListGet(params)(this.fetch, this.basePath);
    };
    /**
     * list
     * @param resImageUploadMeta resImageUploadMeta
     */
    ResimageuploadmetacontrollerApi.prototype.resImageUploadMetaListPost = function (params) {
        return exports.ResimageuploadmetacontrollerApiFp.resImageUploadMetaListPost(params)(this.fetch, this.basePath);
    };
    /**
     * pageList
     * @param resImageUploadMeta resImageUploadMeta
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    ResimageuploadmetacontrollerApi.prototype.resImageUploadMetaPageListGet = function (params) {
        return exports.ResimageuploadmetacontrollerApiFp.resImageUploadMetaPageListGet(params)(this.fetch, this.basePath);
    };
    /**
     * pageList
     * @param resImageUploadMeta resImageUploadMeta
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    ResimageuploadmetacontrollerApi.prototype.resImageUploadMetaPageListPost = function (params) {
        return exports.ResimageuploadmetacontrollerApiFp.resImageUploadMetaPageListPost(params)(this.fetch, this.basePath);
    };
    /**
     * update
     * @param resImageUploadMeta resImageUploadMeta
     */
    ResimageuploadmetacontrollerApi.prototype.resImageUploadMetaUpdatePost = function (params) {
        return exports.ResimageuploadmetacontrollerApiFp.resImageUploadMetaUpdatePost(params)(this.fetch, this.basePath);
    };
    /**
     * view
     * @param id id
     */
    ResimageuploadmetacontrollerApi.prototype.resImageUploadMetaViewGet = function (params) {
        return exports.ResimageuploadmetacontrollerApiFp.resImageUploadMetaViewGet(params)(this.fetch, this.basePath);
    };
    return ResimageuploadmetacontrollerApi;
}(BaseAPI));
exports.ResimageuploadmetacontrollerApi = ResimageuploadmetacontrollerApi;
;
/**
 * ResimageuploadmetacontrollerApi - factory interface
 */
exports.ResimageuploadmetacontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         * create
         * @param resImageUploadMeta resImageUploadMeta
         */
        resImageUploadMetaCreatePost: function (params) {
            return exports.ResimageuploadmetacontrollerApiFp.resImageUploadMetaCreatePost(params)(fetch, basePath);
        },
        /**
         * delete
         * @param ids ids
         */
        resImageUploadMetaDeletePost: function (params) {
            return exports.ResimageuploadmetacontrollerApiFp.resImageUploadMetaDeletePost(params)(fetch, basePath);
        },
        /**
         * list
         * @param resImageUploadMeta resImageUploadMeta
         */
        resImageUploadMetaListGet: function (params) {
            return exports.ResimageuploadmetacontrollerApiFp.resImageUploadMetaListGet(params)(fetch, basePath);
        },
        /**
         * list
         * @param resImageUploadMeta resImageUploadMeta
         */
        resImageUploadMetaListPost: function (params) {
            return exports.ResimageuploadmetacontrollerApiFp.resImageUploadMetaListPost(params)(fetch, basePath);
        },
        /**
         * pageList
         * @param resImageUploadMeta resImageUploadMeta
         * @param pageNum pageNum
         * @param pageSize pageSize
         */
        resImageUploadMetaPageListGet: function (params) {
            return exports.ResimageuploadmetacontrollerApiFp.resImageUploadMetaPageListGet(params)(fetch, basePath);
        },
        /**
         * pageList
         * @param resImageUploadMeta resImageUploadMeta
         * @param pageNum pageNum
         * @param pageSize pageSize
         */
        resImageUploadMetaPageListPost: function (params) {
            return exports.ResimageuploadmetacontrollerApiFp.resImageUploadMetaPageListPost(params)(fetch, basePath);
        },
        /**
         * update
         * @param resImageUploadMeta resImageUploadMeta
         */
        resImageUploadMetaUpdatePost: function (params) {
            return exports.ResimageuploadmetacontrollerApiFp.resImageUploadMetaUpdatePost(params)(fetch, basePath);
        },
        /**
         * view
         * @param id id
         */
        resImageUploadMetaViewGet: function (params) {
            return exports.ResimageuploadmetacontrollerApiFp.resImageUploadMetaViewGet(params)(fetch, basePath);
        },
    };
};
/**
 * ResimageuploadreleasecontrollerApi - fetch parameter creator
 */
exports.ResimageuploadreleasecontrollerApiFetchParamCreactor = {
    /**
     * create
     * @param resImageUploadRelease resImageUploadRelease
     */
    resImageUploadReleaseCreatePost: function (params) {
        // verify required parameter "resImageUploadRelease" is set
        if (params["resImageUploadRelease"] == null) {
            throw new Error("Missing required parameter resImageUploadRelease when calling resImageUploadReleaseCreatePost");
        }
        var baseUrl = "/resImageUploadRelease/create";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUploadRelease"]) {
            fetchOptions.body = JSON.stringify(params["resImageUploadRelease"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * delete
     * @param ids ids
     */
    resImageUploadReleaseDeletePost: function (params) {
        // verify required parameter "ids" is set
        if (params["ids"] == null) {
            throw new Error("Missing required parameter ids when calling resImageUploadReleaseDeletePost");
        }
        var baseUrl = "/resImageUploadRelease/delete";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["ids"]) {
            fetchOptions.body = JSON.stringify(params["ids"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * list
     * @param resImageUploadRelease resImageUploadRelease
     */
    resImageUploadReleaseListGet: function (params) {
        var baseUrl = "/resImageUploadRelease/list";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUploadRelease"]) {
            fetchOptions.body = JSON.stringify(params["resImageUploadRelease"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * list
     * @param resImageUploadRelease resImageUploadRelease
     */
    resImageUploadReleaseListPost: function (params) {
        var baseUrl = "/resImageUploadRelease/list";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUploadRelease"]) {
            fetchOptions.body = JSON.stringify(params["resImageUploadRelease"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * pageList
     * @param resImageUploadRelease resImageUploadRelease
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    resImageUploadReleasePageListGet: function (params) {
        var baseUrl = "/resImageUploadRelease/pageList";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUploadRelease"]) {
            fetchOptions.body = JSON.stringify(params["resImageUploadRelease"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * pageList
     * @param resImageUploadRelease resImageUploadRelease
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    resImageUploadReleasePageListPost: function (params) {
        var baseUrl = "/resImageUploadRelease/pageList";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUploadRelease"]) {
            fetchOptions.body = JSON.stringify(params["resImageUploadRelease"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * update
     * @param resImageUploadRelease resImageUploadRelease
     */
    resImageUploadReleaseUpdatePost: function (params) {
        // verify required parameter "resImageUploadRelease" is set
        if (params["resImageUploadRelease"] == null) {
            throw new Error("Missing required parameter resImageUploadRelease when calling resImageUploadReleaseUpdatePost");
        }
        var baseUrl = "/resImageUploadRelease/update";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resImageUploadRelease"]) {
            fetchOptions.body = JSON.stringify(params["resImageUploadRelease"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * view
     * @param id id
     */
    resImageUploadReleaseViewGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling resImageUploadReleaseViewGet");
        }
        var baseUrl = "/resImageUploadRelease/view";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "id": params.id,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * ResimageuploadreleasecontrollerApi - functional programming interface
 */
exports.ResimageuploadreleasecontrollerApiFp = {
    /**
     * create
     * @param resImageUploadRelease resImageUploadRelease
     */
    resImageUploadReleaseCreatePost: function (params) {
        var fetchArgs = exports.ResimageuploadreleasecontrollerApiFetchParamCreactor.resImageUploadReleaseCreatePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * delete
     * @param ids ids
     */
    resImageUploadReleaseDeletePost: function (params) {
        var fetchArgs = exports.ResimageuploadreleasecontrollerApiFetchParamCreactor.resImageUploadReleaseDeletePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * list
     * @param resImageUploadRelease resImageUploadRelease
     */
    resImageUploadReleaseListGet: function (params) {
        var fetchArgs = exports.ResimageuploadreleasecontrollerApiFetchParamCreactor.resImageUploadReleaseListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * list
     * @param resImageUploadRelease resImageUploadRelease
     */
    resImageUploadReleaseListPost: function (params) {
        var fetchArgs = exports.ResimageuploadreleasecontrollerApiFetchParamCreactor.resImageUploadReleaseListPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * pageList
     * @param resImageUploadRelease resImageUploadRelease
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    resImageUploadReleasePageListGet: function (params) {
        var fetchArgs = exports.ResimageuploadreleasecontrollerApiFetchParamCreactor.resImageUploadReleasePageListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * pageList
     * @param resImageUploadRelease resImageUploadRelease
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    resImageUploadReleasePageListPost: function (params) {
        var fetchArgs = exports.ResimageuploadreleasecontrollerApiFetchParamCreactor.resImageUploadReleasePageListPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * update
     * @param resImageUploadRelease resImageUploadRelease
     */
    resImageUploadReleaseUpdatePost: function (params) {
        var fetchArgs = exports.ResimageuploadreleasecontrollerApiFetchParamCreactor.resImageUploadReleaseUpdatePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * view
     * @param id id
     */
    resImageUploadReleaseViewGet: function (params) {
        var fetchArgs = exports.ResimageuploadreleasecontrollerApiFetchParamCreactor.resImageUploadReleaseViewGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * ResimageuploadreleasecontrollerApi - object-oriented interface
 */
var ResimageuploadreleasecontrollerApi = (function (_super) {
    __extends(ResimageuploadreleasecontrollerApi, _super);
    function ResimageuploadreleasecontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     * create
     * @param resImageUploadRelease resImageUploadRelease
     */
    ResimageuploadreleasecontrollerApi.prototype.resImageUploadReleaseCreatePost = function (params) {
        return exports.ResimageuploadreleasecontrollerApiFp.resImageUploadReleaseCreatePost(params)(this.fetch, this.basePath);
    };
    /**
     * delete
     * @param ids ids
     */
    ResimageuploadreleasecontrollerApi.prototype.resImageUploadReleaseDeletePost = function (params) {
        return exports.ResimageuploadreleasecontrollerApiFp.resImageUploadReleaseDeletePost(params)(this.fetch, this.basePath);
    };
    /**
     * list
     * @param resImageUploadRelease resImageUploadRelease
     */
    ResimageuploadreleasecontrollerApi.prototype.resImageUploadReleaseListGet = function (params) {
        return exports.ResimageuploadreleasecontrollerApiFp.resImageUploadReleaseListGet(params)(this.fetch, this.basePath);
    };
    /**
     * list
     * @param resImageUploadRelease resImageUploadRelease
     */
    ResimageuploadreleasecontrollerApi.prototype.resImageUploadReleaseListPost = function (params) {
        return exports.ResimageuploadreleasecontrollerApiFp.resImageUploadReleaseListPost(params)(this.fetch, this.basePath);
    };
    /**
     * pageList
     * @param resImageUploadRelease resImageUploadRelease
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    ResimageuploadreleasecontrollerApi.prototype.resImageUploadReleasePageListGet = function (params) {
        return exports.ResimageuploadreleasecontrollerApiFp.resImageUploadReleasePageListGet(params)(this.fetch, this.basePath);
    };
    /**
     * pageList
     * @param resImageUploadRelease resImageUploadRelease
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    ResimageuploadreleasecontrollerApi.prototype.resImageUploadReleasePageListPost = function (params) {
        return exports.ResimageuploadreleasecontrollerApiFp.resImageUploadReleasePageListPost(params)(this.fetch, this.basePath);
    };
    /**
     * update
     * @param resImageUploadRelease resImageUploadRelease
     */
    ResimageuploadreleasecontrollerApi.prototype.resImageUploadReleaseUpdatePost = function (params) {
        return exports.ResimageuploadreleasecontrollerApiFp.resImageUploadReleaseUpdatePost(params)(this.fetch, this.basePath);
    };
    /**
     * view
     * @param id id
     */
    ResimageuploadreleasecontrollerApi.prototype.resImageUploadReleaseViewGet = function (params) {
        return exports.ResimageuploadreleasecontrollerApiFp.resImageUploadReleaseViewGet(params)(this.fetch, this.basePath);
    };
    return ResimageuploadreleasecontrollerApi;
}(BaseAPI));
exports.ResimageuploadreleasecontrollerApi = ResimageuploadreleasecontrollerApi;
;
/**
 * ResimageuploadreleasecontrollerApi - factory interface
 */
exports.ResimageuploadreleasecontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         * create
         * @param resImageUploadRelease resImageUploadRelease
         */
        resImageUploadReleaseCreatePost: function (params) {
            return exports.ResimageuploadreleasecontrollerApiFp.resImageUploadReleaseCreatePost(params)(fetch, basePath);
        },
        /**
         * delete
         * @param ids ids
         */
        resImageUploadReleaseDeletePost: function (params) {
            return exports.ResimageuploadreleasecontrollerApiFp.resImageUploadReleaseDeletePost(params)(fetch, basePath);
        },
        /**
         * list
         * @param resImageUploadRelease resImageUploadRelease
         */
        resImageUploadReleaseListGet: function (params) {
            return exports.ResimageuploadreleasecontrollerApiFp.resImageUploadReleaseListGet(params)(fetch, basePath);
        },
        /**
         * list
         * @param resImageUploadRelease resImageUploadRelease
         */
        resImageUploadReleaseListPost: function (params) {
            return exports.ResimageuploadreleasecontrollerApiFp.resImageUploadReleaseListPost(params)(fetch, basePath);
        },
        /**
         * pageList
         * @param resImageUploadRelease resImageUploadRelease
         * @param pageNum pageNum
         * @param pageSize pageSize
         */
        resImageUploadReleasePageListGet: function (params) {
            return exports.ResimageuploadreleasecontrollerApiFp.resImageUploadReleasePageListGet(params)(fetch, basePath);
        },
        /**
         * pageList
         * @param resImageUploadRelease resImageUploadRelease
         * @param pageNum pageNum
         * @param pageSize pageSize
         */
        resImageUploadReleasePageListPost: function (params) {
            return exports.ResimageuploadreleasecontrollerApiFp.resImageUploadReleasePageListPost(params)(fetch, basePath);
        },
        /**
         * update
         * @param resImageUploadRelease resImageUploadRelease
         */
        resImageUploadReleaseUpdatePost: function (params) {
            return exports.ResimageuploadreleasecontrollerApiFp.resImageUploadReleaseUpdatePost(params)(fetch, basePath);
        },
        /**
         * view
         * @param id id
         */
        resImageUploadReleaseViewGet: function (params) {
            return exports.ResimageuploadreleasecontrollerApiFp.resImageUploadReleaseViewGet(params)(fetch, basePath);
        },
    };
};
/**
 * ResrootfolderscontrollerApi - fetch parameter creator
 */
exports.ResrootfolderscontrollerApiFetchParamCreactor = {
    /**
     * create
     * @param resRootFolders resRootFolders
     */
    resRootFoldersCreatePost: function (params) {
        // verify required parameter "resRootFolders" is set
        if (params["resRootFolders"] == null) {
            throw new Error("Missing required parameter resRootFolders when calling resRootFoldersCreatePost");
        }
        var baseUrl = "/resRootFolders/create";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resRootFolders"]) {
            fetchOptions.body = JSON.stringify(params["resRootFolders"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * delete
     * @param ids ids
     */
    resRootFoldersDeletePost: function (params) {
        // verify required parameter "ids" is set
        if (params["ids"] == null) {
            throw new Error("Missing required parameter ids when calling resRootFoldersDeletePost");
        }
        var baseUrl = "/resRootFolders/delete";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["ids"]) {
            fetchOptions.body = JSON.stringify(params["ids"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * list
     * @param resRootFolders resRootFolders
     */
    resRootFoldersListGet: function (params) {
        var baseUrl = "/resRootFolders/list";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resRootFolders"]) {
            fetchOptions.body = JSON.stringify(params["resRootFolders"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * list
     * @param resRootFolders resRootFolders
     */
    resRootFoldersListPost: function (params) {
        var baseUrl = "/resRootFolders/list";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resRootFolders"]) {
            fetchOptions.body = JSON.stringify(params["resRootFolders"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * pageList
     * @param resRootFolders resRootFolders
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    resRootFoldersPageListGet: function (params) {
        var baseUrl = "/resRootFolders/pageList";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resRootFolders"]) {
            fetchOptions.body = JSON.stringify(params["resRootFolders"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * pageList
     * @param resRootFolders resRootFolders
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    resRootFoldersPageListPost: function (params) {
        var baseUrl = "/resRootFolders/pageList";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resRootFolders"]) {
            fetchOptions.body = JSON.stringify(params["resRootFolders"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * update
     * @param resRootFolders resRootFolders
     */
    resRootFoldersUpdatePost: function (params) {
        // verify required parameter "resRootFolders" is set
        if (params["resRootFolders"] == null) {
            throw new Error("Missing required parameter resRootFolders when calling resRootFoldersUpdatePost");
        }
        var baseUrl = "/resRootFolders/update";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resRootFolders"]) {
            fetchOptions.body = JSON.stringify(params["resRootFolders"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * view
     * @param id id
     */
    resRootFoldersViewGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling resRootFoldersViewGet");
        }
        var baseUrl = "/resRootFolders/view";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "id": params.id,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * ResrootfolderscontrollerApi - functional programming interface
 */
exports.ResrootfolderscontrollerApiFp = {
    /**
     * create
     * @param resRootFolders resRootFolders
     */
    resRootFoldersCreatePost: function (params) {
        var fetchArgs = exports.ResrootfolderscontrollerApiFetchParamCreactor.resRootFoldersCreatePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * delete
     * @param ids ids
     */
    resRootFoldersDeletePost: function (params) {
        var fetchArgs = exports.ResrootfolderscontrollerApiFetchParamCreactor.resRootFoldersDeletePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * list
     * @param resRootFolders resRootFolders
     */
    resRootFoldersListGet: function (params) {
        var fetchArgs = exports.ResrootfolderscontrollerApiFetchParamCreactor.resRootFoldersListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * list
     * @param resRootFolders resRootFolders
     */
    resRootFoldersListPost: function (params) {
        var fetchArgs = exports.ResrootfolderscontrollerApiFetchParamCreactor.resRootFoldersListPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * pageList
     * @param resRootFolders resRootFolders
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    resRootFoldersPageListGet: function (params) {
        var fetchArgs = exports.ResrootfolderscontrollerApiFetchParamCreactor.resRootFoldersPageListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * pageList
     * @param resRootFolders resRootFolders
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    resRootFoldersPageListPost: function (params) {
        var fetchArgs = exports.ResrootfolderscontrollerApiFetchParamCreactor.resRootFoldersPageListPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * update
     * @param resRootFolders resRootFolders
     */
    resRootFoldersUpdatePost: function (params) {
        var fetchArgs = exports.ResrootfolderscontrollerApiFetchParamCreactor.resRootFoldersUpdatePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * view
     * @param id id
     */
    resRootFoldersViewGet: function (params) {
        var fetchArgs = exports.ResrootfolderscontrollerApiFetchParamCreactor.resRootFoldersViewGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * ResrootfolderscontrollerApi - object-oriented interface
 */
var ResrootfolderscontrollerApi = (function (_super) {
    __extends(ResrootfolderscontrollerApi, _super);
    function ResrootfolderscontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     * create
     * @param resRootFolders resRootFolders
     */
    ResrootfolderscontrollerApi.prototype.resRootFoldersCreatePost = function (params) {
        return exports.ResrootfolderscontrollerApiFp.resRootFoldersCreatePost(params)(this.fetch, this.basePath);
    };
    /**
     * delete
     * @param ids ids
     */
    ResrootfolderscontrollerApi.prototype.resRootFoldersDeletePost = function (params) {
        return exports.ResrootfolderscontrollerApiFp.resRootFoldersDeletePost(params)(this.fetch, this.basePath);
    };
    /**
     * list
     * @param resRootFolders resRootFolders
     */
    ResrootfolderscontrollerApi.prototype.resRootFoldersListGet = function (params) {
        return exports.ResrootfolderscontrollerApiFp.resRootFoldersListGet(params)(this.fetch, this.basePath);
    };
    /**
     * list
     * @param resRootFolders resRootFolders
     */
    ResrootfolderscontrollerApi.prototype.resRootFoldersListPost = function (params) {
        return exports.ResrootfolderscontrollerApiFp.resRootFoldersListPost(params)(this.fetch, this.basePath);
    };
    /**
     * pageList
     * @param resRootFolders resRootFolders
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    ResrootfolderscontrollerApi.prototype.resRootFoldersPageListGet = function (params) {
        return exports.ResrootfolderscontrollerApiFp.resRootFoldersPageListGet(params)(this.fetch, this.basePath);
    };
    /**
     * pageList
     * @param resRootFolders resRootFolders
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    ResrootfolderscontrollerApi.prototype.resRootFoldersPageListPost = function (params) {
        return exports.ResrootfolderscontrollerApiFp.resRootFoldersPageListPost(params)(this.fetch, this.basePath);
    };
    /**
     * update
     * @param resRootFolders resRootFolders
     */
    ResrootfolderscontrollerApi.prototype.resRootFoldersUpdatePost = function (params) {
        return exports.ResrootfolderscontrollerApiFp.resRootFoldersUpdatePost(params)(this.fetch, this.basePath);
    };
    /**
     * view
     * @param id id
     */
    ResrootfolderscontrollerApi.prototype.resRootFoldersViewGet = function (params) {
        return exports.ResrootfolderscontrollerApiFp.resRootFoldersViewGet(params)(this.fetch, this.basePath);
    };
    return ResrootfolderscontrollerApi;
}(BaseAPI));
exports.ResrootfolderscontrollerApi = ResrootfolderscontrollerApi;
;
/**
 * ResrootfolderscontrollerApi - factory interface
 */
exports.ResrootfolderscontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         * create
         * @param resRootFolders resRootFolders
         */
        resRootFoldersCreatePost: function (params) {
            return exports.ResrootfolderscontrollerApiFp.resRootFoldersCreatePost(params)(fetch, basePath);
        },
        /**
         * delete
         * @param ids ids
         */
        resRootFoldersDeletePost: function (params) {
            return exports.ResrootfolderscontrollerApiFp.resRootFoldersDeletePost(params)(fetch, basePath);
        },
        /**
         * list
         * @param resRootFolders resRootFolders
         */
        resRootFoldersListGet: function (params) {
            return exports.ResrootfolderscontrollerApiFp.resRootFoldersListGet(params)(fetch, basePath);
        },
        /**
         * list
         * @param resRootFolders resRootFolders
         */
        resRootFoldersListPost: function (params) {
            return exports.ResrootfolderscontrollerApiFp.resRootFoldersListPost(params)(fetch, basePath);
        },
        /**
         * pageList
         * @param resRootFolders resRootFolders
         * @param pageNum pageNum
         * @param pageSize pageSize
         */
        resRootFoldersPageListGet: function (params) {
            return exports.ResrootfolderscontrollerApiFp.resRootFoldersPageListGet(params)(fetch, basePath);
        },
        /**
         * pageList
         * @param resRootFolders resRootFolders
         * @param pageNum pageNum
         * @param pageSize pageSize
         */
        resRootFoldersPageListPost: function (params) {
            return exports.ResrootfolderscontrollerApiFp.resRootFoldersPageListPost(params)(fetch, basePath);
        },
        /**
         * update
         * @param resRootFolders resRootFolders
         */
        resRootFoldersUpdatePost: function (params) {
            return exports.ResrootfolderscontrollerApiFp.resRootFoldersUpdatePost(params)(fetch, basePath);
        },
        /**
         * view
         * @param id id
         */
        resRootFoldersViewGet: function (params) {
            return exports.ResrootfolderscontrollerApiFp.resRootFoldersViewGet(params)(fetch, basePath);
        },
    };
};
/**
 * ResvideocontrollerApi - fetch parameter creator
 */
exports.ResvideocontrollerApiFetchParamCreactor = {
    /**
     * /
     * 批量删除视频
     * @param ids ids
     */
    videosDelete: function (params) {
        // verify required parameter "ids" is set
        if (params["ids"] == null) {
            throw new Error("Missing required parameter ids when calling videosDelete");
        }
        var baseUrl = "/videos/";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "DELETE" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["ids"]) {
            fetchOptions.body = JSON.stringify(params["ids"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /{id}
     * 获取视频信息
     * @param id id
     */
    videosIdGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling videosIdGet");
        }
        var baseUrl = "/videos/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /{id}
     * 修改单个视频
     * @param id id
     * @param video video
     */
    videosIdPut: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling videosIdPut");
        }
        // verify required parameter "video" is set
        if (params["video"] == null) {
            throw new Error("Missing required parameter video when calling videosIdPut");
        }
        var baseUrl = "/videos/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "PUT" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["video"]) {
            fetchOptions.body = JSON.stringify(params["video"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * pageList
     * 列表信息
     * @param resVideo resVideo
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    videosPageListPost: function (params) {
        var baseUrl = "/videos/pageList";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resVideo"]) {
            fetchOptions.body = JSON.stringify(params["resVideo"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * /
     * 创建对象（内部测试用）
     * @param videoDetail videoDetail
     */
    videosPost: function (params) {
        // verify required parameter "videoDetail" is set
        if (params["videoDetail"] == null) {
            throw new Error("Missing required parameter videoDetail when calling videosPost");
        }
        var baseUrl = "/videos/";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["videoDetail"]) {
            fetchOptions.body = JSON.stringify(params["videoDetail"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * ResvideocontrollerApi - functional programming interface
 */
exports.ResvideocontrollerApiFp = {
    /**
     * /
     * 批量删除视频
     * @param ids ids
     */
    videosDelete: function (params) {
        var fetchArgs = exports.ResvideocontrollerApiFetchParamCreactor.videosDelete(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /{id}
     * 获取视频信息
     * @param id id
     */
    videosIdGet: function (params) {
        var fetchArgs = exports.ResvideocontrollerApiFetchParamCreactor.videosIdGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /{id}
     * 修改单个视频
     * @param id id
     * @param video video
     */
    videosIdPut: function (params) {
        var fetchArgs = exports.ResvideocontrollerApiFetchParamCreactor.videosIdPut(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * pageList
     * 列表信息
     * @param resVideo resVideo
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    videosPageListPost: function (params) {
        var fetchArgs = exports.ResvideocontrollerApiFetchParamCreactor.videosPageListPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * /
     * 创建对象（内部测试用）
     * @param videoDetail videoDetail
     */
    videosPost: function (params) {
        var fetchArgs = exports.ResvideocontrollerApiFetchParamCreactor.videosPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * ResvideocontrollerApi - object-oriented interface
 */
var ResvideocontrollerApi = (function (_super) {
    __extends(ResvideocontrollerApi, _super);
    function ResvideocontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     * /
     * 批量删除视频
     * @param ids ids
     */
    ResvideocontrollerApi.prototype.videosDelete = function (params) {
        return exports.ResvideocontrollerApiFp.videosDelete(params)(this.fetch, this.basePath);
    };
    /**
     * /{id}
     * 获取视频信息
     * @param id id
     */
    ResvideocontrollerApi.prototype.videosIdGet = function (params) {
        return exports.ResvideocontrollerApiFp.videosIdGet(params)(this.fetch, this.basePath);
    };
    /**
     * /{id}
     * 修改单个视频
     * @param id id
     * @param video video
     */
    ResvideocontrollerApi.prototype.videosIdPut = function (params) {
        return exports.ResvideocontrollerApiFp.videosIdPut(params)(this.fetch, this.basePath);
    };
    /**
     * pageList
     * 列表信息
     * @param resVideo resVideo
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    ResvideocontrollerApi.prototype.videosPageListPost = function (params) {
        return exports.ResvideocontrollerApiFp.videosPageListPost(params)(this.fetch, this.basePath);
    };
    /**
     * /
     * 创建对象（内部测试用）
     * @param videoDetail videoDetail
     */
    ResvideocontrollerApi.prototype.videosPost = function (params) {
        return exports.ResvideocontrollerApiFp.videosPost(params)(this.fetch, this.basePath);
    };
    return ResvideocontrollerApi;
}(BaseAPI));
exports.ResvideocontrollerApi = ResvideocontrollerApi;
;
/**
 * ResvideocontrollerApi - factory interface
 */
exports.ResvideocontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         * /
         * 批量删除视频
         * @param ids ids
         */
        videosDelete: function (params) {
            return exports.ResvideocontrollerApiFp.videosDelete(params)(fetch, basePath);
        },
        /**
         * /{id}
         * 获取视频信息
         * @param id id
         */
        videosIdGet: function (params) {
            return exports.ResvideocontrollerApiFp.videosIdGet(params)(fetch, basePath);
        },
        /**
         * /{id}
         * 修改单个视频
         * @param id id
         * @param video video
         */
        videosIdPut: function (params) {
            return exports.ResvideocontrollerApiFp.videosIdPut(params)(fetch, basePath);
        },
        /**
         * pageList
         * 列表信息
         * @param resVideo resVideo
         * @param pageNum pageNum
         * @param pageSize pageSize
         */
        videosPageListPost: function (params) {
            return exports.ResvideocontrollerApiFp.videosPageListPost(params)(fetch, basePath);
        },
        /**
         * /
         * 创建对象（内部测试用）
         * @param videoDetail videoDetail
         */
        videosPost: function (params) {
            return exports.ResvideocontrollerApiFp.videosPost(params)(fetch, basePath);
        },
    };
};
/**
 * ResvideouploadcontrollerApi - fetch parameter creator
 */
exports.ResvideouploadcontrollerApiFetchParamCreactor = {
    /**
     * delete
     * @param folderId folderId
     * @param ids ids
     */
    resVideoUploadBatchDelByIdsFolderIdGet: function (params) {
        // verify required parameter "folderId" is set
        if (params["folderId"] == null) {
            throw new Error("Missing required parameter folderId when calling resVideoUploadBatchDelByIdsFolderIdGet");
        }
        var baseUrl = "/resVideoUpload/batchDelByIds/{folderId}"
            .replace("{" + "folderId" + "}", "" + params.folderId);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "ids": params.ids,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * create
     * @param resVideoUpload resVideoUpload
     */
    resVideoUploadCreatePost: function (params) {
        // verify required parameter "resVideoUpload" is set
        if (params["resVideoUpload"] == null) {
            throw new Error("Missing required parameter resVideoUpload when calling resVideoUploadCreatePost");
        }
        var baseUrl = "/resVideoUpload/create";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resVideoUpload"]) {
            fetchOptions.body = JSON.stringify(params["resVideoUpload"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * del
     * @param id id
     * @param folderId folderId
     */
    resVideoUploadDelByIdFolderIdGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling resVideoUploadDelByIdFolderIdGet");
        }
        // verify required parameter "folderId" is set
        if (params["folderId"] == null) {
            throw new Error("Missing required parameter folderId when calling resVideoUploadDelByIdFolderIdGet");
        }
        var baseUrl = "/resVideoUpload/delById/{folderId}"
            .replace("{" + "folderId" + "}", "" + params.folderId);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "id": params.id,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * genOrigURL
     * @param id id
     * @param userId userId
     */
    resVideoUploadGetOrigURLIdGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling resVideoUploadGetOrigURLIdGet");
        }
        var baseUrl = "/resVideoUpload/getOrigURL/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "userId": params.userId,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * genOrigURL
     * @param id id
     * @param userId userId
     */
    resVideoUploadGetOrigURLIdPost: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling resVideoUploadGetOrigURLIdPost");
        }
        var baseUrl = "/resVideoUpload/getOrigURL/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "userId": params.userId,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * myFolderUpload
     * 取得目录已有的且是当前用户上传视频列表
     * @param folderId folderId
     * @param resVideoUpload resVideoUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param userId userId
     */
    resVideoUploadMyFolderUploadGet: function (params) {
        // verify required parameter "folderId" is set
        if (params["folderId"] == null) {
            throw new Error("Missing required parameter folderId when calling resVideoUploadMyFolderUploadGet");
        }
        var baseUrl = "/resVideoUpload/myFolderUpload";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
            "userId": params.userId,
            "folderId": params.folderId,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resVideoUpload"]) {
            fetchOptions.body = JSON.stringify(params["resVideoUpload"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * listUnFolder
     * 取得无归属目录且是当前用户上传视频列表(FTP上传的视频)
     * @param resVideoUpload resVideoUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param userId userId
     */
    resVideoUploadUnFoldersGet: function (params) {
        var baseUrl = "/resVideoUpload/unFolders";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
            "userId": params.userId,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resVideoUpload"]) {
            fetchOptions.body = JSON.stringify(params["resVideoUpload"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * update
     * @param id id
     * @param resVideoUpload resVideoUpload
     * @param userId userId
     */
    resVideoUploadUpdateIdPost: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling resVideoUploadUpdateIdPost");
        }
        // verify required parameter "resVideoUpload" is set
        if (params["resVideoUpload"] == null) {
            throw new Error("Missing required parameter resVideoUpload when calling resVideoUploadUpdateIdPost");
        }
        var baseUrl = "/resVideoUpload/update/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "userId": params.userId,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["resVideoUpload"]) {
            fetchOptions.body = JSON.stringify(params["resVideoUpload"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * view
     * @param id id
     */
    resVideoUploadViewIdGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling resVideoUploadViewIdGet");
        }
        var baseUrl = "/resVideoUpload/view/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * view
     * @param id id
     */
    resVideoUploadViewIdPost: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling resVideoUploadViewIdPost");
        }
        var baseUrl = "/resVideoUpload/view/{id}"
            .replace("{" + "id" + "}", "" + params.id);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * ResvideouploadcontrollerApi - functional programming interface
 */
exports.ResvideouploadcontrollerApiFp = {
    /**
     * delete
     * @param folderId folderId
     * @param ids ids
     */
    resVideoUploadBatchDelByIdsFolderIdGet: function (params) {
        var fetchArgs = exports.ResvideouploadcontrollerApiFetchParamCreactor.resVideoUploadBatchDelByIdsFolderIdGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * create
     * @param resVideoUpload resVideoUpload
     */
    resVideoUploadCreatePost: function (params) {
        var fetchArgs = exports.ResvideouploadcontrollerApiFetchParamCreactor.resVideoUploadCreatePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * del
     * @param id id
     * @param folderId folderId
     */
    resVideoUploadDelByIdFolderIdGet: function (params) {
        var fetchArgs = exports.ResvideouploadcontrollerApiFetchParamCreactor.resVideoUploadDelByIdFolderIdGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * genOrigURL
     * @param id id
     * @param userId userId
     */
    resVideoUploadGetOrigURLIdGet: function (params) {
        var fetchArgs = exports.ResvideouploadcontrollerApiFetchParamCreactor.resVideoUploadGetOrigURLIdGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * genOrigURL
     * @param id id
     * @param userId userId
     */
    resVideoUploadGetOrigURLIdPost: function (params) {
        var fetchArgs = exports.ResvideouploadcontrollerApiFetchParamCreactor.resVideoUploadGetOrigURLIdPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * myFolderUpload
     * 取得目录已有的且是当前用户上传视频列表
     * @param folderId folderId
     * @param resVideoUpload resVideoUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param userId userId
     */
    resVideoUploadMyFolderUploadGet: function (params) {
        var fetchArgs = exports.ResvideouploadcontrollerApiFetchParamCreactor.resVideoUploadMyFolderUploadGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * listUnFolder
     * 取得无归属目录且是当前用户上传视频列表(FTP上传的视频)
     * @param resVideoUpload resVideoUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param userId userId
     */
    resVideoUploadUnFoldersGet: function (params) {
        var fetchArgs = exports.ResvideouploadcontrollerApiFetchParamCreactor.resVideoUploadUnFoldersGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * update
     * @param id id
     * @param resVideoUpload resVideoUpload
     * @param userId userId
     */
    resVideoUploadUpdateIdPost: function (params) {
        var fetchArgs = exports.ResvideouploadcontrollerApiFetchParamCreactor.resVideoUploadUpdateIdPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * view
     * @param id id
     */
    resVideoUploadViewIdGet: function (params) {
        var fetchArgs = exports.ResvideouploadcontrollerApiFetchParamCreactor.resVideoUploadViewIdGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * view
     * @param id id
     */
    resVideoUploadViewIdPost: function (params) {
        var fetchArgs = exports.ResvideouploadcontrollerApiFetchParamCreactor.resVideoUploadViewIdPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * ResvideouploadcontrollerApi - object-oriented interface
 */
var ResvideouploadcontrollerApi = (function (_super) {
    __extends(ResvideouploadcontrollerApi, _super);
    function ResvideouploadcontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     * delete
     * @param folderId folderId
     * @param ids ids
     */
    ResvideouploadcontrollerApi.prototype.resVideoUploadBatchDelByIdsFolderIdGet = function (params) {
        return exports.ResvideouploadcontrollerApiFp.resVideoUploadBatchDelByIdsFolderIdGet(params)(this.fetch, this.basePath);
    };
    /**
     * create
     * @param resVideoUpload resVideoUpload
     */
    ResvideouploadcontrollerApi.prototype.resVideoUploadCreatePost = function (params) {
        return exports.ResvideouploadcontrollerApiFp.resVideoUploadCreatePost(params)(this.fetch, this.basePath);
    };
    /**
     * del
     * @param id id
     * @param folderId folderId
     */
    ResvideouploadcontrollerApi.prototype.resVideoUploadDelByIdFolderIdGet = function (params) {
        return exports.ResvideouploadcontrollerApiFp.resVideoUploadDelByIdFolderIdGet(params)(this.fetch, this.basePath);
    };
    /**
     * genOrigURL
     * @param id id
     * @param userId userId
     */
    ResvideouploadcontrollerApi.prototype.resVideoUploadGetOrigURLIdGet = function (params) {
        return exports.ResvideouploadcontrollerApiFp.resVideoUploadGetOrigURLIdGet(params)(this.fetch, this.basePath);
    };
    /**
     * genOrigURL
     * @param id id
     * @param userId userId
     */
    ResvideouploadcontrollerApi.prototype.resVideoUploadGetOrigURLIdPost = function (params) {
        return exports.ResvideouploadcontrollerApiFp.resVideoUploadGetOrigURLIdPost(params)(this.fetch, this.basePath);
    };
    /**
     * myFolderUpload
     * 取得目录已有的且是当前用户上传视频列表
     * @param folderId folderId
     * @param resVideoUpload resVideoUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param userId userId
     */
    ResvideouploadcontrollerApi.prototype.resVideoUploadMyFolderUploadGet = function (params) {
        return exports.ResvideouploadcontrollerApiFp.resVideoUploadMyFolderUploadGet(params)(this.fetch, this.basePath);
    };
    /**
     * listUnFolder
     * 取得无归属目录且是当前用户上传视频列表(FTP上传的视频)
     * @param resVideoUpload resVideoUpload
     * @param pageNum pageNum
     * @param pageSize pageSize
     * @param userId userId
     */
    ResvideouploadcontrollerApi.prototype.resVideoUploadUnFoldersGet = function (params) {
        return exports.ResvideouploadcontrollerApiFp.resVideoUploadUnFoldersGet(params)(this.fetch, this.basePath);
    };
    /**
     * update
     * @param id id
     * @param resVideoUpload resVideoUpload
     * @param userId userId
     */
    ResvideouploadcontrollerApi.prototype.resVideoUploadUpdateIdPost = function (params) {
        return exports.ResvideouploadcontrollerApiFp.resVideoUploadUpdateIdPost(params)(this.fetch, this.basePath);
    };
    /**
     * view
     * @param id id
     */
    ResvideouploadcontrollerApi.prototype.resVideoUploadViewIdGet = function (params) {
        return exports.ResvideouploadcontrollerApiFp.resVideoUploadViewIdGet(params)(this.fetch, this.basePath);
    };
    /**
     * view
     * @param id id
     */
    ResvideouploadcontrollerApi.prototype.resVideoUploadViewIdPost = function (params) {
        return exports.ResvideouploadcontrollerApiFp.resVideoUploadViewIdPost(params)(this.fetch, this.basePath);
    };
    return ResvideouploadcontrollerApi;
}(BaseAPI));
exports.ResvideouploadcontrollerApi = ResvideouploadcontrollerApi;
;
/**
 * ResvideouploadcontrollerApi - factory interface
 */
exports.ResvideouploadcontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         * delete
         * @param folderId folderId
         * @param ids ids
         */
        resVideoUploadBatchDelByIdsFolderIdGet: function (params) {
            return exports.ResvideouploadcontrollerApiFp.resVideoUploadBatchDelByIdsFolderIdGet(params)(fetch, basePath);
        },
        /**
         * create
         * @param resVideoUpload resVideoUpload
         */
        resVideoUploadCreatePost: function (params) {
            return exports.ResvideouploadcontrollerApiFp.resVideoUploadCreatePost(params)(fetch, basePath);
        },
        /**
         * del
         * @param id id
         * @param folderId folderId
         */
        resVideoUploadDelByIdFolderIdGet: function (params) {
            return exports.ResvideouploadcontrollerApiFp.resVideoUploadDelByIdFolderIdGet(params)(fetch, basePath);
        },
        /**
         * genOrigURL
         * @param id id
         * @param userId userId
         */
        resVideoUploadGetOrigURLIdGet: function (params) {
            return exports.ResvideouploadcontrollerApiFp.resVideoUploadGetOrigURLIdGet(params)(fetch, basePath);
        },
        /**
         * genOrigURL
         * @param id id
         * @param userId userId
         */
        resVideoUploadGetOrigURLIdPost: function (params) {
            return exports.ResvideouploadcontrollerApiFp.resVideoUploadGetOrigURLIdPost(params)(fetch, basePath);
        },
        /**
         * myFolderUpload
         * 取得目录已有的且是当前用户上传视频列表
         * @param folderId folderId
         * @param resVideoUpload resVideoUpload
         * @param pageNum pageNum
         * @param pageSize pageSize
         * @param userId userId
         */
        resVideoUploadMyFolderUploadGet: function (params) {
            return exports.ResvideouploadcontrollerApiFp.resVideoUploadMyFolderUploadGet(params)(fetch, basePath);
        },
        /**
         * listUnFolder
         * 取得无归属目录且是当前用户上传视频列表(FTP上传的视频)
         * @param resVideoUpload resVideoUpload
         * @param pageNum pageNum
         * @param pageSize pageSize
         * @param userId userId
         */
        resVideoUploadUnFoldersGet: function (params) {
            return exports.ResvideouploadcontrollerApiFp.resVideoUploadUnFoldersGet(params)(fetch, basePath);
        },
        /**
         * update
         * @param id id
         * @param resVideoUpload resVideoUpload
         * @param userId userId
         */
        resVideoUploadUpdateIdPost: function (params) {
            return exports.ResvideouploadcontrollerApiFp.resVideoUploadUpdateIdPost(params)(fetch, basePath);
        },
        /**
         * view
         * @param id id
         */
        resVideoUploadViewIdGet: function (params) {
            return exports.ResvideouploadcontrollerApiFp.resVideoUploadViewIdGet(params)(fetch, basePath);
        },
        /**
         * view
         * @param id id
         */
        resVideoUploadViewIdPost: function (params) {
            return exports.ResvideouploadcontrollerApiFp.resVideoUploadViewIdPost(params)(fetch, basePath);
        },
    };
};
/**
 * SensitivewordcontrollerApi - fetch parameter creator
 */
exports.SensitivewordcontrollerApiFetchParamCreactor = {
    /**
     * create
     * @param sensitiveWord sensitiveWord
     */
    sensitiveWordCreatePost: function (params) {
        // verify required parameter "sensitiveWord" is set
        if (params["sensitiveWord"] == null) {
            throw new Error("Missing required parameter sensitiveWord when calling sensitiveWordCreatePost");
        }
        var baseUrl = "/sensitiveWord/create";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["sensitiveWord"]) {
            fetchOptions.body = JSON.stringify(params["sensitiveWord"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * delete
     * @param ids ids
     */
    sensitiveWordDeletePost: function (params) {
        // verify required parameter "ids" is set
        if (params["ids"] == null) {
            throw new Error("Missing required parameter ids when calling sensitiveWordDeletePost");
        }
        var baseUrl = "/sensitiveWord/delete";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["ids"]) {
            fetchOptions.body = JSON.stringify(params["ids"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * list
     * @param sensitiveWord sensitiveWord
     */
    sensitiveWordListGet: function (params) {
        var baseUrl = "/sensitiveWord/list";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["sensitiveWord"]) {
            fetchOptions.body = JSON.stringify(params["sensitiveWord"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * list
     * @param sensitiveWord sensitiveWord
     */
    sensitiveWordListPost: function (params) {
        var baseUrl = "/sensitiveWord/list";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["sensitiveWord"]) {
            fetchOptions.body = JSON.stringify(params["sensitiveWord"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * pageList
     * @param sensitiveWord sensitiveWord
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    sensitiveWordPageListGet: function (params) {
        var baseUrl = "/sensitiveWord/pageList";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["sensitiveWord"]) {
            fetchOptions.body = JSON.stringify(params["sensitiveWord"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * pageList
     * @param sensitiveWord sensitiveWord
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    sensitiveWordPageListPost: function (params) {
        var baseUrl = "/sensitiveWord/pageList";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["sensitiveWord"]) {
            fetchOptions.body = JSON.stringify(params["sensitiveWord"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * update
     * @param sensitiveWord sensitiveWord
     */
    sensitiveWordUpdatePost: function (params) {
        // verify required parameter "sensitiveWord" is set
        if (params["sensitiveWord"] == null) {
            throw new Error("Missing required parameter sensitiveWord when calling sensitiveWordUpdatePost");
        }
        var baseUrl = "/sensitiveWord/update";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["sensitiveWord"]) {
            fetchOptions.body = JSON.stringify(params["sensitiveWord"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * view
     * @param id id
     */
    sensitiveWordViewGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling sensitiveWordViewGet");
        }
        var baseUrl = "/sensitiveWord/view";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "id": params.id,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * SensitivewordcontrollerApi - functional programming interface
 */
exports.SensitivewordcontrollerApiFp = {
    /**
     * create
     * @param sensitiveWord sensitiveWord
     */
    sensitiveWordCreatePost: function (params) {
        var fetchArgs = exports.SensitivewordcontrollerApiFetchParamCreactor.sensitiveWordCreatePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * delete
     * @param ids ids
     */
    sensitiveWordDeletePost: function (params) {
        var fetchArgs = exports.SensitivewordcontrollerApiFetchParamCreactor.sensitiveWordDeletePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * list
     * @param sensitiveWord sensitiveWord
     */
    sensitiveWordListGet: function (params) {
        var fetchArgs = exports.SensitivewordcontrollerApiFetchParamCreactor.sensitiveWordListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * list
     * @param sensitiveWord sensitiveWord
     */
    sensitiveWordListPost: function (params) {
        var fetchArgs = exports.SensitivewordcontrollerApiFetchParamCreactor.sensitiveWordListPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * pageList
     * @param sensitiveWord sensitiveWord
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    sensitiveWordPageListGet: function (params) {
        var fetchArgs = exports.SensitivewordcontrollerApiFetchParamCreactor.sensitiveWordPageListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * pageList
     * @param sensitiveWord sensitiveWord
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    sensitiveWordPageListPost: function (params) {
        var fetchArgs = exports.SensitivewordcontrollerApiFetchParamCreactor.sensitiveWordPageListPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * update
     * @param sensitiveWord sensitiveWord
     */
    sensitiveWordUpdatePost: function (params) {
        var fetchArgs = exports.SensitivewordcontrollerApiFetchParamCreactor.sensitiveWordUpdatePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * view
     * @param id id
     */
    sensitiveWordViewGet: function (params) {
        var fetchArgs = exports.SensitivewordcontrollerApiFetchParamCreactor.sensitiveWordViewGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * SensitivewordcontrollerApi - object-oriented interface
 */
var SensitivewordcontrollerApi = (function (_super) {
    __extends(SensitivewordcontrollerApi, _super);
    function SensitivewordcontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     * create
     * @param sensitiveWord sensitiveWord
     */
    SensitivewordcontrollerApi.prototype.sensitiveWordCreatePost = function (params) {
        return exports.SensitivewordcontrollerApiFp.sensitiveWordCreatePost(params)(this.fetch, this.basePath);
    };
    /**
     * delete
     * @param ids ids
     */
    SensitivewordcontrollerApi.prototype.sensitiveWordDeletePost = function (params) {
        return exports.SensitivewordcontrollerApiFp.sensitiveWordDeletePost(params)(this.fetch, this.basePath);
    };
    /**
     * list
     * @param sensitiveWord sensitiveWord
     */
    SensitivewordcontrollerApi.prototype.sensitiveWordListGet = function (params) {
        return exports.SensitivewordcontrollerApiFp.sensitiveWordListGet(params)(this.fetch, this.basePath);
    };
    /**
     * list
     * @param sensitiveWord sensitiveWord
     */
    SensitivewordcontrollerApi.prototype.sensitiveWordListPost = function (params) {
        return exports.SensitivewordcontrollerApiFp.sensitiveWordListPost(params)(this.fetch, this.basePath);
    };
    /**
     * pageList
     * @param sensitiveWord sensitiveWord
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    SensitivewordcontrollerApi.prototype.sensitiveWordPageListGet = function (params) {
        return exports.SensitivewordcontrollerApiFp.sensitiveWordPageListGet(params)(this.fetch, this.basePath);
    };
    /**
     * pageList
     * @param sensitiveWord sensitiveWord
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    SensitivewordcontrollerApi.prototype.sensitiveWordPageListPost = function (params) {
        return exports.SensitivewordcontrollerApiFp.sensitiveWordPageListPost(params)(this.fetch, this.basePath);
    };
    /**
     * update
     * @param sensitiveWord sensitiveWord
     */
    SensitivewordcontrollerApi.prototype.sensitiveWordUpdatePost = function (params) {
        return exports.SensitivewordcontrollerApiFp.sensitiveWordUpdatePost(params)(this.fetch, this.basePath);
    };
    /**
     * view
     * @param id id
     */
    SensitivewordcontrollerApi.prototype.sensitiveWordViewGet = function (params) {
        return exports.SensitivewordcontrollerApiFp.sensitiveWordViewGet(params)(this.fetch, this.basePath);
    };
    return SensitivewordcontrollerApi;
}(BaseAPI));
exports.SensitivewordcontrollerApi = SensitivewordcontrollerApi;
;
/**
 * SensitivewordcontrollerApi - factory interface
 */
exports.SensitivewordcontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         * create
         * @param sensitiveWord sensitiveWord
         */
        sensitiveWordCreatePost: function (params) {
            return exports.SensitivewordcontrollerApiFp.sensitiveWordCreatePost(params)(fetch, basePath);
        },
        /**
         * delete
         * @param ids ids
         */
        sensitiveWordDeletePost: function (params) {
            return exports.SensitivewordcontrollerApiFp.sensitiveWordDeletePost(params)(fetch, basePath);
        },
        /**
         * list
         * @param sensitiveWord sensitiveWord
         */
        sensitiveWordListGet: function (params) {
            return exports.SensitivewordcontrollerApiFp.sensitiveWordListGet(params)(fetch, basePath);
        },
        /**
         * list
         * @param sensitiveWord sensitiveWord
         */
        sensitiveWordListPost: function (params) {
            return exports.SensitivewordcontrollerApiFp.sensitiveWordListPost(params)(fetch, basePath);
        },
        /**
         * pageList
         * @param sensitiveWord sensitiveWord
         * @param pageNum pageNum
         * @param pageSize pageSize
         */
        sensitiveWordPageListGet: function (params) {
            return exports.SensitivewordcontrollerApiFp.sensitiveWordPageListGet(params)(fetch, basePath);
        },
        /**
         * pageList
         * @param sensitiveWord sensitiveWord
         * @param pageNum pageNum
         * @param pageSize pageSize
         */
        sensitiveWordPageListPost: function (params) {
            return exports.SensitivewordcontrollerApiFp.sensitiveWordPageListPost(params)(fetch, basePath);
        },
        /**
         * update
         * @param sensitiveWord sensitiveWord
         */
        sensitiveWordUpdatePost: function (params) {
            return exports.SensitivewordcontrollerApiFp.sensitiveWordUpdatePost(params)(fetch, basePath);
        },
        /**
         * view
         * @param id id
         */
        sensitiveWordViewGet: function (params) {
            return exports.SensitivewordcontrollerApiFp.sensitiveWordViewGet(params)(fetch, basePath);
        },
    };
};
/**
 * StatisticsApi - fetch parameter creator
 */
exports.StatisticsApiFetchParamCreactor = {
    /**
     * /countAssetsByFilter
     * 根据filter 计算个数
     * @param providerId providerId
     * @param onlineDate onlineDate
     * @param onlineDateEnd onlineDateEnd
     * @param uploadStateType uploadStateType
     * @param reviewStateType reviewStateType
     * @param onlineStateType onlineStateType
     */
    statisticsCountAssetsByFilterGet: function (params) {
        var baseUrl = "/statistics/countAssetsByFilter";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "providerId": params.providerId,
            "onlineDate": params.onlineDate,
            "onlineDateEnd": params.onlineDateEnd,
            "uploadStateType": params.uploadStateType,
            "reviewStateType": params.reviewStateType,
            "onlineStateType": params.onlineStateType,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * StatisticsApi - functional programming interface
 */
exports.StatisticsApiFp = {
    /**
     * /countAssetsByFilter
     * 根据filter 计算个数
     * @param providerId providerId
     * @param onlineDate onlineDate
     * @param onlineDateEnd onlineDateEnd
     * @param uploadStateType uploadStateType
     * @param reviewStateType reviewStateType
     * @param onlineStateType onlineStateType
     */
    statisticsCountAssetsByFilterGet: function (params) {
        var fetchArgs = exports.StatisticsApiFetchParamCreactor.statisticsCountAssetsByFilterGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * StatisticsApi - object-oriented interface
 */
var StatisticsApi = (function (_super) {
    __extends(StatisticsApi, _super);
    function StatisticsApi() {
        _super.apply(this, arguments);
    }
    /**
     * /countAssetsByFilter
     * 根据filter 计算个数
     * @param providerId providerId
     * @param onlineDate onlineDate
     * @param onlineDateEnd onlineDateEnd
     * @param uploadStateType uploadStateType
     * @param reviewStateType reviewStateType
     * @param onlineStateType onlineStateType
     */
    StatisticsApi.prototype.statisticsCountAssetsByFilterGet = function (params) {
        return exports.StatisticsApiFp.statisticsCountAssetsByFilterGet(params)(this.fetch, this.basePath);
    };
    return StatisticsApi;
}(BaseAPI));
exports.StatisticsApi = StatisticsApi;
;
/**
 * StatisticsApi - factory interface
 */
exports.StatisticsApiFactory = function (fetch, basePath) {
    return {
        /**
         * /countAssetsByFilter
         * 根据filter 计算个数
         * @param providerId providerId
         * @param onlineDate onlineDate
         * @param onlineDateEnd onlineDateEnd
         * @param uploadStateType uploadStateType
         * @param reviewStateType reviewStateType
         * @param onlineStateType onlineStateType
         */
        statisticsCountAssetsByFilterGet: function (params) {
            return exports.StatisticsApiFp.statisticsCountAssetsByFilterGet(params)(fetch, basePath);
        },
    };
};
/**
 * UploadhandlercontrollerApi - fetch parameter creator
 */
exports.UploadhandlercontrollerApiFetchParamCreactor = {
    /**
     * 批量上传资源接口
     * @param file file
     * @param resType resType
     * @param userId userId
     * @param folderId folderId
     */
    uploadHandlerBatchUploadPost: function (params) {
        // verify required parameter "file" is set
        if (params["file"] == null) {
            throw new Error("Missing required parameter file when calling uploadHandlerBatchUploadPost");
        }
        var baseUrl = "/uploadHandler/batchUpload";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "resType": params.resType,
            "userId": params.userId,
            "folderId": params.folderId,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["file"]) {
            fetchOptions.body = JSON.stringify(params["file"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * file
     */
    uploadHandlerFileDelete: function () {
        var baseUrl = "/uploadHandler/file";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "DELETE" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * file
     */
    uploadHandlerFileGet: function () {
        var baseUrl = "/uploadHandler/file";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * file
     */
    uploadHandlerFileHead: function () {
        var baseUrl = "/uploadHandler/file";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "HEAD" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * file
     */
    uploadHandlerFileOptions: function () {
        var baseUrl = "/uploadHandler/file";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "OPTIONS" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * file
     */
    uploadHandlerFilePatch: function () {
        var baseUrl = "/uploadHandler/file";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "PATCH" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * file
     */
    uploadHandlerFilePost: function () {
        var baseUrl = "/uploadHandler/file";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * file
     */
    uploadHandlerFilePut: function () {
        var baseUrl = "/uploadHandler/file";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "PUT" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * uploadImgs
     * @param file file
     * @param resType resType
     */
    uploadHandlerUploadPost: function (params) {
        // verify required parameter "file" is set
        if (params["file"] == null) {
            throw new Error("Missing required parameter file when calling uploadHandlerUploadPost");
        }
        var baseUrl = "/uploadHandler/upload";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "resType": params.resType,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "file": params.file,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * UploadhandlercontrollerApi - functional programming interface
 */
exports.UploadhandlercontrollerApiFp = {
    /**
     * 批量上传资源接口
     * @param file file
     * @param resType resType
     * @param userId userId
     * @param folderId folderId
     */
    uploadHandlerBatchUploadPost: function (params) {
        var fetchArgs = exports.UploadhandlercontrollerApiFetchParamCreactor.uploadHandlerBatchUploadPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * file
     */
    uploadHandlerFileDelete: function () {
        var fetchArgs = exports.UploadhandlercontrollerApiFetchParamCreactor.uploadHandlerFileDelete();
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * file
     */
    uploadHandlerFileGet: function () {
        var fetchArgs = exports.UploadhandlercontrollerApiFetchParamCreactor.uploadHandlerFileGet();
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * file
     */
    uploadHandlerFileHead: function () {
        var fetchArgs = exports.UploadhandlercontrollerApiFetchParamCreactor.uploadHandlerFileHead();
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * file
     */
    uploadHandlerFileOptions: function () {
        var fetchArgs = exports.UploadhandlercontrollerApiFetchParamCreactor.uploadHandlerFileOptions();
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * file
     */
    uploadHandlerFilePatch: function () {
        var fetchArgs = exports.UploadhandlercontrollerApiFetchParamCreactor.uploadHandlerFilePatch();
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * file
     */
    uploadHandlerFilePost: function () {
        var fetchArgs = exports.UploadhandlercontrollerApiFetchParamCreactor.uploadHandlerFilePost();
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * file
     */
    uploadHandlerFilePut: function () {
        var fetchArgs = exports.UploadhandlercontrollerApiFetchParamCreactor.uploadHandlerFilePut();
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * uploadImgs
     * @param file file
     * @param resType resType
     */
    uploadHandlerUploadPost: function (params) {
        var fetchArgs = exports.UploadhandlercontrollerApiFetchParamCreactor.uploadHandlerUploadPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * UploadhandlercontrollerApi - object-oriented interface
 */
var UploadhandlercontrollerApi = (function (_super) {
    __extends(UploadhandlercontrollerApi, _super);
    function UploadhandlercontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     * 批量上传资源接口
     * @param file file
     * @param resType resType
     * @param userId userId
     * @param folderId folderId
     */
    UploadhandlercontrollerApi.prototype.uploadHandlerBatchUploadPost = function (params) {
        return exports.UploadhandlercontrollerApiFp.uploadHandlerBatchUploadPost(params)(this.fetch, this.basePath);
    };
    /**
     * file
     */
    UploadhandlercontrollerApi.prototype.uploadHandlerFileDelete = function () {
        return exports.UploadhandlercontrollerApiFp.uploadHandlerFileDelete()(this.fetch, this.basePath);
    };
    /**
     * file
     */
    UploadhandlercontrollerApi.prototype.uploadHandlerFileGet = function () {
        return exports.UploadhandlercontrollerApiFp.uploadHandlerFileGet()(this.fetch, this.basePath);
    };
    /**
     * file
     */
    UploadhandlercontrollerApi.prototype.uploadHandlerFileHead = function () {
        return exports.UploadhandlercontrollerApiFp.uploadHandlerFileHead()(this.fetch, this.basePath);
    };
    /**
     * file
     */
    UploadhandlercontrollerApi.prototype.uploadHandlerFileOptions = function () {
        return exports.UploadhandlercontrollerApiFp.uploadHandlerFileOptions()(this.fetch, this.basePath);
    };
    /**
     * file
     */
    UploadhandlercontrollerApi.prototype.uploadHandlerFilePatch = function () {
        return exports.UploadhandlercontrollerApiFp.uploadHandlerFilePatch()(this.fetch, this.basePath);
    };
    /**
     * file
     */
    UploadhandlercontrollerApi.prototype.uploadHandlerFilePost = function () {
        return exports.UploadhandlercontrollerApiFp.uploadHandlerFilePost()(this.fetch, this.basePath);
    };
    /**
     * file
     */
    UploadhandlercontrollerApi.prototype.uploadHandlerFilePut = function () {
        return exports.UploadhandlercontrollerApiFp.uploadHandlerFilePut()(this.fetch, this.basePath);
    };
    /**
     * uploadImgs
     * @param file file
     * @param resType resType
     */
    UploadhandlercontrollerApi.prototype.uploadHandlerUploadPost = function (params) {
        return exports.UploadhandlercontrollerApiFp.uploadHandlerUploadPost(params)(this.fetch, this.basePath);
    };
    return UploadhandlercontrollerApi;
}(BaseAPI));
exports.UploadhandlercontrollerApi = UploadhandlercontrollerApi;
;
/**
 * UploadhandlercontrollerApi - factory interface
 */
exports.UploadhandlercontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         * 批量上传资源接口
         * @param file file
         * @param resType resType
         * @param userId userId
         * @param folderId folderId
         */
        uploadHandlerBatchUploadPost: function (params) {
            return exports.UploadhandlercontrollerApiFp.uploadHandlerBatchUploadPost(params)(fetch, basePath);
        },
        /**
         * file
         */
        uploadHandlerFileDelete: function () {
            return exports.UploadhandlercontrollerApiFp.uploadHandlerFileDelete()(fetch, basePath);
        },
        /**
         * file
         */
        uploadHandlerFileGet: function () {
            return exports.UploadhandlercontrollerApiFp.uploadHandlerFileGet()(fetch, basePath);
        },
        /**
         * file
         */
        uploadHandlerFileHead: function () {
            return exports.UploadhandlercontrollerApiFp.uploadHandlerFileHead()(fetch, basePath);
        },
        /**
         * file
         */
        uploadHandlerFileOptions: function () {
            return exports.UploadhandlercontrollerApiFp.uploadHandlerFileOptions()(fetch, basePath);
        },
        /**
         * file
         */
        uploadHandlerFilePatch: function () {
            return exports.UploadhandlercontrollerApiFp.uploadHandlerFilePatch()(fetch, basePath);
        },
        /**
         * file
         */
        uploadHandlerFilePost: function () {
            return exports.UploadhandlercontrollerApiFp.uploadHandlerFilePost()(fetch, basePath);
        },
        /**
         * file
         */
        uploadHandlerFilePut: function () {
            return exports.UploadhandlercontrollerApiFp.uploadHandlerFilePut()(fetch, basePath);
        },
        /**
         * uploadImgs
         * @param file file
         * @param resType resType
         */
        uploadHandlerUploadPost: function (params) {
            return exports.UploadhandlercontrollerApiFp.uploadHandlerUploadPost(params)(fetch, basePath);
        },
    };
};
/**
 * WaterrulecontrollerApi - fetch parameter creator
 */
exports.WaterrulecontrollerApiFetchParamCreactor = {
    /**
     * create
     * @param waterRule waterRule
     */
    waterRuleCreatePost: function (params) {
        // verify required parameter "waterRule" is set
        if (params["waterRule"] == null) {
            throw new Error("Missing required parameter waterRule when calling waterRuleCreatePost");
        }
        var baseUrl = "/waterRule/create";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["waterRule"]) {
            fetchOptions.body = JSON.stringify(params["waterRule"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * delete
     * @param ids ids
     */
    waterRuleDeletePost: function (params) {
        // verify required parameter "ids" is set
        if (params["ids"] == null) {
            throw new Error("Missing required parameter ids when calling waterRuleDeletePost");
        }
        var baseUrl = "/waterRule/delete";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["ids"]) {
            fetchOptions.body = JSON.stringify(params["ids"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * list
     * @param waterRule waterRule
     */
    waterRuleListGet: function (params) {
        var baseUrl = "/waterRule/list";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["waterRule"]) {
            fetchOptions.body = JSON.stringify(params["waterRule"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * list
     * @param waterRule waterRule
     */
    waterRuleListPost: function (params) {
        var baseUrl = "/waterRule/list";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["waterRule"]) {
            fetchOptions.body = JSON.stringify(params["waterRule"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * pageList
     * @param waterRule waterRule
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    waterRulePageListGet: function (params) {
        var baseUrl = "/waterRule/pageList";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["waterRule"]) {
            fetchOptions.body = JSON.stringify(params["waterRule"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * pageList
     * @param waterRule waterRule
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    waterRulePageListPost: function (params) {
        var baseUrl = "/waterRule/pageList";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageNum": params.pageNum,
            "pageSize": params.pageSize,
        });
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["waterRule"]) {
            fetchOptions.body = JSON.stringify(params["waterRule"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * update
     * @param waterRule waterRule
     */
    waterRuleUpdatePost: function (params) {
        // verify required parameter "waterRule" is set
        if (params["waterRule"] == null) {
            throw new Error("Missing required parameter waterRule when calling waterRuleUpdatePost");
        }
        var baseUrl = "/waterRule/update";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "POST" };
        var contentTypeHeader;
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["waterRule"]) {
            fetchOptions.body = JSON.stringify(params["waterRule"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * view
     * @param id id
     */
    waterRuleViewGet: function (params) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling waterRuleViewGet");
        }
        var baseUrl = "/waterRule/view";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "id": params.id,
        });
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * WaterrulecontrollerApi - functional programming interface
 */
exports.WaterrulecontrollerApiFp = {
    /**
     * create
     * @param waterRule waterRule
     */
    waterRuleCreatePost: function (params) {
        var fetchArgs = exports.WaterrulecontrollerApiFetchParamCreactor.waterRuleCreatePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * delete
     * @param ids ids
     */
    waterRuleDeletePost: function (params) {
        var fetchArgs = exports.WaterrulecontrollerApiFetchParamCreactor.waterRuleDeletePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * list
     * @param waterRule waterRule
     */
    waterRuleListGet: function (params) {
        var fetchArgs = exports.WaterrulecontrollerApiFetchParamCreactor.waterRuleListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * list
     * @param waterRule waterRule
     */
    waterRuleListPost: function (params) {
        var fetchArgs = exports.WaterrulecontrollerApiFetchParamCreactor.waterRuleListPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * pageList
     * @param waterRule waterRule
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    waterRulePageListGet: function (params) {
        var fetchArgs = exports.WaterrulecontrollerApiFetchParamCreactor.waterRulePageListGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * pageList
     * @param waterRule waterRule
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    waterRulePageListPost: function (params) {
        var fetchArgs = exports.WaterrulecontrollerApiFetchParamCreactor.waterRulePageListPost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * update
     * @param waterRule waterRule
     */
    waterRuleUpdatePost: function (params) {
        var fetchArgs = exports.WaterrulecontrollerApiFetchParamCreactor.waterRuleUpdatePost(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * view
     * @param id id
     */
    waterRuleViewGet: function (params) {
        var fetchArgs = exports.WaterrulecontrollerApiFetchParamCreactor.waterRuleViewGet(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * WaterrulecontrollerApi - object-oriented interface
 */
var WaterrulecontrollerApi = (function (_super) {
    __extends(WaterrulecontrollerApi, _super);
    function WaterrulecontrollerApi() {
        _super.apply(this, arguments);
    }
    /**
     * create
     * @param waterRule waterRule
     */
    WaterrulecontrollerApi.prototype.waterRuleCreatePost = function (params) {
        return exports.WaterrulecontrollerApiFp.waterRuleCreatePost(params)(this.fetch, this.basePath);
    };
    /**
     * delete
     * @param ids ids
     */
    WaterrulecontrollerApi.prototype.waterRuleDeletePost = function (params) {
        return exports.WaterrulecontrollerApiFp.waterRuleDeletePost(params)(this.fetch, this.basePath);
    };
    /**
     * list
     * @param waterRule waterRule
     */
    WaterrulecontrollerApi.prototype.waterRuleListGet = function (params) {
        return exports.WaterrulecontrollerApiFp.waterRuleListGet(params)(this.fetch, this.basePath);
    };
    /**
     * list
     * @param waterRule waterRule
     */
    WaterrulecontrollerApi.prototype.waterRuleListPost = function (params) {
        return exports.WaterrulecontrollerApiFp.waterRuleListPost(params)(this.fetch, this.basePath);
    };
    /**
     * pageList
     * @param waterRule waterRule
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    WaterrulecontrollerApi.prototype.waterRulePageListGet = function (params) {
        return exports.WaterrulecontrollerApiFp.waterRulePageListGet(params)(this.fetch, this.basePath);
    };
    /**
     * pageList
     * @param waterRule waterRule
     * @param pageNum pageNum
     * @param pageSize pageSize
     */
    WaterrulecontrollerApi.prototype.waterRulePageListPost = function (params) {
        return exports.WaterrulecontrollerApiFp.waterRulePageListPost(params)(this.fetch, this.basePath);
    };
    /**
     * update
     * @param waterRule waterRule
     */
    WaterrulecontrollerApi.prototype.waterRuleUpdatePost = function (params) {
        return exports.WaterrulecontrollerApiFp.waterRuleUpdatePost(params)(this.fetch, this.basePath);
    };
    /**
     * view
     * @param id id
     */
    WaterrulecontrollerApi.prototype.waterRuleViewGet = function (params) {
        return exports.WaterrulecontrollerApiFp.waterRuleViewGet(params)(this.fetch, this.basePath);
    };
    return WaterrulecontrollerApi;
}(BaseAPI));
exports.WaterrulecontrollerApi = WaterrulecontrollerApi;
;
/**
 * WaterrulecontrollerApi - factory interface
 */
exports.WaterrulecontrollerApiFactory = function (fetch, basePath) {
    return {
        /**
         * create
         * @param waterRule waterRule
         */
        waterRuleCreatePost: function (params) {
            return exports.WaterrulecontrollerApiFp.waterRuleCreatePost(params)(fetch, basePath);
        },
        /**
         * delete
         * @param ids ids
         */
        waterRuleDeletePost: function (params) {
            return exports.WaterrulecontrollerApiFp.waterRuleDeletePost(params)(fetch, basePath);
        },
        /**
         * list
         * @param waterRule waterRule
         */
        waterRuleListGet: function (params) {
            return exports.WaterrulecontrollerApiFp.waterRuleListGet(params)(fetch, basePath);
        },
        /**
         * list
         * @param waterRule waterRule
         */
        waterRuleListPost: function (params) {
            return exports.WaterrulecontrollerApiFp.waterRuleListPost(params)(fetch, basePath);
        },
        /**
         * pageList
         * @param waterRule waterRule
         * @param pageNum pageNum
         * @param pageSize pageSize
         */
        waterRulePageListGet: function (params) {
            return exports.WaterrulecontrollerApiFp.waterRulePageListGet(params)(fetch, basePath);
        },
        /**
         * pageList
         * @param waterRule waterRule
         * @param pageNum pageNum
         * @param pageSize pageSize
         */
        waterRulePageListPost: function (params) {
            return exports.WaterrulecontrollerApiFp.waterRulePageListPost(params)(fetch, basePath);
        },
        /**
         * update
         * @param waterRule waterRule
         */
        waterRuleUpdatePost: function (params) {
            return exports.WaterrulecontrollerApiFp.waterRuleUpdatePost(params)(fetch, basePath);
        },
        /**
         * view
         * @param id id
         */
        waterRuleViewGet: function (params) {
            return exports.WaterrulecontrollerApiFp.waterRuleViewGet(params)(fetch, basePath);
        },
    };
};
